from dataclasses import dataclass, field
from typing import List, Optional

from xsdata.models.datatype import XmlDateTime

from org.oasis_open.plcs.common import (
    BaseObject,
    BaseRootObject,
    Reference,
)
from org.oasis_open.plcs.common import (
    DataContainer as CommonDataContainer,
)

__NAMESPACE__ = "http://docs.oasis-open.org/plcs/ns/plcslib/v1.0/data/plcs/plcs-psm/xml-schema/plcs-psm"


@dataclass
class DataContainer:
    """A DataContainer is an abstract generalization of the root element of a data
    file.

    Only non-abstract specializations of the DataContainer can be
    instantiated.
    """


@dataclass
class LocalizedString:
    """A LocalizedString is a text based string.

    The language in which the the string is expressed is optionally
    identified.
    """

    value: str = field(
        default="",
        metadata={
            "required": True,
        },
    )
    lang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )
    uid: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        },
    )


@dataclass
class ApplicationDomain(BaseRootObject):
    """
    An ApplicationDomain defines the scope of applicability for a
    ViewDefinitionContext Each ApplicationDomain optionally references a data item
    in either a ExternalOwlObject or a ExternalItem that may indicate what the
    domain is.

    :ivar definition: a reference to an ExternalOwlClass or an
        ExternalItem held externally to the exchange file that provides
        the definition of the ApplicationDomain.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which the
        ApplicationDomain is a proxy.
    """

    definition: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Definition",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    same_as: Optional["ApplicationDomain.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class SameAs:
        external_item: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ExternalItem",
                "type": "Element",
                "namespace": "",
            },
        )
        external_owl_object: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ExternalOwlObject",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class AssignmentObject(BaseObject):
    """An AssignmentObject defines the allocation of one datatype to another.

    Only non-abstract specializations of the AssignmentObject datatype
    can be instantiated.

    :ivar id: a set of Identifiers for the AssignmentObject
    :ivar description: a set of text based descriptions of the
        AssignmentObject.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this AssignmentObject This
        AssignmentObject is a member of the referenced class.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar assignment_object_relationship:
    """

    id: Optional["AssignmentObject.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["AssignmentObject.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["AssignmentObject.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_assignment: List["ActivityAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List["WorkOrderAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    assignment_object_relationship: List["AssignmentObjectRelationship"] = (
        field(
            default_factory=list,
            metadata={
                "name": "AssignmentObjectRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
    )

    @dataclass
    class Id:
        identifier: List["Identifier"] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List["Descriptor"] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List["Classification"] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ExternalOwlClass(BaseRootObject):
    """An ExternalOwlClass defines a relationship between a datatype and an OWL
    reference-data class of which instances of the datatype are members.

    The OWL class is defined and managed in an ontology external to the
    data exchange file.

    :ivar class_value: the Uniform Resource Identifier (normally an
        http:// URL) that specifies the OWL reference-data class of
        which referenced instances are members.
    """

    class_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Class",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class ExternalOwlObject(BaseRootObject):
    """An ExternalOwlObject states that a block instance is the same as an OWL
    reference-data item.

    NOTE: This capability is similar in nature to the ProxyObject
    built-in property in the World Wide Web Consortium Web Ontology Language, available from
    their Web site. ProxyObject indicates that two individuals or classes have the same
    'identity'.

    :ivar individual: the Uniform Resource Identifier (normally an
        http:// URL) that provides the identification and location of
        the OWL file and the relevant reference-data item within it.
    """

    individual: Optional[str] = field(
        default=None,
        metadata={
            "name": "Individual",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class GeometricModelRelationship(BaseRootObject):
    """
    A GeometricModelRelationship is a type of ChainedGeometricModelLinkSelect.

    :ivar rep1: one of the instances of GeometricModel that is a part of
        the relationship.
    :ivar rep2: the other instance of GeometricModel that is a part of
        the relationship. If one element of the relationship is the
        dependent upon the other, this attribute shall be the dependent
        one.
    """

    rep1: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Rep1",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    rep2: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Rep2",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class LifeCycleStage(BaseRootObject):
    """A LifeCycleStage represents a point, period, or step in a lifecycle.

    It is referenced by ViewDefinitionContext.

    :ivar definition: a reference to an ExternalOwlClass or an
        ExternalItem held externally to the exchange file that provides
        the definition of the LifeCycleStage.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    """

    definition: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Definition",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    same_as: Optional["LifeCycleStage.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class SameAs:
        external_item: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ExternalItem",
                "type": "Element",
                "namespace": "",
            },
        )
        external_owl_object: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ExternalOwlObject",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class PreDefinedTypeQualifier(BaseRootObject):
    """A PreDefinedTypeQualifier is a type of TypeQualifierSelect whose
    PreDefinedTypeQualifier has predefined values: 'minimum': the value is a minimum value;
    'maximum': the value is a maximum value; 'nominal': the value is a nominal value;
    'specified': the value has been specified; 'typical': the value is typical;
    'calculated': the value has been calculated; 'designed': the value represents a value
    intended by the design; 'estimated': the value has been estimated; 'measured': the value
    has been measured; 'required': the value represents a requirement; 'set point': the
    value is used as an initialization value; 'basic': the value is a basic value; 'lower
    deviation': the value is maximum deviation in the negative direction from the nominal or
    basic value; 'upper deviation': the value is maximum deviation in the positive direction
    from the nominal or basic value.

    :ivar name: the words by which the PreDefinedTypeQualifier is known.
    """

    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class ProxyItemSelect(BaseObject):
    external_owl_object: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ExternalOwlObject",
            "type": "Element",
            "namespace": "",
        },
    )
    external_item: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ExternalItem",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class SetMembership(BaseRootObject):
    """ASetMembership is a relationship that is between a set and a thing that
    indicates the thing is a member of the set.

    NOTE: the term 'class' and 'set' are
    synonyms.

    :ivar member: the member of the set
    :ivar of_set: the set that has the thing as a member
    """

    member: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Member",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    of_set: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "OfSet",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class SubsetMember(BaseRootObject):
    """ASubsetMember is a relationship that is between: set A; and set B. that
    indicates: each member of set A is also a member of set B. NOTE: Set A may be equal to
    set B.

    :ivar subset: the set that contains all members of subset.
    :ivar superset: the set that contains only members of superset.
    """

    subset: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Subset",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    superset: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Superset",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class ActivityAssignment(AssignmentObject):
    """An ActivityAssignment is a specialization of an AssignmentObject that
    represents the assignment of Activity instances to instances that are
    specializations of ActivityAssignmentSelect.

    NOTE: The meaning of the assignment is determined by
    classification which is identified by the AssignmentObject property. The possible
    classifications are subclasses of . NOTE: This entity should not be used to represent
    the association of an activity with the organizations that are responsible for its
    execution or its management. That kind of information can be represented with instances
    of OrganizationOrPersonInOrganizationAssignment

    :ivar assigned_activity: the Activity that is considered.
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar project_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar required_resource_assignment:
    :ivar resource_as_realized_assignment:
    :ivar scheme_entry_assignment:
    :ivar scheme_subject_assignment:
    :ivar scheme_version_assignment:
    :ivar security_classification_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar work_output_assignment:
    """

    assigned_activity: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedActivity",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_method_assignment: List["ActivityMethodAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List["ApprovalAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List["ConditionEvaluationAssignment"] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List["ConditionAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List["ContractAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List["DateTimeAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List["DocumentAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List["EffectivityAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List["JustificationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List["LocationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List["ObservationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        "OrganizationOrPersonInOrganizationAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    project_assignment: List["ProjectAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ProjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List["PropertyDefinitionAssignment"] = (
        field(
            default_factory=list,
            metadata={
                "name": "PropertyDefinitionAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    property_value_assignment: List["PropertyValueAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    required_resource_assignment: List["RequiredResourceAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "RequiredResourceAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    resource_as_realized_assignment: List["ResourceAsRealizedAssignment"] = (
        field(
            default_factory=list,
            metadata={
                "name": "ResourceAsRealizedAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    scheme_entry_assignment: List["SchemeEntryAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "SchemeEntryAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_subject_assignment: List["SchemeSubjectAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "SchemeSubjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_version_assignment: List["SchemeVersionAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "SchemeVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        "SecurityClassificationAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List["StateAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List["StateDefinitionAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_output_assignment: List["WorkOutputAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "WorkOutputAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ActivityMethodAssignment(AssignmentObject):
    """
    An ActivityMethodAssignment is an association of an ActivityMethod with product
    or activity data.

    :ivar assigned_activity_method: the ActivityMethod that is to be
        associated with product or activity data.
    :ivar approval_assignment:
    :ivar certification_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar project_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar requirement_assignment:
    :ivar security_classification_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar work_output_assignment:
    """

    assigned_activity_method: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedActivityMethod",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List["ApprovalAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List["CertificationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List["ConditionEvaluationAssignment"] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List["ConditionAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List["ContractAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List["DateTimeAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List["DocumentAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List["EffectivityAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List["JustificationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List["LocationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List["ObservationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        "OrganizationOrPersonInOrganizationAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    project_assignment: List["ProjectAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ProjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List["PropertyDefinitionAssignment"] = (
        field(
            default_factory=list,
            metadata={
                "name": "PropertyDefinitionAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    property_value_assignment: List["PropertyValueAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List["RequirementAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        "SecurityClassificationAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List["StateAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List["StateDefinitionAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_output_assignment: List["WorkOutputAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "WorkOutputAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class AnalysisAssignment(AssignmentObject):
    """
    An AnalysisAssignment is a specialization of a AssignmentObject that relates a
    specific version of an analysis to the item being analyzed.

    :ivar assigned_analysis: the AnalysisVersion being assigned.
    :ivar activity_method_assignment:
    :ivar certification_assignment:
    :ivar condition_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar information_usage_right_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar required_resource_assignment:
    :ivar resource_item_assignment:
    :ivar time_interval_assignment:
    :ivar type_of_person_assignment:
    :ivar work_request_assignment:
    """

    assigned_analysis: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedAnalysis",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_method_assignment: List["ActivityMethodAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List["CertificationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_assignment: List["ConditionAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List["DateTimeAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List["DocumentAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List["EffectivityAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        "InformationUsageRightAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List["JustificationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List["ObservationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List["PropertyDefinitionAssignment"] = (
        field(
            default_factory=list,
            metadata={
                "name": "PropertyDefinitionAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    property_value_assignment: List["PropertyValueAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    required_resource_assignment: List["RequiredResourceAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "RequiredResourceAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    resource_item_assignment: List["ResourceItemAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ResourceItemAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List["TimeIntervalAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    type_of_person_assignment: List["TypeOfPersonAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "TypeOfPersonAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List["WorkRequestAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ApprovalAssignment(AssignmentObject):
    """
    An ApprovalAssignment is the assignment of an Approval to activity or product
    data.

    :ivar assigned_approval: the Approval that is assigned with activity
        or product data.
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    """

    assigned_approval: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedApproval",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    condition_evaluation_assignment: List["ConditionEvaluationAssignment"] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List["ConditionAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List["DocumentAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List["EffectivityAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List["JustificationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List["ObservationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class GeometricModelRelationshipWithTransformation(GeometricModelRelationship):
    """A GeometricModelRelationshipWithTransformation is a specialization of
    GeometricModelRelationship.

    A GeometricModelRelationshipWithTransformation may be a
    GeometricRelationshipWithPlacementTransformation or a
    GeometricRelationshipWithOperatorTransformation
    """


@dataclass
class WorkOrderAssignment(AssignmentObject):
    """An WorkOrderAssignment is an association of a WorkOrder with the product or
    activity data that are subjects of this WorkOrder.

    In case a tyre on a car is flat, a WorkOrder may be created and
    associated with the instances that represent the tyre that is flat,
    the car and the spare wheel.

    :ivar assigned_work_order: the WorkOrder for which a set of items is
        being identified.
    """

    assigned_work_order: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedWorkOrder",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class CertificationAssignment(AssignmentObject):
    """A CertificationAssignment is an association of a Certification with activity
    or product data.

    'certified supplier' is an example of certification that may be
    granted to an organization by its contractor.

    :ivar assigned_certification: the Certification that is assigned to
        activity or product data.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar information_usage_right_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar time_interval_assignment:
    """

    assigned_certification: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedCertification",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List["DateTimeAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List["DocumentAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List["EffectivityAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        "InformationUsageRightAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List["LocationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List["ObservationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        "OrganizationOrPersonInOrganizationAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List["PropertyDefinitionAssignment"] = (
        field(
            default_factory=list,
            metadata={
                "name": "PropertyDefinitionAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    property_value_assignment: List["PropertyValueAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List["TimeIntervalAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Classification(BaseObject):
    """A Classification is a relationship to the class that a subject is a member
    of.

    NOTE: The subject is represented by a Block that has a "classifiedAs" as a
    property of type Classification.
    """

    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List["EffectivityAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List["ObservationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List["ContractAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List["DateTimeAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List["DocumentAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        "InformationUsageRightAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List["JustificationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        "OrganizationOrPersonInOrganizationAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        "SecurityClassificationAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List["TimeIntervalAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    classification_relationship: List["ClassificationRelationship"] = field(
        default_factory=list,
        metadata={
            "name": "ClassificationRelationship",
            "type": "Element",
            "namespace": "",
        },
    )
    class_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "classRef",
            "type": "Attribute",
        },
    )


@dataclass
class ConditionAssignment(AssignmentObject):
    """A ConditionAssignment is a relationship that identifies the statement or
    relationship to which a Condition applies.

    Condition 29 applies to the relationship between a Saab 9.3 car and
    the activity of checking the oil level on that make of car.

    :ivar assigned_condition: the Condition that is being assigned.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    """

    assigned_condition: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedCondition",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List["DateTimeAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List["DocumentAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List["EffectivityAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List["JustificationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List["ObservationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        "OrganizationOrPersonInOrganizationAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ConditionEvaluationAssignment(AssignmentObject):
    """A ConditionEvaluationAssignment is a relationship that identifies the
    statement or relationship to which the ConditionEvaluation applies.

    The ConditionEvaluation (instance 87) is assigned to the activity of
    checking the oil level on car VIN 12345678.

    :ivar assigned_condition_evaluation: the ConditionEvaluation that is
        being assigned.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    """

    assigned_condition_evaluation: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedConditionEvaluation",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List["DateTimeAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List["ObservationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        "OrganizationOrPersonInOrganizationAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ContractAssignment(AssignmentObject):
    """
    A ContractAssignment is an association of a Contract with activity or product
    data.

    :ivar assigned_contract: the Contract that is to be associated with
        activity or product data.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar time_interval_assignment:
    """

    assigned_contract: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedContract",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List["DateTimeAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List["DocumentAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List["EffectivityAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List["LocationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List["ObservationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        "OrganizationOrPersonInOrganizationAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List["TimeIntervalAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class GeometricRelationshipWithOperatorTransformation(
    GeometricModelRelationshipWithTransformation
):
    """
    A GeometricRelationshipWithOperatorTransformation is a specialization of
    GeometricModelRelationshipWithTransformation.

    :ivar transformation: the CartesianTransformationSelect that
        identifies the transformation for the
        GeometricRelationshipWithOperatorTransformation.
    """

    transformation: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Transformation",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class GeometricRelationshipWithPlacementTransformation(
    GeometricModelRelationshipWithTransformation
):
    """
    A GeometricRelationshipWithPlacementTransformation is a specialization of
    GeometricModelRelationshipWithTransformation.

    :ivar transformation: the AxisPlacementMapping that identifies the
        transformation for the
        GeometricRelationshipWithPlacementTransformation.
    """

    transformation: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Transformation",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class WorkRequestAssignment(AssignmentObject):
    """An WorkRequestAssignment is an association of a WorkRequest with the product
    or activity data that are subjects of this WorkRequest.

    In case a tyre on a car is flat, a WorkRequest may be created and
    associated with the instances that represent the tyre that is flat,
    the car and the spare wheel.

    :ivar assigned_work_request: the WorkRequest for which a set of
        items is being identified.
    :ivar approval_assignment:
    """

    assigned_work_request: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedWorkRequest",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class DateTimeAssignment(AssignmentObject):
    """A DateTimeAssignment is a specialization of an AssignmentObject that
    represents the assignment of a date and time, DateTimeString with activity or
    product data.

    NOTE: The meaning of the assignment is determined by classification which is
    identified by the AssignmentObject property. The possible classifications are subclasses
    of .

    :ivar assigned_date: the date and time that is assigned to activity
        or product data.
    :ivar approval_assignment:
    :ivar condition_assignment:
    :ivar date_time_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar time_interval_assignment:
    """

    assigned_date: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AssignedDate",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List["DateTimeAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List["EffectivityAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List["ObservationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        "OrganizationOrPersonInOrganizationAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List["TimeIntervalAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class DetailedGeometricModelElement(BaseObject):
    """A DetailedGeometricModelElement identifies a geometric construct.

    Only non abstract specializations of the
    DetailedGeometricModelElement entity data type can be instantiated.

    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this DetailedGeometricModelElement
        This DetailedGeometricModelElement is a member of the referenced
        class.
    """

    classified_as: Optional["DetailedGeometricModelElement.ClassifiedAs"] = (
        field(
            default=None,
            metadata={
                "name": "ClassifiedAs",
                "type": "Element",
                "namespace": "",
            },
        )
    )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ExchangeContextClassLibrary(BaseRootObject):
    """A ExchangeContextClassLibrary is a representation of a universal resource
    identifier for the OWL reference-data library that provides the context for an
    exchange of data.

    NOTE: Each data exchange takes place in the context of a single OWL
    class library that references any other OWL libraries that are required.

    :ivar library_id: the URI by which the ExchangeContextClassLibrary
        is referenced and identified.
    :ivar contract_assignment:
    """

    library_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "LibraryId",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class GeometricCompositionWithOperatorTransformation(
    GeometricRelationshipWithOperatorTransformation
):
    """
    A GeometricCompositionWithOperatorTransformation is a specialization of
    GeometricRelationshipWithOperatorTransformation.
    """


@dataclass
class GeometricCompositionWithPlacementTransformation(
    GeometricRelationshipWithPlacementTransformation
):
    """
    A GeometricCompositionWithPlacementTransformation is a specialization of
    GeometricRelationshipWithPlacementTransformation.
    """


@dataclass
class CartesianPoint(DetailedGeometricModelElement):
    """
    A CartesianPoint is a specialization of DetailedGeometricModelElement that
    defines a point by a list of up to 3 cartesian coordinates.
    """

    coordinates: Optional["CartesianPoint.Coordinates"] = field(
        default=None,
        metadata={
            "name": "Coordinates",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class Coordinates:
        coordinates: List[float] = field(
            default_factory=list,
            metadata={
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
                "max_occurs": 3,
            },
        )


@dataclass
class Descriptor(BaseObject):
    """A Descriptor is a set of words that describe something.

    The same thing may have multiple descriptions associated with it.
    Relating both a short description and a long description to an
    operational activity or an organization, as required by the US DoD
    Architecture Framework, are examples of multiple descriptions
    applied to the same item.

    :ivar id: a set of Identifiers for the Descriptor
    :ivar localized_string:
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this Description This Description
        is a member of the referenced class.
    :ivar description_context: the context in which the Descriptor has
        been made.
    :ivar approval_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar information_usage_right_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar security_classification_assignment:
    :ivar time_interval_assignment:
    :ivar descriptor_relationship:
    """

    id: Optional["Descriptor.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    localized_string: List[LocalizedString] = field(
        default_factory=list,
        metadata={
            "name": "LocalizedString",
            "type": "Element",
            "namespace": "",
            "min_occurs": 1,
        },
    )
    classified_as: Optional["Descriptor.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    description_context: Optional["Descriptor.DescriptionContext"] = field(
        default=None,
        metadata={
            "name": "DescriptionContext",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List["DocumentAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List["EffectivityAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        "InformationUsageRightAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List["JustificationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List["ObservationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        "OrganizationOrPersonInOrganizationAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        "SecurityClassificationAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List["TimeIntervalAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    descriptor_relationship: List["DescriptorRelationship"] = field(
        default_factory=list,
        metadata={
            "name": "DescriptorRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List["Identifier"] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class DescriptionContext:
        identifier: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )
        organization: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Organization",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class Direction(DetailedGeometricModelElement):
    """A Direction is a specialization of DetailedGeometricModelElement that
    defines a 2 or 3 dimensional vector.

    NOTE: A Direction is not located in a geometric
    space but is used in the definition of geometric entities like AxisPlacement.
    """

    coordinates: Optional["Direction.Coordinates"] = field(
        default=None,
        metadata={
            "name": "Coordinates",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class Coordinates:
        coordinates: List[float] = field(
            default_factory=list,
            metadata={
                "type": "Element",
                "namespace": "",
                "min_occurs": 2,
                "max_occurs": 3,
            },
        )


@dataclass
class DocumentAssignment(AssignmentObject):
    """
    A DocumentAssignment is a mechanism to associate a document with product data,
    where the assigned document provides information about the data with which it
    is associated.

    :ivar assigned_document: the Document, DocumentVersion,
        DigitalDocumentDefinition or File that is used to provide
        information.
    :ivar approval_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar security_classification_assignment:
    :ivar time_interval_assignment:
    """

    assigned_document: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedDocument",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List["DocumentAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List["EffectivityAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List["JustificationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List["ObservationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        "OrganizationOrPersonInOrganizationAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List["PropertyDefinitionAssignment"] = (
        field(
            default_factory=list,
            metadata={
                "name": "PropertyDefinitionAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    property_value_assignment: List["PropertyValueAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        "SecurityClassificationAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List["TimeIntervalAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class AssociationObject(BaseObject):
    """
    An AssociationObject is an abstract generalization of instances that represent
    an association between two sets of product or activity data.

    :ivar description: A set of text based descriptions of the object.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this AssociationObject. This
        AssociationObject is a member of the referenced class.
    """

    description: Optional["AssociationObject.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["AssociationObject.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class AxisPlacement(DetailedGeometricModelElement):
    """An AxisPlacement is a specialization of DetailedGeometricModelElement that
    defines a right-handed, 2D or 3D, coordinate system.

    If the AxisPlacement belongs to a 3D geometric space, the third
    direction of the coordinate system is defined by the vector product
    of x-axis and y-axis. An AxisPlacement may be an AxisPlacement2d or
    an AxisPlacement3d.

    :ivar origin: the CartesianPoint that defines the position of the
        AxisPlacement in the geometric space.
    :ivar xaxis: the Direction that defines the first axis of the
        AxisPlacement.
    :ivar yaxis: the Direction that defines the second axis of the
        AxisPlacement.
    """

    origin: Optional["AxisPlacement.Origin"] = field(
        default=None,
        metadata={
            "name": "Origin",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    xaxis: Optional["AxisPlacement.Xaxis"] = field(
        default=None,
        metadata={
            "name": "XAxis",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    yaxis: Optional["AxisPlacement.Yaxis"] = field(
        default=None,
        metadata={
            "name": "YAxis",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class Origin:
        cartesian_point: Optional[CartesianPoint] = field(
            default=None,
            metadata={
                "name": "CartesianPoint",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )

    @dataclass
    class Xaxis:
        direction: Optional[Direction] = field(
            default=None,
            metadata={
                "name": "Direction",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )

    @dataclass
    class Yaxis:
        direction: Optional[Direction] = field(
            default=None,
            metadata={
                "name": "Direction",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )


@dataclass
class CartesianTransformation2D(DetailedGeometricModelElement):
    """A CartesianTransformation2d is a specialization of
    DetailedGeometricModelElement.

    It is defined in a 2D geometric space by a 2*2 matrix and
    a cartesian point. Let be: M, the 2*2 multiplication matrix of the cartesian
    transformation; A, the point of the cartesian transformation; P, a point in the
    geometric space; Q, the result of the application of the transformation to P. The
    coordinates of Q shall be obtained by the formula: Q = M*P + A

    :ivar multiplication_matrix: the array of two instances of Direction
        that defines the multiplication matrix of the transformation.
    :ivar translation: the CartesianPoint that defines the position of
        the result of the application of the transformation to the
        origin of the geometric space.
    """

    class Meta:
        name = "CartesianTransformation2d"

    multiplication_matrix: Optional[
        "CartesianTransformation2D.MultiplicationMatrix"
    ] = field(
        default=None,
        metadata={
            "name": "MultiplicationMatrix",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    translation: Optional["CartesianTransformation2D.Translation"] = field(
        default=None,
        metadata={
            "name": "Translation",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class MultiplicationMatrix:
        direction: List[Direction] = field(
            default_factory=list,
            metadata={
                "name": "Direction",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
                "max_occurs": 2,
            },
        )

    @dataclass
    class Translation:
        cartesian_point: Optional[CartesianPoint] = field(
            default=None,
            metadata={
                "name": "CartesianPoint",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )


@dataclass
class CartesianTransformation3D(DetailedGeometricModelElement):
    """A CartesianTransformation3d is a specialization of
    DetailedGeometricModelElement that is a geometric transformation defined in a
    3D geometric space by a 3*3 matrix and a cartesian point.

    Let be: M, the 3*3 multiplication
    matrix of the cartesian transformation; A, the point of the cartesian transformation; P,
    a point in the geometric space; Q, the result of the application of the transformation
    to P. The coordinates of Q shall be obtained by the formula: Q = M*P + A

    :ivar multiplication_matrix: the array of three instances of
        Direction that defines the multiplication matrix of the
        transformation.
    :ivar translation: the CartesianPoint that defines the position of
        the result of the application of the transformation to the
        origin of the geometric space.
    """

    class Meta:
        name = "CartesianTransformation3d"

    multiplication_matrix: Optional[
        "CartesianTransformation3D.MultiplicationMatrix"
    ] = field(
        default=None,
        metadata={
            "name": "MultiplicationMatrix",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    translation: Optional["CartesianTransformation3D.Translation"] = field(
        default=None,
        metadata={
            "name": "Translation",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class MultiplicationMatrix:
        direction: List[Direction] = field(
            default_factory=list,
            metadata={
                "name": "Direction",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
                "max_occurs": 3,
            },
        )

    @dataclass
    class Translation:
        cartesian_point: Optional[CartesianPoint] = field(
            default=None,
            metadata={
                "name": "CartesianPoint",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )


@dataclass
class EffectivityAssignment(AssignmentObject):
    """
    An EffectivityAssignment is the association of an Effectivity with product or
    activity data.

    :ivar assigned_effectivity: the instance of the Effectivity entity
        that is assigned.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    """

    assigned_effectivity: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedEffectivity",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List["EffectivityAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List["ObservationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        "OrganizationOrPersonInOrganizationAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class MeasureQualification(BaseObject):
    """A MeasureQualification is a means to provide information about measurements
    in which there is an associated uncertainty.

    The uncertainty may be specified as precision, qualitative
    uncertainty, or expanded uncertainty, and the type of the related
    datum shall be included. The uncertainty is defined in clause 2 of
    "The Guide to the Expression of Uncertainty in Measurement".

    :ivar description: a set of text based descriptions of the
        MeasureQualification.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this MeasureQualification This
        MeasureQualification is a member of the referenced class.
    :ivar qualifiers: specifies the ValueQualifierSelect for the
        MeasureQualification. There shall be one or more
        ValueQualifierSelect for each qualifiers.
    :ivar document_assignment:
    :ivar observation_assignment:
    """

    description: Optional["MeasureQualification.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["MeasureQualification.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    qualifiers: Optional["MeasureQualification.Qualifiers"] = field(
        default=None,
        metadata={
            "name": "Qualifiers",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List["ObservationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Qualifiers:
        external_type_qualifier: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ExternalTypeQualifier",
                "type": "Element",
                "namespace": "",
            },
        )
        pre_defined_type_qualifier: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PreDefinedTypeQualifier",
                "type": "Element",
                "namespace": "",
            },
        )
        precision_qualifier: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PrecisionQualifier",
                "type": "Element",
                "namespace": "",
            },
        )
        uncertainty_qualifier: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "UncertaintyQualifier",
                "type": "Element",
                "namespace": "",
            },
        )
        qualitative_uncertainty: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "QualitativeUncertainty",
                "type": "Element",
                "namespace": "",
            },
        )
        standard_uncertainty: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "StandardUncertainty",
                "type": "Element",
                "namespace": "",
            },
        )
        expanded_uncertainty: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ExpandedUncertainty",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class NumericalContext(BaseRootObject):
    """A NumericalContext is a context in which a NumericalValue is recorded.

    The context may represent the organization, technique or system used
    to establish the NumericalValue.

    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this NumericalContext. This
        NumericalContext is a member of the referenced class.
    :ivar description: a set of text based descriptions of the
        NumericalContext.
    :ivar accuracy: the accuracy to which the NumericalValues in this
        context are measured.
    :ivar significant_digits: specifies the minimum number of decimal
        digits that ValueWithUnits in this NumericalContext are
        measured. If present, the numerical measure or range may be
        specified using more digits than the significant digits but
        shall not be specified using less digits. The value of this
        attribute need not be specified.
    """

    classified_as: Optional["NumericalContext.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["NumericalContext.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    accuracy: Optional[float] = field(
        default=None,
        metadata={
            "name": "Accuracy",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    significant_digits: Optional[int] = field(
        default=None,
        metadata={
            "name": "SignificantDigits",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class PartialDocumentAssignment(DocumentAssignment):
    """A PartialDocumentAssignment is a specialization of DocumentAssignment.

    A PartialDocumentAssignment identifies a specific portion of the
    contents of a document. It assigns this portion to the product data
    for which it is relevant.

    :ivar document_portion: the word or group of the words that convey
        the subject or sub contents of the Document.
    """

    document_portion: Optional["PartialDocumentAssignment.DocumentPortion"] = (
        field(
            default=None,
            metadata={
                "name": "DocumentPortion",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )
    )

    @dataclass
    class DocumentPortion:
        localized_string: List[LocalizedString] = field(
            default_factory=list,
            metadata={
                "name": "LocalizedString",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )


@dataclass
class AxisPlacement2D(AxisPlacement):
    """
    An AxisPlacement2d is a specialization of AxisPlacement.
    """

    class Meta:
        name = "AxisPlacement2d"


@dataclass
class AxisPlacement3D(AxisPlacement):
    """
    An AxisPlacement3d is a specialization of AxisPlacement.
    """

    class Meta:
        name = "AxisPlacement3d"


@dataclass
class GeometricPlacementOperation(DetailedGeometricModelElement):
    """A GeometricPlacementOperation is a specialization of
    DetailedGeometricModelElement.

    A GeometricPlacementOperation may be a GeometricPlacement or a
    GeometricOperatorTransformation.

    :ivar source: the AxisPlacement that identifies the source of the
        operation.
    :ivar template_definition: the value from GeometricModel.
    """

    source: Optional["GeometricPlacementOperation.Source"] = field(
        default=None,
        metadata={
            "name": "Source",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    template_definition: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "TemplateDefinition",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class Source:
        axis_placement: Optional[AxisPlacement] = field(
            default=None,
            metadata={
                "name": "AxisPlacement",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )


@dataclass
class InformationUsageRightAssignment(AssignmentObject):
    """An InformationUsageRightAssignment is an application of a particular usage
    right to a set of items.

    NOTE: If an approval is applied to this entity, it
    carries the meaning that the particular set of items is approved for the given usage.
    This approval generally indicates that the approval is exceptional, for example, where
    the information belongs to another project, and that project agrees to share some
    particular items of information. There is a further implication that the set of entities
    should not be changed once the approval is given.

    :ivar assigned_information_usage_right: the InformationUsageRight
        that is assigned to activity or product data.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar effectivity_assignment:
    :ivar information_usage_right_assignment:
    :ivar observation_assignment:
    """

    assigned_information_usage_right: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedInformationUsageRight",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        "InformationUsageRightAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List["ObservationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class JustificationAssignment(AssignmentObject):
    """A JustificationAssignment is the association between a Justification and the
    item for which the Justification is provided.

    The item can be an activity or a product design.

    :ivar assigned_justification: the Justification that is assigned to
        activity or product data.
    :ivar approval_assignment:
    :ivar condition_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    """

    assigned_justification: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedJustification",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List["ObservationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        "OrganizationOrPersonInOrganizationAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class RelationshipObject(BaseObject):
    """
    A RelationshipObject represents a dependency between sets of product or
    activity data.

    :ivar description: a set of text based descriptions of the
        RelationshipObject.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this RelationshipObject This
        RelationshipObject is a member of the referenced class.
    :ivar effectivity_assignment:
    """

    description: Optional["RelationshipObject.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["RelationshipObject.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ClassificationRelationship(RelationshipObject):
    """A ClassificationRelationship is a specialization of an RelationshipObject
    that is a relationship between two instances of Classification.

    NOTE:
    The meaning of the relationship is determined by classification which is identified by
    the RelationshipObject property. The possible classifications are subclasses of .

    :ivar related: the other instance of Classification that is part of
        the relationship. If one element of the relationship is
        dependent upon the other, this attribute shall be the dependent
        one.
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class GeometricOperatorTransformation(GeometricPlacementOperation):
    """
    A GeometricOperatorTransformation is a specialization of
    GeometricPlacementOperation.

    :ivar target: the CartesianTransformationSelect that identifies the
        target of the transformation.
    """

    target: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Target",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class GeometricPlacement(GeometricPlacementOperation):
    """
    A GeometricPlacement is a specialization of GeometricPlacementOperation.

    :ivar target: the AxisPlacement that identifies the target of the
        placement.
    """

    target: Optional["GeometricPlacement.Target"] = field(
        default=None,
        metadata={
            "name": "Target",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class Target:
        axis_placement: Optional[AxisPlacement] = field(
            default=None,
            metadata={
                "name": "AxisPlacement",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )


@dataclass
class LocationAssignment(AssignmentObject):
    """A LocationAssignment is a relationship between a product, event, or person
    and a location.

    There may be distinct assignment for each qualification. for example
    planned, scheduled or actual. Each assignment may have a start and
    end date or time. A location may have multiple assignments.

    :ivar assigned_location: the Location that is assigned to activity
        or product data.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    assigned_location: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedLocation",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List["ObservationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        "OrganizationOrPersonInOrganizationAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List["PropertyDefinitionAssignment"] = (
        field(
            default_factory=list,
            metadata={
                "name": "PropertyDefinitionAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    property_value_assignment: List["PropertyValueAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ObservationAssignment(AssignmentObject):
    """
    An ObservationAssignment is an association of an Observation with any item that
    an observation can be made about, or any item that can be used as part of the
    observation.

    :ivar assigned_observation: the Observation that applies to or is
        relevant to the assigned item.
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar security_classification_assignment:
    :ivar time_interval_assignment:
    :ivar work_request_assignment:
    """

    assigned_observation: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedObservation",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List["ObservationAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        "OrganizationOrPersonInOrganizationAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List["PropertyDefinitionAssignment"] = (
        field(
            default_factory=list,
            metadata={
                "name": "PropertyDefinitionAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    property_value_assignment: List["PropertyValueAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        "SecurityClassificationAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List["TimeIntervalAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ProxyRelationship(RelationshipObject):
    """A ProxyRelationship is a relationship between a pair of Proxys.

    NOTE:
    This relationship may be classified to provide more specific meanings.

    :ivar related: the other instance of Proxy that is part of the
        relationship. If one element of the relationship is dependent
        upon the other, this attribute shall be the dependent one.
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class ApprovalRelationship(RelationshipObject):
    """
    An ApprovalRelationship is a typed association between two instances of
    Approval.

    :ivar related: the other instance of Approval that is a part of the
        relationship. If one element of the relationship is dependent of
        the other, this attribute shall be the dependent one.
    :ivar document_assignment:
    :ivar observation_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class AxisPlacementMapping(BaseRootObject):
    """An AxisPlacementMapping is a geometric transformation defined by a source
    AxisPlacement and a target AxisPlacement that results from the transformation
    of the source one.

    Both instances of AxisPlacement shall have the same dimensionality. The
    transformation shall be computed as the isometric transformation that maps: the origin
    of the source onto the origin of the target; the AxisPlacement of the source onto the
    AxisPlacement of the target; the AxisPlacement of the source onto the AxisPlacement of
    the target. NOTE: By construction, the determinant of the transformation matrix equals
    one.

    :ivar source: the AxisPlacement that plays the role of source in the
        transformation.
    :ivar target: the AxisPlacement that plays the role of target in the
        transformation.
    :ivar observation_assignment:
    """

    source: Optional["AxisPlacementMapping.Source"] = field(
        default=None,
        metadata={
            "name": "Source",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    target: Optional["AxisPlacementMapping.Target"] = field(
        default=None,
        metadata={
            "name": "Target",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Source:
        axis_placement: Optional[AxisPlacement] = field(
            default=None,
            metadata={
                "name": "AxisPlacement",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )

    @dataclass
    class Target:
        axis_placement: Optional[AxisPlacement] = field(
            default=None,
            metadata={
                "name": "AxisPlacement",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )


@dataclass
class CollectionMembership(AssociationObject):
    """
    An CollectionMembership is an association of an CollectionViewDefinition with
    an instance that represents a member of the collection.

    :ivar member: an instance that represents a member of the
        collection.
    :ivar of_collection: the CollectionViewDefinition of which the
        instance is a member.
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    """

    member: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Member",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    of_collection: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "OfCollection",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ContextualShapeRepresentation(BaseRootObject):
    """
    A ContextualShapeRepresentation is a relationship that relates a
    ContextualItemShape and a GeometricModelRelationship.

    :ivar contextual_shape: specifies a role of the ContextualItemShape
        for the ContextualShapeRepresentation.
    :ivar representing_relationship: specifies a role of the
        GeometricModelRelationship for the
        ContextualShapeRepresentation.
    :ivar observation_assignment:
    """

    contextual_shape: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ContextualShape",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    representing_relationship: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "RepresentingRelationship",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EffectivityRelationship(RelationshipObject):
    """An EffectivityRelationship is an association between two instances of
    Effectivity.

    The meaning of the relationship is represented with the relationType
    attribute.

    :ivar related: the second instance of EffectivityRelationship that
        is a part of the relationship. NOTE: If one
        EffectivityRelationship in the relationship is dependent upon
        the other, this attribute shall be the dependent one.
    :ivar document_assignment:
    :ivar observation_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EnvelopeRelationship(RelationshipObject):
    """An EnvelopeRelationship is an association of one Envelope with another.

    NOTE: The most obvious use of the association is to link an Envelope to its
    acknowledgements.

    :ivar related: the other instance of the Envelope participating in
        the relationship. If one Envelope participating in the
        relationship is dependent upon the other, this attribute shall
        be the dependent one.
    :ivar observation_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ExperienceTypeRelationship(RelationshipObject):
    """An ExperienceTypeRelationship is used to relate a compound experience to its
    component experiences.

    Ten years programming experience made up of five years C++
    programming experience and five years Java programming experience.

    :ivar component_experience: the ExperienceType that the
        ExperienceTypeRelationship identifies as a component of another
        ExperienceType.
    :ivar observation_assignment:
    """

    component_experience: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ComponentExperience",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class GeometricItemSpecificUsage(BaseRootObject):
    """A GeometricItemSpecificUsage is an identification of a
    DetailedGeometricModelElement within a GeometricModel or an
    ExternalGeometricModel as being the element that describes a ShapeElement or
    ShapeElementRelationship of an ItemShape that is described by the
    GeometricModel or an ExternalGeometricModel. In an.

    application protocol, an instance of GeometricModel describes the ItemShape of a
    product. One element of the GeometricModel - a curve - represents the boundary of a hole
    that is a ShapeElement in the product. This entity data type may be used to state that
    the curve describes the hole, in the context of the entire GeometricModel describing the
    shape of the product.

    :ivar description: a set of text based descriptions of the
        GeometricItemSpecificUsage.
    :ivar definition: specifies the role of the ShapeElement that is
        being represented by the GeometricItemSpecificUsage for the
        GeometricItemSpecificUsage.
    :ivar identified_item: specifies the role of the
        DetailedGeometricModelElement for the
        GeometricItemSpecificUsage.
    :ivar used_model: specifies the role of the GeometricModel that
        includes the GeometricItemSpecificUsage in it's set of items.
        The usedModel describes the ItemShape for the
        GeometricItemSpecificUsage.
    :ivar document_assignment:
    :ivar observation_assignment:
    """

    description: Optional["GeometricItemSpecificUsage.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    definition: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Definition",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    identified_item: Optional["GeometricItemSpecificUsage.IdentifiedItem"] = (
        field(
            default=None,
            metadata={
                "name": "IdentifiedItem",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )
    )
    used_model: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "UsedModel",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class IdentifiedItem:
        detailed_geometric_model_element: Optional[
            DetailedGeometricModelElement
        ] = field(
            default=None,
            metadata={
                "name": "DetailedGeometricModelElement",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )


@dataclass
class InformationUsageRightRelationship(RelationshipObject):
    """An InformationUsageRightRelationship is the relationship of one
    InformationUsageRight to another.

    Where one InformationUsageRight supercedes another, then the
    original right is pointed to by the relating attribute, its
    replacement by the related attribute, and the relationType attribute
    takes the value "supercedes".

    :ivar related: the other instance of InformationUsageRight that is a
        part of the relationship. If one InformationUsageRight
        participating in the relationship is dependent upon the other,
        this attribute shall be the dependent one.
    :ivar observation_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class InterfaceConnectorDesignToPlanned(AssociationObject):
    """An InterfaceConnectorDesignToPlanned is a relationship between a design
    version of an InterfaceConnector and a planned individual that is to conform to
    the design.

    BuildAWidget Incorporated plans production of pump serial number
    30301 with an electrical supply connector that is to conform to
    design version 2.10.

    :ivar design: the version to which the planned individual will
        conform.
    :ivar planned: the individual that is to conform to the design
        version.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    """

    design: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Design",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    planned: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Planned",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class InterfaceConnectorDesignToRealized(AssociationObject):
    """An InterfaceConnectorDesignToRealized is a relationship between a design
    version of an InterfaceConnector and a realized individual that conforms to the
    design.

    BuildAWidget Incorporated builds pump serial number 30301 with an
    electrical supply connector that conforms to design version 2.11.

    :ivar design: the version to which the realized individual conforms.
    :ivar realized: the individual that conforms to the design.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    """

    design: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Design",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    realized: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Realized",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class InterfaceConnectorPlannedToRealized(AssociationObject):
    """An InterfaceConnectorPlannedToRealized is a relationship between a realized
    individual of an InterfaceConnector and a corresponding planned individual.

    BuildAWidget Incorporated builds pump serial number 30302 with an
    electrical supply connector that was previously planned.

    :ivar planned: the individual that relates to the realized
        individual.
    :ivar realized: the individual that relates to the planned
        individual.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    """

    planned: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Planned",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    realized: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Realized",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ItemDesignAssociation(AssociationObject):
    """An ItemDesignAssociation is the association of a ProductConfiguration with a
    ProductViewDefinition or a ProductVersion.

    It specifies the design that corresponds to the
    ProductConfiguration. If the design is a ProductViewDefinition, the
    ItemDesignAssociation represents the statement that, in the
    considered definition context, the product version, that is, the
    ProductViewDefinition is a valid way to implement the
    ProductConfiguration. NOTE: This association might not be valid in
    all definition contexts of the product version. If the design is a
    ProductVersion, the ItemDesignAssociation represents the statement
    that, in all definition contexts, the ProductVersion is a valid way
    to implement the ProductConfiguration. NOTE: The association might
    not be valid for other versions of the product.

    :ivar configuration: the ProductConfiguration for which a product
        solution is designated.
    :ivar design: the ProductVersion or the ProductViewDefinition that
        identifies a product which is a valid implementation for the
        ProductConfiguration.
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    """

    configuration: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Configuration",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    design: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Design",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class LocationRelationship(RelationshipObject):
    """A LocationRelationship is a relationship between two locations.

    Location B, which is in reference to location A or Location B (UK),
    which is a refinement of Location A (Europe).

    :ivar related: the other instance of Location that is a part of the
        relationship. If one element of the relationship is dependent
        upon the other then this attribute shall be the dependent one.
    :ivar document_assignment:
    :ivar observation_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class MessageRelationship(RelationshipObject):
    """A MessageRelationship is a link between two related messages.

    The meaning of the association depends on MessageRelationship.role.
    If Message=2 replaces Message=1, then MessageRelationship.related
    points to Message=2 and MessageRelationship.relating points to
    Message=1 with MessageRelationship.role="replaces".

    :ivar related: the other instance of Message participating in the
        relationship. If one Message participating in the relationship
        is dependent upon the other, this attribute shall be the
        dependent one.
    :ivar observation_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ObservationRelationship(RelationshipObject):
    """An ObservationRelationship is a relationship between two observations.

    The nature of this relationship is identified by the role. Where
    there is a structural relationship between Observation, the
    semantics of the structure are identified by the classification of
    the ObservationRelationship against reference-data. The Observation
    of a persistent fault is composed of a series of Observation of
    occurrences of the same fault. That is,
    ObservationRelationship.related points to the composite Observation,
    while ObservationRelationship.relating points to one actual
    Observation of the occurrence. The ObservationRelationship.role of
    the relationship is "observed instance", while it is classified as
    "is composed of". In this example, the component Observation will
    apply to ProductAsRealized and the consequence will be to rectify
    the individual faults, while the composite Observation will apply to
    a ProductVersion and the consequence will be a design change.

    :ivar related: the other instance of Observation that is a part of
        the relationship. If one element of the relationship is
        dependent upon the other then this attribute shall be the
        dependent one.
    :ivar analysis_assignment:
    :ivar observation_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class OrganizationOrPersonInOrganizationAssignment(AssignmentObject):
    """
    An OrganizationOrPersonInOrganizationAssignment is an association of an
    organization or a person in an organization with activity or product data.

    :ivar assigned_entity: the organization or person in organization
        that is to be associated with the activity or product data.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar position_group_assignment:
    :ivar position_assignment:
    :ivar position_type_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    assigned_entity: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedEntity",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        "OrganizationOrPersonInOrganizationAssignment"
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    position_group_assignment: List["PositionGroupAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "PositionGroupAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    position_assignment: List["PositionAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "PositionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    position_type_assignment: List["PositionTypeAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "PositionTypeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List["PropertyDefinitionAssignment"] = (
        field(
            default_factory=list,
            metadata={
                "name": "PropertyDefinitionAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    property_value_assignment: List["PropertyValueAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class OrganizationOrganizationTypeRelationship(RelationshipObject):
    """
    An OrganizationOrganizationTypeRelationship is a relationship between an
    Organization organization and an OrganizationType.

    :ivar organization_type: the OrganizationType.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar observation_assignment:
    """

    organization_type: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "OrganizationType",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PositionGroupRelationship(RelationshipObject):
    """
    A PositionGroupRelationship is a relationship that specifies the participation
    of a position in a group.

    :ivar position: the job or function that belongs to the group.
    :ivar observation_assignment:
    """

    position: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Position",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PositionRelationship(RelationshipObject):
    """A PositionRelationship is a specialization of an RelationshipObject that is
    a relationship between two instances of Position.

    Examples of relationships
    between Positions are: Superior / Subordinate Superceded by NOTE: The meaning of the
    relationship is determined by classification which is identified by the
    RelationshipObject property. The possible classifications are subclasses of .

    :ivar related: the other instance of Position that participates in
        the relationship. If one element of the relationship is
        dependent upon the other, this attribute shall be the dependent
        one.
    :ivar document_assignment:
    :ivar observation_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ProductDesignViewToIndividual(AssociationObject):
    """A ProductDesignViewToIndividual is a relationship between a product design,
    represented by ProductViewDefinition.

    or ProductConfiguration, and a view of the product that is planned
    to be made or has been made ( ProductAsIndividualView) from the
    design.

    :ivar product_as_individual_view: the product as individual view
        represented by a ProductAsIndividualView entity.
    :ivar product_view_definition: the product design, that is a
        generalization of a ProductViewDefinition or a
        ProductConfiguration.
    :ivar observation_assignment:
    """

    product_as_individual_view: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ProductAsIndividualView",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    product_view_definition: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ProductViewDefinition",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ProductPlannedToRealized(AssociationObject):
    """
    A ProductPlannedToRealized is a relationship that establishes that a revision
    of a planned artefact represented by ProductAsPlanned has been realized as a
    revision of an actual artefact ProductAsRealized.

    :ivar planned_product: the planned product represented by a
        ProductAsPlanned entity.
    :ivar realized_product: the realized product represented by a
        ProductAsRealized entity.
    :ivar analysis_assignment:
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    """

    planned_product: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "PlannedProduct",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    realized_product: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "RealizedProduct",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class QualificationTypeRelationship(RelationshipObject):
    """A QualificationTypeRelationship is an association between two
    QualificationTypes.

    Qualification X is a prerequisite for qualification Y. Qualification
    X is equivalent to qualification Y.

    :ivar related: the other instance QualificationTypes participating
        in the relationship. If one element of the relationship is
        dependent upon the other, this attribute shall be the dependent
        one.
    :ivar document_assignment:
    :ivar observation_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ShapeDescriptionAssociation(BaseRootObject):
    """
    A ShapeDescriptionAssociation is an association of a geometric representation
    with a shape characteristic.

    :ivar description: a set of text based descriptions of the
        ShapeDescriptionAssociation.
    :ivar represented_characteristic: the instance of an element of
        ShapeSelect that is represented. In case the
        representedCharacteristic is a ShapeElementRelationship, the
        represented characteristic is the related ShapeElement in the
        context of its relating ShapeElement.
    :ivar representation: the GeometricModel that provides the
        representation.
    :ivar document_assignment:
    :ivar observation_assignment:
    """

    description: Optional["ShapeDescriptionAssociation.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    represented_characteristic: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "RepresentedCharacteristic",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    representation: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Representation",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class TimeIntervalAssignment(AssignmentObject):
    """
    A TimeIntervalAssignment is an association of a TimeInterval with product data.

    :ivar assigned_time_interval: the instance of the TimeInterval
        entity data type that is associated with product data.
    :ivar observation_assignment:
    """

    assigned_time_interval: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedTimeInterval",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TimeIntervalRelationship(RelationshipObject):
    """A TimeIntervalRelationship is the association of two instances of
    TimeInterval.

    The meaning of this association is specified in the
    TimeIntervalRelationship attribute.

    :ivar related: the other instance of TimeInterval. If one element of
        the relationship is dependent upon the other, this attribute
        shall be the dependent one.
    :ivar document_assignment:
    :ivar observation_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ValueFunction(BaseRootObject):
    """
    A ValueFunction is a numerically defined function that describes the
    distribution function.
    """

    function_element: Optional["ValueFunction.FunctionElement"] = field(
        default=None,
        metadata={
            "name": "FunctionElement",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class FunctionElement:
        function_value_pair: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "FunctionValuePair",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )


@dataclass
class AddressAssignment(AssignmentObject):
    """An AddressAssignment is a specialization of an AssignmentObject that
    represents the association of an Organization or a PersonInOrganization with an
    Address.

    NOTE: The meaning of the assignment is determined by classification which is identified
    by the AssignmentObject property. The possible classifications are subclasses of .

    :ivar assigned_address: the Address that is provided.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar time_interval_assignment:
    """

    assigned_address: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedAddress",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class AssumptionAssignment(AssignmentObject):
    """An AssumptionAssignment is an association between an Assumption and the
    context in which the assumption is made.

    The following set of assumptions are relevant to the project.

    :ivar assigned_assumption: the Assumption that is assigned to
        activity or product data.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar time_interval_assignment:
    """

    assigned_assumption: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedAssumption",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ChainBasedGeometricItemSpecificUsage(GeometricItemSpecificUsage):
    """
    A ChainBasedGeometricItemSpecificUsage is a specialization of
    GeometricItemSpecificUsage that represents a chain of GeometricModels in a
    graph of GeometricModels, where the undirected links in the graph can be
    GeometricCoordinateSpaces, GeometricModelRelationships, or
    GeometricPlacementOperations.

    :ivar nodes:
    :ivar undirected_link: the list of items that relate nodes in the
        chain.
    """

    nodes: Optional["ChainBasedGeometricItemSpecificUsage.Nodes"] = field(
        default=None,
        metadata={
            "name": "Nodes",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    undirected_link: Optional[
        "ChainBasedGeometricItemSpecificUsage.UndirectedLink"
    ] = field(
        default=None,
        metadata={
            "name": "UndirectedLink",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class Nodes:
        geometric_model: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "GeometricModel",
                "type": "Element",
                "namespace": "",
                "min_occurs": 2,
            },
        )

    @dataclass
    class UndirectedLink:
        geometric_coordinate_space: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "GeometricCoordinateSpace",
                "type": "Element",
                "namespace": "",
            },
        )
        geometric_model_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "GeometricModelRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        geometric_model_relationship_with_transformation: List[Reference] = (
            field(
                default_factory=list,
                metadata={
                    "name": "GeometricModelRelationshipWithTransformation",
                    "type": "Element",
                    "namespace": "",
                },
            )
        )
        geometric_relationship_with_operator_transformation: List[
            Reference
        ] = field(
            default_factory=list,
            metadata={
                "name": "GeometricRelationshipWithOperatorTransformation",
                "type": "Element",
                "namespace": "",
            },
        )
        geometric_composition_with_operator_transformation: List[Reference] = (
            field(
                default_factory=list,
                metadata={
                    "name": "GeometricCompositionWithOperatorTransformation",
                    "type": "Element",
                    "namespace": "",
                },
            )
        )
        geometric_relationship_with_placement_transformation: List[
            Reference
        ] = field(
            default_factory=list,
            metadata={
                "name": "GeometricRelationshipWithPlacementTransformation",
                "type": "Element",
                "namespace": "",
            },
        )
        geometric_composition_with_placement_transformation: List[
            Reference
        ] = field(
            default_factory=list,
            metadata={
                "name": "GeometricCompositionWithPlacementTransformation",
                "type": "Element",
                "namespace": "",
            },
        )
        geometric_placement_operation: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "GeometricPlacementOperation",
                "type": "Element",
                "namespace": "",
            },
        )
        geometric_operator_transformation: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "GeometricOperatorTransformation",
                "type": "Element",
                "namespace": "",
            },
        )
        geometric_placement: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "GeometricPlacement",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class JustificationSupportAssignment(AssignmentObject):
    """
    A JustificationSupportAssignment is the association between a Justification and
    the item providing evidential support for the Justification The support item
    can be the results from an analysis, a report, or professional judgment.

    :ivar assigned_support_item: the item which provides evidential
        support for a Justification.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    """

    assigned_support_item: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedSupportItem",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ProjectAssignment(AssignmentObject):
    """
    A ProjectAssignment is a mechanism to associate a Project with activity or
    product data.

    :ivar assigned_project: the Project that is associated.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    assigned_project: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedProject",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List["PropertyDefinitionAssignment"] = (
        field(
            default_factory=list,
            metadata={
                "name": "PropertyDefinitionAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    property_value_assignment: List["PropertyValueAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PropertyDefinitionAssignment(AssignmentObject):
    """A PropertyDefinitionAssignment is a specialization of an AssignmentObject
    that represents the assignment of a ExternalPropertyDefinition to product or
    activity data.

    NOTE: The meaning of the assignment is determined by
    classification which is identified by the AssignmentObject property. The possible
    classifications are subclasses of .

    :ivar assigned_property_definition: the ExternalPropertyDefinition
        that is assigned.
    :ivar allowed_units:
    :ivar analysis_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar scheme_entry_assignment:
    :ivar scheme_subject_assignment:
    :ivar scheme_version_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    """

    assigned_property_definition: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedPropertyDefinition",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    allowed_units: Optional["PropertyDefinitionAssignment.AllowedUnits"] = (
        field(
            default=None,
            metadata={
                "name": "AllowedUnits",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_entry_assignment: List["SchemeEntryAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "SchemeEntryAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_subject_assignment: List["SchemeSubjectAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "SchemeSubjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_version_assignment: List["SchemeVersionAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "SchemeVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List["TaskElementAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List["TaskMethodAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List["TaskMethodVersionAssignment"] = (
        field(
            default_factory=list,
            metadata={
                "name": "TaskMethodVersionAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )

    @dataclass
    class AllowedUnits:
        external_unit: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ExternalUnit",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class SecurityClassificationAssignment(AssignmentObject):
    """
    A SecurityClassificationAssignment is an association of a
    SecurityClassification with activity or product data.

    :ivar assigned_security_classification: the SecurityClassification
        assigned to activity or product data.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar information_usage_right_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    """

    assigned_security_classification: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedSecurityClassification",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class SelectedItemAssignment(AssignmentObject):
    """
    A SelectedItemAssignment is the identification of the product or activity data
    referenced by SelectedItemAssignment as being a member of a class identified by
    ClassSelect.

    :ivar assigned_selected_item: the class to which the product or
        activity data referenced by SelectedItemAssignment belongs.
    :ivar item_context: the context in which the product or activity
        data is being identified as being a ClassSelect. The engine is a
        identified as a selected item on the car.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    """

    assigned_selected_item: Optional[
        "SelectedItemAssignment.AssignedSelectedItem"
    ] = field(
        default=None,
        metadata={
            "name": "AssignedSelectedItem",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    item_context: Optional["SelectedItemAssignment.ItemContext"] = field(
        default=None,
        metadata={
            "name": "ItemContext",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class AssignedSelectedItem:
        classification: Optional[Classification] = field(
            default=None,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )

    @dataclass
    class ItemContext:
        breakdown: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Breakdown",
                "type": "Element",
                "namespace": "",
            },
        )
        functional_breakdown: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "FunctionalBreakdown",
                "type": "Element",
                "namespace": "",
            },
        )
        physical_breakdown: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PhysicalBreakdown",
                "type": "Element",
                "namespace": "",
            },
        )
        system_breakdown: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemBreakdown",
                "type": "Element",
                "namespace": "",
            },
        )
        zone_breakdown: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ZoneBreakdown",
                "type": "Element",
                "namespace": "",
            },
        )
        contract: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Contract",
                "type": "Element",
                "namespace": "",
            },
        )
        part: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Part",
                "type": "Element",
                "namespace": "",
            },
        )
        part_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PartVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        product_as_individual: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductAsIndividual",
                "type": "Element",
                "namespace": "",
            },
        )
        product_as_individual_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductAsIndividualVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        product_as_planned: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductAsPlanned",
                "type": "Element",
                "namespace": "",
            },
        )
        product_as_realized: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductAsRealized",
                "type": "Element",
                "namespace": "",
            },
        )
        product_concept: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductConcept",
                "type": "Element",
                "namespace": "",
            },
        )
        product_configuration: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductConfiguration",
                "type": "Element",
                "namespace": "",
            },
        )
        project: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Project",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ShapePlacementAssociation(ShapeDescriptionAssociation):
    """
    A ShapePlacementAssociation is a specialization of ShapeDescriptionAssociation.
    """


@dataclass
class ViewDefinitionContext(BaseRootObject):
    """An ViewDefinitionContext is the grouping of an application domain and a life
    cycle stage.

    It identifies a universe of discourse suitable for the description
    of products. NOTE: Requirements and vocabularies vary among the
    industrial activity fields. This entity intends to identify such a
    domain.

    :ivar application_domain: the text that identifies the application
        context that bounds the universe of discourse. 'assembly study',
        'digital mock-up', 'electrical design', 'mechanical design',
        'preliminary design', 'process planning' are examples of
        application domains If applicationDomain is an empty string, the
        ViewDefinitionContext shall be considered as not specific of any
        application domain.
    :ivar description: a set of text based descriptions of the
        ViewDefinitionContext.
    :ivar life_cycle_stage: the text that identifies a stage in the life
        cycle of a product. 'design phase', 'production', 'recycling
        phase' are examples of life cycle stages. If lifeCycleStage is
        an empty string, the ViewDefinitionContext shall be considered
        as not specific of any life cycle stage.
    :ivar analysis_assignment:
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    """

    application_domain: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ApplicationDomain",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    description: Optional["ViewDefinitionContext.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    life_cycle_stage: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "LifeCycleStage",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class DescriptorRelationship(RelationshipObject):
    """
    A DescriptorRelationship is a relationship between a pair of Descriptors.

    :ivar related: the other instance of Descriptor that is part of the
        relationship. If one element of the relationship is dependent
        upon the other, this attribute shall be the dependent one.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar information_usage_right_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar security_classification_assignment:
    :ivar time_interval_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class IdentifierRelationship(RelationshipObject):
    """A IdentifierRelationship is a relationship between a pair of Identifiers.

    NOTE: The meaning of the relationship is determined by classification which
    is identified by the RelationshipObject property. The possible classifications are
    subclasses of . ISO is an acronym for "International Standard Organization". When ISO
    and "International Standard Organization" are used as identifiers for the ISO
    organization, they may be related to indicate that ISO is the acronym for "International
    Standard Organization".

    :ivar related: the other instance of Identifier that is part of the
        relationship. If one element of the relationship is dependent
        upon the other, this attribute shall be the dependent one.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar information_usage_right_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar security_classification_assignment:
    :ivar time_interval_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class InterfaceDefinitionFor(AssociationObject):
    """An InterfaceDefinitionFor is a relationship between an
    InterfaceSpecification and an item that conforms to the specification.

    The infrared transmitter in a television remote control conforms to
    the specification that has the identifier 2345/XYZ/001. An instance
    of the InterfaceDefinitionFor entity data type is necessary to
    identify this relationship.

    :ivar interface: the specification that defines necessary attributes
        for the item that participates in the interface.
    :ivar interface_component: the item that conforms to the interface
        specification.
    :ivar analysis_assignment:
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar information_usage_right_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar security_classification_assignment:
    """

    interface: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Interface",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    interface_component: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "InterfaceComponent",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ObservedEnvironmentToDefinition(AssociationObject):
    """An ObservedEnvironmentToDefinition is a relationship between a record of a
    set of observations about an environment, represented by an
    ObservedEnvironment, and a typical environment, represented by an
    EnvironmentDefinition.

    The typical environment is the expected environment about which
    observations have been made.

    :ivar defined_environment: the typical environment about which the
        recorded observations have been made.
    :ivar observed_environment: the record of observations about an
        environment.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar security_classification_assignment:
    :ivar time_interval_assignment:
    :ivar work_request_assignment:
    """

    defined_environment: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "DefinedEnvironment",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    observed_environment: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ObservedEnvironment",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ObservedEnvironmentToDefinitionVersion(AssociationObject):
    """An ObservedEnvironmentToDefinitionVersion is a relationship between a
    version of the record of a set of observations about an environment,
    represented by an ObservedEnvironmentVersion, and a version of the typical
    environment, represented by EnvironmentDefinitionVersion.

    The typical environment is the expected environment about which
    observations have been made.

    :ivar defined_environment_version: the version of the typical
        environment about which the recorded observations have been
        made.
    :ivar observed_environment_version: the version of the record of
        observations about an environment.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar security_classification_assignment:
    :ivar time_interval_assignment:
    :ivar work_request_assignment:
    """

    defined_environment_version: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "DefinedEnvironmentVersion",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    observed_environment_version: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ObservedEnvironmentVersion",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ObservedEnvironmentToDefinitionView(AssociationObject):
    """An ObservedEnvironmentToDefinitionView is a relationship between a view of
    the record of a set of observations about an environment, represented by an
    ObservedEnvironmentView, and a view of the typical environment, represented by
    EnvironmentDefinitionView.

    The typical environment is the expected environment about which
    observations have been made.

    :ivar defined_environment_view: the view of the typical environment
        about which the recorded observations have been made.
    :ivar observed_environment_view: the view of the record of
        observations about an environment.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar security_classification_assignment:
    :ivar time_interval_assignment:
    :ivar work_request_assignment:
    """

    defined_environment_view: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "DefinedEnvironmentView",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    observed_environment_view: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ObservedEnvironmentView",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ProductDesignToIndividual(AssociationObject):
    """
    A ProductDesignToIndividual is a relationship between a product design,
    represented by Product, and the product that is planned to be made or has been
    made from the design, represented by ProductAsIndividual.

    :ivar product_design: the design of the product that is being made.
    :ivar individual_product: the product that has been or is planned to
        be made from this design.
    :ivar analysis_assignment:
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    :ivar security_classification_assignment:
    """

    product_design: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ProductDesign",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    individual_product: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "IndividualProduct",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ProductDesignVersionToIndividual(AssociationObject):
    """
    A ProductDesignVersionToIndividual is a relationship between a version of a
    product design, represented by ProductVersion or ProductConfiguration, and the
    product that is planned to be made ( ProductAsPlanned) or has been made (
    ProductAsRealized) from the design.

    :ivar product_design_version: the version of the product design that
        is being made.
    :ivar individual_product: the product that has been or is planned to
        be made from this version of the design.
    :ivar analysis_assignment:
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    :ivar security_classification_assignment:
    """

    product_design_version: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ProductDesignVersion",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    individual_product: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "IndividualProduct",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PropertyValue(BaseObject):
    """A PropertyValue acts as a proxy for a notional property value which may have
    several representations.

    NOTE: The actual magnitude and descriptions of a
    PropertyValue (e.g. 1 kilogramme or 2.2 pounds) are only provided as part of one or more
    representations of a PropertyValue. The PropertyValue itself cannot have a magnitude, or
    even a name, that is independent of the type of representation chosen for the value in
    question.

    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this PropertyValue This
        PropertyValue is a member of the referenced class.
    :ivar definition: the ExternalPropertyDefinition that defines the
        property for which the PropertyValue is a value.
    :ivar qualifications: the MeasureQualification that is that provides
        information about the uncertainty associated with the measured
        PropertyValue.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar project_assignment:
    :ivar property_value_relationship:
    """

    classified_as: Optional["PropertyValue.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    definition: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Definition",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    qualifications: Optional["PropertyValue.Qualifications"] = field(
        default=None,
        metadata={
            "name": "Qualifications",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    project_assignment: List[ProjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ProjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_relationship: List["PropertyValueRelationship"] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Qualifications:
        measure_qualification: List[MeasureQualification] = field(
            default_factory=list,
            metadata={
                "name": "MeasureQualification",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class Proxy(BaseObject):
    """
    A Proxy is a relationship between a subject and something for which the subject
    is a proxy.
    """

    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    proxy_relationship: List[ProxyRelationship] = field(
        default_factory=list,
        metadata={
            "name": "ProxyRelationship",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "sameAsRef",
            "type": "Attribute",
        },
    )


@dataclass
class AnalysisRepresentationContext(BaseRootObject):
    """
    An AnalysisRepresentationContext defines the context for the items
    (AnalysisModelItemsSelect) used in an AnalysisModel.

    :ivar description: a set of text based descriptions of the
        AnalysisRepresentationContext.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this Product This Product is a
        member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    """

    description: Optional["AnalysisRepresentationContext.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["AnalysisRepresentationContext.ClassifiedAs"] = (
        field(
            default=None,
            metadata={
                "name": "ClassifiedAs",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    same_as: Optional["AnalysisRepresentationContext.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class BreakdownContext(BaseRootObject):
    """
    A BreakdownContext is a membership relationship between a BreakdownElement and
    a Breakdown of which the element is a member.

    :ivar description: a set of text based descriptions of the
        BreakdownContext.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this BreakdownContext This
        BreakdownContext is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar breakdown: the version of the Breakdown of which the
        BreakdownElement is a member.
    :ivar breakdown_element: the view of the version of the
        BreakdownElement that is a member of the Breakdown.
    :ivar document_assignment:
    :ivar observation_assignment:
    """

    description: Optional["BreakdownContext.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["BreakdownContext.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["BreakdownContext.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    breakdown: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Breakdown",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    breakdown_element: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "BreakdownElement",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class BreakdownOf(BaseObject):
    """
    A BreakdownOf is a relationship between a Breakdown and a Product of which the
    breakdown is a view.

    :ivar description: a set of text based descriptions of the
        BreakdownOf.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this BreakdownOf This BreakdownOf
        is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar of_view: the ProductViewDefinition of which the breakdown is a
        view.
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    """

    description: Optional["BreakdownOf.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["BreakdownOf.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["BreakdownOf.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    of_view: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "OfView",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ConditionEvaluationParameter(BaseObject):
    """A ConditionEvaluationParameter is an identification of the product or
    activity data used in the evaluation of the Condition identified by the
    ConditionEvaluation.

    The measured value of oil pressure from gauge 3 on car with VIN
    12345678 (value = 1.9 bar). NOTE: The product or activity data is
    defined in ConditionEvaluationParameterSelect.

    :ivar description: a set of text based descriptions of the
        ConditionEvaluationParameter. a set of text based descriptions
        of the ConditionParameter.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this ConditionEvaluationParameter
        This ConditionEvaluationParameter is a member of the referenced
        class.a reference to a class held externally to the exchange
        file that classifies this ConditionParameter This
        ConditionParameter is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar evaluation_parameter: the product or activity data which acted
        as a parameter to the ConditionEvaluation.
    :ivar document_assignment:
    :ivar observation_assignment:
    """

    description: Optional["ConditionEvaluationParameter.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["ConditionEvaluationParameter.ClassifiedAs"] = (
        field(
            default=None,
            metadata={
                "name": "ClassifiedAs",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    same_as: Optional["ConditionEvaluationParameter.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    evaluation_parameter: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "EvaluationParameter",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ConditionParameter(BaseObject):
    """A ConditionParameter is a representation of the product or activity data
    that is used to specify a Condition.

    Oil pressure on gauge 3. NOTE: The product or activity data is
    defined in ConditionParameterSelect.

    :ivar description: a set of text based descriptions of the
        ConditionParameter.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this ConditionParameter This
        ConditionParameter is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar parameter: the product or activity data which acts as a
        parameter to the condition. The value of this attribute need not
        be specified.
    :ivar document_assignment:
    :ivar observation_assignment:
    """

    description: Optional["ConditionParameter.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["ConditionParameter.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["ConditionParameter.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    parameter: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Parameter",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ExternalTypeQualifier(BaseRootObject):
    """
    An ExternalTypeQualifier is a reference to the specification of the type of a
    datum that is defined externally to the exchange file.

    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which the
        ExternalTypeQualifier is a proxy.
    """

    same_as: Optional["ExternalTypeQualifier.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class SameAs:
        proxy: Optional[Proxy] = field(
            default=None,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ExternalUnit(BaseRootObject):
    """
    An ExternalUnit is a unit quantity.

    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this ExternalUnit This
        ExternalUnit is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar definition: a reference to an ExternalOwlClass or an
        ExternalItem held externally to the exchange file that provides
        the definition of the ExternalUnit.
    :ivar observation_assignment:
    """

    classified_as: Optional["ExternalUnit.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["ExternalUnit.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    definition: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Definition",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class Identifier(BaseObject):
    """
    An Identifier provides the identifying name or code for the activity or product
    data.

    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this Identifier This Identifier is
        a member of the referenced class.
    :ivar approval_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar information_usage_right_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar security_classification_assignment:
    :ivar time_interval_assignment:
    :ivar identifier_relationship:
    :ivar id:
    :ivar id_context_ref:
    :ivar id_role_ref:
    """

    classified_as: Optional["Identifier.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    identifier_relationship: List[IdentifierRelationship] = field(
        default_factory=list,
        metadata={
            "name": "IdentifierRelationship",
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        },
    )
    id_context_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "idContextRef",
            "type": "Attribute",
        },
    )
    id_role_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "idRoleRef",
            "type": "Attribute",
            "required": True,
        },
    )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ItemAssumed(BaseRootObject):
    """An ItemAssumed is an association between an Assumption and the item that is
    being assumed.

    A facility is assumed to exist at a given location. The facility
    shall be represented by a ResourceItemAssignment, the location by a
    Location, and the existence of the facility at the location, by a
    LocationAssignment assigning a location to the resource.

    :ivar description: a set of text based descriptions of the
        ItemAssumed.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this ItemAssumed This ItemAssumed
        is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar assumption: the Assumption.
    :ivar item: the item that is assumed to be true.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar time_interval_assignment:
    """

    description: Optional["ItemAssumed.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["ItemAssumed.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["ItemAssumed.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    assumption: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Assumption",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    item: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Item",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ItemUsageEffectivity(BaseRootObject):
    """An ItemUsageEffectivity is an effectivity domain that constrains the use of
    a product with or within another product, in the context of a
    ProductConfiguration.

    The effectivityDomain attribute identifies a domain of effectivity.
    The itemUsageRelationship attribute identifies a relationship which
    characterizes the use of the product with or within another product.
    This relationship may be an assembly-component relationship or a
    make-from relationship. The resolvedConfiguration attribute
    identifies an association between a ProductConfiguration and a
    product that implements it. This attribute establishes the context
    in which the itemUsageRelationship is considered and constrained.
    When the effectivity domain is a range of serial numbers, the serial
    numbers considered are those of the ProductConfiguration. When the
    effectivity domain is defined using a production lot number, the
    production lot considered is one of the ProductConfiguration. When
    the effectivity domain is an interval of time, the interval of time
    considered is related to the production of the ProductConfiguration.
    NOTE: When no effectivity constraint is applied to a
    ViewDefinitionUsage, the validity or applicability status of this
    ViewDefinitionUsage is unknown.

    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this ItemUsageEffectivity This
        ItemUsageEffectivity is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar effectivity_domain: the Effectivity that defines the domain of
        effectivity.
    :ivar item_usage_relationship: the ViewDefinitionUsage whose
        applicability is constrained.
    :ivar resolved_configuration: the ItemDesignAssociation that
        identifies the context where the itemUsageRelationship is
        considered.
    :ivar observation_assignment:
    """

    classified_as: Optional["ItemUsageEffectivity.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["ItemUsageEffectivity.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_domain: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "EffectivityDomain",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    item_usage_relationship: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ItemUsageRelationship",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    resolved_configuration: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ResolvedConfiguration",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class PrecisionQualifier(BaseRootObject):
    """A PrecisionQualifier is a specification of the number of significant digits
    in the representation of a value.

    PrecisionQualifier shall be interpreted in accordance with
    PrecisionQualifier in part 45 of this standard. NOTE: The precision
    is defined in clause 2 of "The Guide to the Expression of
    Uncertainty in Measurement".

    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar significant_digits: specifies the number of significant digits
        of the value.
    :ivar observation_assignment:
    """

    same_as: Optional["PrecisionQualifier.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    significant_digits: Optional[int] = field(
        default=None,
        metadata={
            "name": "SignificantDigits",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class SameAs:
        proxy: Optional[Proxy] = field(
            default=None,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class Probability(PropertyValue):
    """
    A Probability is a specialization of PropertyValue that is a probability value
    (see definition 3.5.1 above).
    """


@dataclass
class ProbabilityGenerator(PropertyValue):
    """A ProbabilityGenerator is a specialization of PropertyValue.

    It is a source from the ProbabilityDerived is derived. The
    ProbabilityDerivationParameters are applied to the
    ProbabilityGenerator to get the particular derived value. NOTE: A
    ProbabilityGenerator will generally be either a
    ProbabilityDistribution or a function of some statistics. A
    probability of "0.67" is derived from a Normal (or Gaussian)
    distribution using the parameter "plus or minus '1.0' standard
    deviations from the mean"
    """


@dataclass
class ProbabilityNamedValue(BaseRootObject):
    """A ProbabilityNamedValue is used to hold the name of the probability value.

    NOTE: The value attribute is the description inherited from the parent
    generalization. In general, this value will be one of an enumeration of possible values
    defined through reference-data.

    :ivar description: a text based descriptions of the Product.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this ProbabilityNamedValue This
        ProbabilityNamedValue is a member of the referenced class.
    :ivar named_values: the name of the probability value.
    """

    description: Optional["ProbabilityNamedValue.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["ProbabilityNamedValue.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    named_values: Optional["ProbabilityNamedValue.NamedValues"] = field(
        default=None,
        metadata={
            "name": "NamedValues",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class NamedValues:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class PropertyValueAssignment(AssignmentObject):
    """
    A PropertyValueAssignment assigns a PropertyValue (or collection of equivalent
    PropertyValues) to activity or product data.

    :ivar assigned_property_values: the PropertyValue, or collection of
        equivalent PropertyValues, assigned to activity or product data.
        NOTE: This allows multiple representations of the same
        conceptual property value to be assigned, each property value
        should have the same property definition. A collection of mass
        properties such as "1Kg" and "2.2lb" could be assigned
        representing the same conceptual mass in different units.
    :ivar value_assignment_context: the PropertyDefinitionAssignment
        that provides the context in which the PropertyValue has been
        assigned.
    :ivar analysis_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar scheme_entry_assignment:
    :ivar scheme_subject_assignment:
    :ivar scheme_version_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    """

    assigned_property_values: Optional[
        "PropertyValueAssignment.AssignedPropertyValues"
    ] = field(
        default=None,
        metadata={
            "name": "AssignedPropertyValues",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    value_assignment_context: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ValueAssignmentContext",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_entry_assignment: List["SchemeEntryAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "SchemeEntryAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_subject_assignment: List["SchemeSubjectAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "SchemeSubjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_version_assignment: List["SchemeVersionAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "SchemeVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List["TaskElementAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List["TaskMethodAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List["TaskMethodVersionAssignment"] = (
        field(
            default_factory=list,
            metadata={
                "name": "TaskMethodVersionAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )

    @dataclass
    class AssignedPropertyValues:
        property_value: List[PropertyValue] = field(
            default_factory=list,
            metadata={
                "name": "PropertyValue",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )


@dataclass
class ShapeDependentPropertyRepresentation(BaseRootObject):
    """A ShapeDependentPropertyRepresentation is the representation of a
    characteristic derived from or imposed to an ItemShape or a ShapeElement.

    The centre of mass is an example of shape dependent property, of a
    shape, that can be represented by a cartesian point. The area and
    the volumes are examples of characteristic that can be represented
    by a measure value with unit. NOTE: A
    ShapeDependentPropertyRepresentation is independent of the
    representations of the shape.

    :ivar description: a set of text based descriptions of the
        ShapeDependentPropertyRepresentation.
    :ivar characteristic_type: the string that specifies the type of the
        characteristic that is represented. Where applicable, the
        following values shall be used: 'centre of mass': the
        characteristic is the centre of the mass of the
        describedElement, evaluated or required independently of any
        representation of the describedElement; 'centroid': the
        characteristic is the centre of mass of a body as evaluated from
        a geometric representation of the describedElement; NOTE: An
        instance of GeometricModelRelationship may be used to relate the
        characteristicType with the GeometricModel from which the
        centroid was computed. 'moment of inertia': the characteristic
        is the 3*3 matrix of inertia of the describedElement; 'surface
        area': the characteristic is the extent of the surface of the
        describedElement; 'volume': the characteristic is the volume of
        the describedElement.
    :ivar described_element: the ItemShape or the ShapeElement from
        which the characteristic has been derived or imposed.
    :ivar property_representation: the PropertyValue that contains the
        items that express the characteristic. NOTE: Depending on the
        characteristicType, the describedElement may need to be a
        GeometricModel.
    :ivar document_assignment:
    :ivar observation_assignment:
    """

    description: Optional[
        "ShapeDependentPropertyRepresentation.Description"
    ] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    characteristic_type: Optional[
        "ShapeDependentPropertyRepresentation.CharacteristicType"
    ] = field(
        default=None,
        metadata={
            "name": "CharacteristicType",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    described_element: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "DescribedElement",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    property_representation: Optional[
        "ShapeDependentPropertyRepresentation.PropertyRepresentation"
    ] = field(
        default=None,
        metadata={
            "name": "PropertyRepresentation",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class CharacteristicType:
        localized_string: List[LocalizedString] = field(
            default_factory=list,
            metadata={
                "name": "LocalizedString",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )

    @dataclass
    class PropertyRepresentation:
        property_value: Optional[PropertyValue] = field(
            default=None,
            metadata={
                "name": "PropertyValue",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )


@dataclass
class StringValue(PropertyValue):
    """
    A StringValue is a specialization of PropertyValue that represents a sequence
    of one or more alphanumeric characters.

    :ivar value_component: specifies the string represented by the
        StringValue.
    """

    value_component: Optional["StringValue.ValueComponent"] = field(
        default=None,
        metadata={
            "name": "ValueComponent",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class ValueComponent:
        localized_string: Optional[LocalizedString] = field(
            default=None,
            metadata={
                "name": "LocalizedString",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )


@dataclass
class UncertaintyQualifier(BaseRootObject):
    """An UncertaintyQualifier is a generalization of a StandardUncertainty or a
    QualitativeUncertainty.

    The uncertainty is defined in clause 2 of "The Guide to the
    Expression of Uncertainty in Measurement".

    :ivar description: a set of text based descriptions of the
        UncertaintyQualifier.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar measure_name: specifies the STRING that serves to identify the
        UncertaintyQualifier.
    :ivar document_assignment:
    :ivar observation_assignment:
    """

    description: Optional["UncertaintyQualifier.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["UncertaintyQualifier.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    measure_name: Optional["UncertaintyQualifier.MeasureName"] = field(
        default=None,
        metadata={
            "name": "MeasureName",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: Optional[Proxy] = field(
            default=None,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class MeasureName:
        localized_string: List[LocalizedString] = field(
            default_factory=list,
            metadata={
                "name": "LocalizedString",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )


@dataclass
class ValueList(PropertyValue):
    """A ValueList is a specialization of PropertyValue that is an ordered
    collection of PropertyValues.

    A PropertyValue may be composed of different values such as 'mass',
    'speed', and 'age' which are all necessary in a given context. The
    ValueList collects all of them in a given order, such that each is
    identifiable by its index in the list.

    :ivar values: the values.
    """

    values: Optional["ValueList.Values"] = field(
        default=None,
        metadata={
            "name": "Values",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class Values:
        property_value: List[PropertyValue] = field(
            default_factory=list,
            metadata={
                "name": "PropertyValue",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )


@dataclass
class ValueSet(PropertyValue):
    """A ValueSet is a specialization of PropertyValue that is an unordered
    collection of PropertyValues.

    A PropertyValue may be composed of different values such as 'mass',
    'speed', and 'age' which are all necessary in a given context. The
    ValueSet collects all of them in a given order, such that each is
    identifiable by its index in the list.

    :ivar values: the values.
    """

    values: Optional["ValueSet.Values"] = field(
        default=None,
        metadata={
            "name": "Values",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class Values:
        property_value: List[PropertyValue] = field(
            default_factory=list,
            metadata={
                "name": "PropertyValue",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )


@dataclass
class ValueWithUnit(PropertyValue):
    """A ValueWithUnit is a specialization of a PropertyValue and is an abstract
    generalization of instances that represents the specification of a physical
    quantity by its value and its unit.

    NOTE: Only non-abstract specializations of the
    ValueWithUnit can be instantiated.

    :ivar unit: the ExternalUnit with which the physical quantity is
        expressed.
    :ivar significant_digits: specifies the number of decimal digits
        that are relevant for the ValueWithUnit. If present, the
        numerical measure or range may be specified using more digits
        than the significant digits but shall not be specified using
        less digits. The value of this attribute need not be specified.
    """

    unit: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Unit",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    significant_digits: Optional[int] = field(
        default=None,
        metadata={
            "name": "SignificantDigits",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ActivityMethodRealizationRelationship(RelationshipObject):
    """An ActivityMethodRealizationRelationship is a specialization of an
    RelationshipObject that is a relationship between two instances of
    ActivityMethodRealization.

    NOTE: The meaning of the relationship is determined by
    classification which is identified by the ActivityMethodRealizationRelationship
    property. The possible classifications are subclasses of . NOTE: An
    ActivityMethodRealizationRelationship may be used to specify sequencing and other
    constraints between different realizations for the same ActivityMethod.

    :ivar id: a set of Identifiers for the
        ActivityMethodRealizationRelationship
    :ivar related: the other instance of ActivityMethodRealization that
        is a part of the relationship. If one ActivityMethodRealization
        in the relationship is dependent upon the other, this attribute
        shall be the dependent one.
    :ivar analysis_assignment:
    :ivar approval_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar project_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar security_classification_assignment:
    """

    id: Optional["ActivityMethodRealizationRelationship.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    project_assignment: List[ProjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ProjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ActivityMethodRelationship(RelationshipObject):
    """An ActivityMethodRelationship is a specialization of an RelationshipObject
    that is a relationship between two instances of ActivityMethod.

    NOTE:
    The meaning of the relationship is determined by classification which is identified by
    the RelationshipObject property. The possible classifications are subclasses of .

    :ivar id: a set of Identifiers for the ActivityMethodRelationship
    :ivar related: the other instance of ActivityMethod that is part of
        the relationship. NOTE: The related usually identifies the
        ActivityMethod, which is based on the definition of the
        relatingMethod.
    :ivar analysis_assignment:
    :ivar approval_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar project_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar security_classification_assignment:
    """

    id: Optional["ActivityMethodRelationship.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    project_assignment: List[ProjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ProjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ActivityRelationship(RelationshipObject):
    """An ActivityRelationship is a specialization of an RelationshipObject that is
    a relationship between two instances of Activity.

    NOTE: The meaning of the
    relationship is determined by classification which is identified by the
    RelationshipObject property. The possible classifications are subclasses of . The
    activity required to complete a work order, may be decomposed into a series of
    activities. Their corresponding instances would be related using instances of the
    ActivityRelationship entity.

    :ivar id: a set of Identifiers for the ActivityRelationship
    :ivar related: the second instance of Activity that is part of the
        relationship. NOTE: The related usually identifies the Activity,
        which is based on the definition of the relatingActivity. NOTE:
        The meaning of this attribute is defined by the name attribute.
    :ivar analysis_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    id: Optional["ActivityRelationship.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class Address(BaseRootObject):
    """An Address is the information that locate persons or organizations.

    It provides location details for communication via postal mail,
    telephone, facsimile, telex or electronic mail.

    :ivar id: a set of Identifiers for the Address
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this Address. This Address is a
        member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar name: the words by which the Address is known. It specifies
        the name of the location identified by the address. The value of
        this attribute need not be specified. "White House", "Buckingham
        Palace", and "North Pole" are examples of address name.
    :ivar street_number: the number of a location on a street. The value
        of this attribute need not be specified.
    :ivar street: the name of a street. The value of this attribute need
        not be specified.
    :ivar postal_box: the number of a postal box. The value of this
        attribute need not be specified.
    :ivar town: the name of a town. The value of this attribute need not
        be specified.
    :ivar region: the name of a region. The value of this attribute need
        not be specified.
    :ivar postal_code: the code that is used by the country's postal
        service. The value of this attribute need not be specified.
    :ivar country: the name of a country. The value of this attribute
        need not be specified.
    :ivar internal_location: an organization-defined address for
        internal mail delivery. The value of this attribute need not be
        specified.
    :ivar facsimile_number: the number to which facsimiles may be sent.
        The value of this attribute need not be specified.
    :ivar telephone_number: the number at which telephone calls may be
        received. The value of this attribute need not be specified.
    :ivar electronic_mail_address: the electronic address to which
        electronic mail may be sent. The value of this attribute need
        not be specified.
    :ivar telex_number: the number where telex messages may be received.
        The value of this attribute need not be specified.
    :ivar url: the text that specifies the Uniform Resource Locator
        associated with the address. The value of this attribute need
        not be specified.
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    id: Optional["Address.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["Address.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["Address.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "",
        },
    )
    street_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "StreetNumber",
            "type": "Element",
            "namespace": "",
        },
    )
    street: Optional[str] = field(
        default=None,
        metadata={
            "name": "Street",
            "type": "Element",
            "namespace": "",
        },
    )
    postal_box: Optional[str] = field(
        default=None,
        metadata={
            "name": "PostalBox",
            "type": "Element",
            "namespace": "",
        },
    )
    town: Optional[str] = field(
        default=None,
        metadata={
            "name": "Town",
            "type": "Element",
            "namespace": "",
        },
    )
    region: Optional[str] = field(
        default=None,
        metadata={
            "name": "Region",
            "type": "Element",
            "namespace": "",
        },
    )
    postal_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "PostalCode",
            "type": "Element",
            "namespace": "",
        },
    )
    country: Optional[str] = field(
        default=None,
        metadata={
            "name": "Country",
            "type": "Element",
            "namespace": "",
        },
    )
    internal_location: Optional[str] = field(
        default=None,
        metadata={
            "name": "InternalLocation",
            "type": "Element",
            "namespace": "",
        },
    )
    facsimile_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "FacsimileNumber",
            "type": "Element",
            "namespace": "",
        },
    )
    telephone_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "TelephoneNumber",
            "type": "Element",
            "namespace": "",
        },
    )
    electronic_mail_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "ElectronicMailAddress",
            "type": "Element",
            "namespace": "",
        },
    )
    telex_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "TelexNumber",
            "type": "Element",
            "namespace": "",
        },
    )
    url: Optional[str] = field(
        default=None,
        metadata={
            "name": "Url",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class AnalysisModelObject(BaseObject):
    """
    An AnalysisModelObject represents the results of an analysis.

    :ivar id: a set of Identifiers for the AnalysisModelObject
    :ivar description: a set of text based descriptions of the
        AnalysisModelObject.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this AnalysisModelObject. This
        AnalysisModelObject is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar context_of_items: the AnalysisRepresentationContext in which
        the AnalysisModel is defined.
    """

    id: Optional["AnalysisModelObject.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["AnalysisModelObject.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["AnalysisModelObject.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["AnalysisModelObject.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    context_of_items: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ContextOfItems",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class AssignmentObjectRelationship(RelationshipObject):
    """An AssignmentObjectRelationship is an association between two
    AssignmentObjects.

    NOTE: An AssignmentObjectRelationship can be used to represent a
    historical sequence of assignments.

    :ivar related: the second instance of AssignmentObject that is a
        part of the relationship. NOTE: If one AssignmentObject in the
        relationship is dependent upon the other, this attribute shall
        be the dependent one.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class AssumptionRelationship(RelationshipObject):
    """
    An AssumptionRelationship is an association between two Assumptions.

    :ivar id: a set of Identifiers for the AssumptionRelationship
    :ivar related: the second instance of AssumptionRelationship that is
        a part of the relationship. NOTE: If one AssumptionRelationship
        in the relationship is dependent upon the other, this attribute
        shall be the dependent one.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar time_interval_assignment:
    """

    id: Optional["AssumptionRelationship.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class CollectionAssignment(AssignmentObject):
    """
    An CollectionAssignment is an association of an CollectionViewDefinition with
    the instance to which the collection has relevance.

    :ivar assigned_collection: the CollectionViewDefinition that is
        assigned to activity or product data.
    :ivar effectivity_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    assigned_collection: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedCollection",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ConditionEvaluation(BaseRootObject):
    """A ConditionEvaluation is a record of the evaluation of a Condition and the
    subsequent result.

    A Condition is "If the measured value of oil pressure from gauge 3
    on a car is less than 2 bar then check the oil level" When the
    condition is evaluated it is recorded by an instance of
    ConditionEvaluation. The measured value of oil pressure from gauge 3
    on car with VIN 12345678 is 1.9 bar. Therefore the result of the
    evaluated the condition is true.

    :ivar id: a set of Identifiers for the ConditionEvaluation
    :ivar description: a set of text based descriptions of the
        ConditionEvaluation.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this ConditionEvaluation This
        ConditionEvaluation is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar result: the indication whether the Condition evaluates to
        True, False or Unknown.
    :ivar condition: the Condition that has been evaluated.
    :ivar parameters: the ConditionEvaluationParameters that represent
        the parameters against which the condition has been evaluated.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    id: Optional["ConditionEvaluation.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["ConditionEvaluation.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["ConditionEvaluation.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["ConditionEvaluation.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    result: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Result",
            "type": "Element",
            "namespace": "",
        },
    )
    condition: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Condition",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    parameters: Optional["ConditionEvaluation.Parameters"] = field(
        default=None,
        metadata={
            "name": "Parameters",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Parameters:
        condition_evaluation_parameter: List[ConditionEvaluationParameter] = (
            field(
                default_factory=list,
                metadata={
                    "name": "ConditionEvaluationParameter",
                    "type": "Element",
                    "namespace": "",
                },
            )
        )


@dataclass
class ConditionRelationship(RelationshipObject):
    """
    A ConditionRelationship is a relation between two conditions.

    :ivar related: the other instance of Condition that is part of the
        relationship. If one element of the relationship is dependent
        upon the other, this attribute shall be the dependent one.
    :ivar analysis_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ContractRelationship(RelationshipObject):
    """
    A ContractRelationship is a relationship between two Contract instances.

    :ivar related: the other instance of Contract that is a part of the
        relationship. If one Contract in the relationship is dependent
        upon the other, this attribute shall be the dependent one.
    :ivar document_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class DefinedStateRelationship(RelationshipObject):
    """
    A DefinedStateRelationship is a relationship that links a StateAssertion to a
    StateAssessment.

    :ivar id: a set of Identifiers for the DefinedStateRelationship
    :ivar definitive_state: the StateAssertion being related to the
        defined subject State from StateAssessment.
    :ivar document_assignment:
    :ivar observation_assignment:
    """

    id: Optional["DefinedStateRelationship.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    definitive_state: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "DefinitiveState",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class DocumentDefinitionRelationship(RelationshipObject):
    """
    A DocumentDefinitionRelationship is a relationship between two instances of
    DocumentDefinition.

    :ivar id: a set of Identifiers for the
        DocumentDefinitionRelationship
    :ivar related: the other instance of DocumentDefinition that
        participates in the relationship. If one element of the
        relationship is dependent upon the other, this attribute shall
        be the dependent one.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar information_usage_right_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    id: Optional["DocumentDefinitionRelationship.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class Effectivity(BaseRootObject):
    """An Effectivity is the identification of a domain of applicability.

    NOTE: Instances of Effectivity may be applied to any kind of product or activity data.

    :ivar id: a set of Identifiers for the Effectivity
    :ivar description: a set of text based descriptions of the
        Effectivity.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this Effectivity This Effectivity
        is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar approval_assignment:
    :ivar condition_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar effectivity_relationship:
    """

    id: Optional["Effectivity.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["Effectivity.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["Effectivity.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["Effectivity.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_relationship: List[EffectivityRelationship] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class EnvironmentAssignment(AssignmentObject):
    """
    A EnvironmentAssignment is an assignment of a product to the environment in
    which it operates or is supported.

    :ivar assigned_environment: the EnvironmentDefinitionView in which
        the product is supported or operates.
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar security_classification_assignment:
    :ivar time_interval_assignment:
    :ivar work_request_assignment:
    """

    assigned_environment: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedEnvironment",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ExternalClass(BaseRootObject):
    """
    An ExternalClass defines a relationship between a datatype and an non-OWL
    reference-data class of which instances of the datatype are members.

    :ivar description: a set of text based descriptions of the
        ExternalClass.
    :ivar id: the identification of the ExternalClass.
    :ivar source: the document that provides the definition for the
        ExternalClass.
    """

    description: Optional["ExternalClass.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional["ExternalClass.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    source: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Source",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Id:
        identifier: Optional[Identifier] = field(
            default=None,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )


@dataclass
class ExternalItem(BaseRootObject):
    """An ExternalItem is the representation of a reference to an object or item
    that is external to the data exchange file.

    The location of a digital file in a file system. A section in a
    document. A definition.

    :ivar description: a set of text based descriptions of the
        ExternalItem.
    :ivar id: the identification of the ExternalItem.
    :ivar source: the document within which the ExternalItem is defined.
    :ivar document_assignment:
    """

    description: Optional["ExternalItem.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    id: Optional["ExternalItem.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    source: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Source",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Id:
        identifier: Optional[Identifier] = field(
            default=None,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )


@dataclass
class FileRelationship(RelationshipObject):
    """A FileRelationship is a relationship between two instances of File.

    A service manual may contain graphics for explanatory reasons. In
    this case, the File instances that contain the graphics are
    referenced as related from the File instance that contains the body
    of the service manual with DocumentDefinitionRelationship
    'reference'.

    :ivar related: the other instance of File that participates in the
        relationship. If one element of the relationship is dependent
        upon the other, this attribute shall be the dependent one.
    :ivar document_assignment:
    :ivar information_usage_right_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class FunctionalBreakdownContext(BreakdownContext):
    """A FunctionalBreakdownContext is a specialization of BreakdownContext that is
    an association of a FunctionalElement to a FunctionalBreakdown of which the
    functional element is a member.

    A function 'provide load lifting capability' is member of the
    functional breakdown of a helicopter.
    """


@dataclass
class GeometricCoordinateSpace(BaseObject):
    """A GeometricCoordinateSpace is a type of ChainedGeometricModelLinkSelect that
    defines a coordinate space where geometric elements can be defined.

    It is either
    two-dimensional or three-dimensional. There shall be at least two units specified for
    the GeometricCoordinateSpace: one length unit and one plane angle unit. The length unit
    applies to each coordinate direction. The length unit millimetre and the angle unit
    radian are examples of units that may assigned to a GeometricCoordinateSpace. NOTE: The
    origin for coordinate values is implicitly defined as being the cartesian point whose
    coordinates are all zero.

    :ivar dimension_count: the dimensionality of the geometric space.
    :ivar units:
    :ivar accuracies: the uncertainty measures that apply.
    """

    dimension_count: Optional[int] = field(
        default=None,
        metadata={
            "name": "DimensionCount",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    units: Optional["GeometricCoordinateSpace.Units"] = field(
        default=None,
        metadata={
            "name": "Units",
            "type": "Element",
            "namespace": "",
        },
    )
    accuracies: Optional["GeometricCoordinateSpace.Accuracies"] = field(
        default=None,
        metadata={
            "name": "Accuracies",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Units:
        external_unit: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ExternalUnit",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Accuracies:
        value_with_unit: List[ValueWithUnit] = field(
            default_factory=list,
            metadata={
                "name": "ValueWithUnit",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class InZone(AssociationObject):
    """An InZone is a relationship between a ZoneElement and an item that exists
    within the zone.

    A pump is in the starboard engine room of a ship.

    :ivar located_item: the item that exists in the zone.
    :ivar zone: the region in which the item exists.
    :ivar approval_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    located_item: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "LocatedItem",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    zone: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Zone",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class InformationRight(BaseRootObject):
    """An InformationRight is a definition of what may or may not be done with
    information in the sense of legal rights and obligations.

    NOTE: This a general purpose
    definition of a right that may be applied to many things. The usage of the
    InformationRight is represented by InformationUsageRight. The application of that right
    to information is represented by InformationUsageRightAssignment. Copyright is an
    InformationRight. For the purposes of developing a new system, details of government
    furnished equipment may be made available to a particular project team. The team may
    copy and use the information internally, but may not pass it on, either to a third part,
    or to another team, and must destroy the information at the end of the contract.

    :ivar id: a set of Identifiers for the InformationRight
    :ivar description: a set of text based descriptions of the
        InformationRight.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this InformationRight This
        InformationRight is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar restriction: the text that describes any conditions and
        limitations that apply to the exercise of the right. The value
        of this attribute need not be specified. The description of the
        right states that copying is permitted within the project team
        only, whereas the restriction notes the additional constraint
        that the information must be destroyed at the end of the
        project.
    :ivar document_assignment:
    :ivar observation_assignment:
    """

    id: Optional["InformationRight.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["InformationRight.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["InformationRight.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["InformationRight.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    restriction: Optional["InformationRight.Restriction"] = field(
        default=None,
        metadata={
            "name": "Restriction",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Restriction:
        localized_string: List[LocalizedString] = field(
            default_factory=list,
            metadata={
                "name": "LocalizedString",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class InformationUsageRight(BaseRootObject):
    """An InformationUsageRight is an application an InformationRight to a
    particular usage context.

    NOTE: One view of the distinction between an InformationRight
    and an InformationUsageRight is that the InformationRight represents a standard clause
    in a contract, whereas an InformationUsageRight represents the fact that the clause is
    used in a particular contract. NOTE: The context for the usage can be defined through
    the contract which defines the right, the organization that grants the right, the person
    or organization which is granted the right, and any dates such as the starting or ending
    dates for the right. The meaning of each association is identified through the roles of
    the assignments, and these are defined through reference-data. NOTE: The Approval of an
    InformationUsageRight carries the meaning that the right is granted to all information
    items in the relevant context, as opposed to the approval of an
    InformationUsageRightAssignment which is limited to particular items. NOTE:
    InformationUsageRight provides a mechanism for recording significant rights within a
    product database. The legal significance of the presence or absence of a right is
    outside the scope of this part of ISO 10303

    :ivar id: a set of Identifiers for the InformationUsageRight
    :ivar description: a set of text based descriptions of the
        InformationUsageRight.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this InformationUsageRight This
        InformationUsageRight is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar comment: the additional information to be recorded about the
        InformationUsageRight. The value of this attribute need not be
        specified.
    :ivar grants_right:
    :ivar approval_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar information_usage_right_relationship:
    """

    id: Optional["InformationUsageRight.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["InformationUsageRight.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["InformationUsageRight.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["InformationUsageRight.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    comment: Optional["InformationUsageRight.Comment"] = field(
        default=None,
        metadata={
            "name": "Comment",
            "type": "Element",
            "namespace": "",
        },
    )
    grants_right: Optional["InformationUsageRight.GrantsRight"] = field(
        default=None,
        metadata={
            "name": "GrantsRight",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_relationship: List[
        InformationUsageRightRelationship
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Comment:
        localized_string: List[LocalizedString] = field(
            default_factory=list,
            metadata={
                "name": "LocalizedString",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class GrantsRight:
        information_right: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InformationRight",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )


@dataclass
class ItemShapeObject(BaseObject):
    """AnItemShapeObject is an abstract generalization of instances that represents
    the shape of a ShapeableItemSelect.

    NOTE: Only non-abstract specializations
    of the ItemShapeObject can be instantiated.

    :ivar id: a set of Identifiers for the ItemShape
    :ivar description: a set of text based descriptions of the
        ItemShape.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this ItemShape This ItemShape is a
        member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar document_assignment:
    :ivar observation_assignment:
    """

    id: Optional["ItemShapeObject.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["ItemShapeObject.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["ItemShapeObject.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["ItemShapeObject.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class JustificationRelationship(RelationshipObject):
    """
    A JustificationRelationship is an association between two Justifications.

    :ivar id: a set of Identifiers for the JustificationRelationship
    :ivar related: the other instance of Justification that is part of
        the relationship. If one element of the relationship is
        dependent upon the other then this attribute shall be the
        dependent one.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    """

    id: Optional["JustificationRelationship.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class LocationRepresentation(BaseObject):
    """
    A LocationRepresentation is a means of representing a location.

    :ivar id: a set of Identifiers for the LocationRepresentation
    :ivar description: a set of text based descriptions of the
        LocationRepresentation.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this LocationRepresentation This
        LocationRepresentation is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar work_request_assignment:
    """

    id: Optional["LocationRepresentation.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["LocationRepresentation.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["LocationRepresentation.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["LocationRepresentation.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ManagedResourceRelationship(RelationshipObject):
    """A ManagedResourceRelationship is an association between two managed
    resources.

    The meaning of the relationship is determined by classification. A
    managed resource relationship can be classified as "Alternative" or
    "Preferred".

    :ivar related: the other instance of ManagedResource that is a part
        of the relationship. If one element of the relationship is
        dependent upon the other, this attribute shall be the dependent
        one.
    :ivar analysis_assignment:
    :ivar approval_assignment:
    :ivar condition_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class NumericalValue(ValueWithUnit):
    """
    A NumericalValue is a specialization of a ValueWithUnit representing a quantity
    expressed with a numerical value and a unit.

    :ivar value_component: the quantity of the NumericalValue.
    :ivar value_context: the context in which the NumericalValue is
        recorded.
    """

    value_component: Optional[float] = field(
        default=None,
        metadata={
            "name": "ValueComponent",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    value_context: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ValueContext",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ObservedEnvironmentAssignment(AssignmentObject):
    """
    An ObservedEnvironmentAssignment is an assignment of a product to the
    environment in which is or has operated.

    :ivar assigned_environment: a record of the environment,
        ObservedEnvironmentView, in which the product is supported or
        operates.
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar security_classification_assignment:
    :ivar time_interval_assignment:
    :ivar work_request_assignment:
    """

    assigned_environment: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedEnvironment",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class OrganizationRelationship(RelationshipObject):
    """An OrganizationRelationship is a relationship between two instances of
    Organization.

    A team belongs to a department which itself belongs to a company.
    Such an organizational structure can be described up using instances
    of OrganizationRelationship.

    :ivar related: the other instance of Organization that is part of
        the relationship. If one element of the relationship is
        dependent upon the other, this attribute shall be the dependent
        one.
    :ivar analysis_assignment:
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar time_interval_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class OrganizationalLocationIdentification(BaseRootObject):
    """
    An OrganizationalLocationIdentification is location that is defined by an
    identification which is specific in an organization context.

    :ivar id: a set of Identifiers for the
        OrganizationalLocationIdentification
    :ivar description: a set of text based descriptions of the
        OrganizationalLocationIdentification.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this
        OrganizationalLocationIdentification This
        OrganizationalLocationIdentification is a member of the
        referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar identification_type: the text that characterizes the
        identification location. compartment or building.
    :ivar location_value: the value of organization based location
        identification.
    :ivar document_assignment:
    :ivar observation_assignment:
    """

    id: Optional["OrganizationalLocationIdentification.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional[
        "OrganizationalLocationIdentification.Description"
    ] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional[
        "OrganizationalLocationIdentification.ClassifiedAs"
    ] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["OrganizationalLocationIdentification.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    identification_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "IdentificationType",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    location_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "LocationValue",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class PersonOrOrganizationOrPersonInOrganizationInPositionRelationship(
    RelationshipObject
):
    """A PersonOrOrganizationOrPersonInOrganizationInPositionRelationship is a
    specialization of an RelationshipObject that is a relationship between one
    Organization, Person, or PersonInOrganization and another.

    Examples of the relationship are: successor
    job-share NOTE: The meaning of the relationship is determined by classification which is
    identified by the RelationshipObject property. The possible classifications are
    subclasses of .

    :ivar id: a set of Identifiers for the
        PersonOrOrganizationOrPersonInOrganizationInPositionRelationship
    :ivar related: the other instance of Organization, Person, or
        PersonInOrganization that participates in the relationship. If
        one element of the relationship is dependent upon the other,
        this attribute shall be the dependent one.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    id: Optional[
        "PersonOrOrganizationOrPersonInOrganizationInPositionRelationship.Id"
    ] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class PhysicalBreakdownContext(BreakdownContext):
    """A PhysicalBreakdownContext is a specialization of BreakdownContext that is a
    membership relationship between a PhysicalElement and a PhysicalBreakdown of
    which the physical element is a member.

    A wheel is a member of the physical breakdown of an automobile.
    """


@dataclass
class PositionAssignment(AssignmentObject):
    """
    A PositionAssignment is an association of a Position with activity or product
    data.

    :ivar assigned_position: the Position that is assigned to activity
        or product data.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    assigned_position: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedPosition",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PositionGroupAssignment(AssignmentObject):
    """
    A PositionGroupAssignment is an association of a PositionGroup with activity or
    product data.

    :ivar assigned_position_group: the PositionGroup that is assigned to
        activity or product data.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    assigned_position_group: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedPositionGroup",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PositionPositionTypeAssignment(AssignmentObject):
    """A PositionPositionTypeAssignment is an assignment of PositionType to a
    Position.

    It allows many positions to be described by many position types.

    :ivar assigned_position_type: the PositionType which is assigned to
        a Position.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    assigned_position_type: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedPositionType",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PositionTypeAssignment(AssignmentObject):
    """
    A PositionTypeAssignment is the association of a PositionType with activity or
    product data.

    :ivar assigned_position_type: the PositionType that is assigned to
        activity or product data.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    assigned_position_type: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedPositionType",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ProbabilityByName(Probability):
    """A ProbabilityByName is a specialization of Probability whose value belongs
    to a one of a set of named classes, rather than by assigning a specific
    numerical value, which may not be available.

    A safety assessment methodology classes the probability an accident
    as "very unlikely", "unlikely", "significantly likely" and "almost
    certain". Any process that has a "very likely" or "almost certain"
    chance of causing serious injury is shut down.

    :ivar probability_value: the named probability value
    """

    probability_value: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ProbabilityValue",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class ProbabilityDistribution(ProbabilityGenerator):
    """A ProbabilityDistribution is a specialization of ProbabilityGenerator
    that is a probability distribution. NOTE: For a full understanding of probability
    distribution and the terms used, a textbook on probability theory should be consulted.
    NOTE: This entity describes a particular probability distribution, rather than the
    general type of distribution. For example, in coin tossing experiment, the number of
    heads that may occur is given by a binomial distribution - that is, a type of
    distribution, and outside the scope of this module.

    :ivar id: a set of Identifiers for the ProbabilityDistribution
    :ivar distribution_name: the name of the type of distribution. The
        value of the attribute need not be specified. NOTE: The name is
        taken from reference-data, which is based on the standard
        mathematical names for distributions, such as "Binomial",
        "Normal", "Gaussian". Empirically derived distributions will not
        normally be named.
    :ivar is_continuous: the text that distinguishes whether the domain
        of the probability distribution is discrete or continuous. The
        measurement of a person's height is a continuous distribution,
        since it can take any value between 0 and 3m. Coin tossing gives
        rise to a discrete distribution, since the number of heads
        cannot be a fraction.
    :ivar mean: the expectation E(x), which is the "summation" of x.p(x)
        over all x, where x is the random variable, and p(x) is the
        probability of its occurrence. The term "summation" covers both
        literal summation in the case of a discrete distribution, and
        integration for a continuous distribution.
    :ivar variance: the real number indicating the square of the
        standard deviation of the probability distribution.
    """

    id: Optional["ProbabilityDistribution.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    distribution_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "DistributionName",
            "type": "Element",
            "namespace": "",
        },
    )
    is_continuous: Optional["ProbabilityDistribution.IsContinuous"] = field(
        default=None,
        metadata={
            "name": "IsContinuous",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    mean: Optional[float] = field(
        default=None,
        metadata={
            "name": "Mean",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    variance: Optional[float] = field(
        default=None,
        metadata={
            "name": "Variance",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class IsContinuous:
        localized_string: List[LocalizedString] = field(
            default_factory=list,
            metadata={
                "name": "LocalizedString",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )


@dataclass
class ProductConfigurationRelationship(RelationshipObject):
    """
    A ProductConfigurationRelationship is a relationship between a pair of
    ProductConfigurations.

    :ivar related: the other instance of ProductConfiguration that is a
        part of the relationship. If one element of the relationship is
        dependent upon the other, this attribute shall be the dependent
        one.
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ProductDefinitionElementRelationship(RelationshipObject):
    """
    A ProductDefinitionElementRelationship is a relationship between a
    BreakdownElementDefinition or a BreakdownElementUsage and a
    ViewDefinitionRelationship or a ProductViewDefinition.

    :ivar breakdown: the BreakdownElementDefinition or a
        BreakdownElementUsage that is related to the
        ViewDefinitionRelationship or ProductViewDefinition.
    :ivar product: the ViewDefinitionRelationship or
        ProductViewDefinition that is related to the
        BreakdownElementDefinition or a BreakdownElementUsage.
    :ivar approval_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    breakdown: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Breakdown",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    product: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Product",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ProductGroupRelationship(RelationshipObject):
    """A ProductGroupRelationship is a relationship between two ProductGroups.

    ExternalOwlClass is used to specify the meaning or type of the
    relationship. NOTE: A subset is a common type of relationship. It
    indicates that one ProductGroup is a subset of another.

    :ivar id: a set of Identifiers for the ProductGroupRelationship
    :ivar related: the other instance of ProductGroup that is part of
        the relationship. If one element of the relationship is
        dependent upon the other, this attribute shall be the dependent
        one.
    :ivar analysis_assignment:
    :ivar approval_assignment:
    :ivar certification_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar project_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar security_classification_assignment:
    """

    id: Optional["ProductGroupRelationship.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List[CertificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    project_assignment: List[ProjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ProjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ProductRelationship(RelationshipObject):
    """
    A ProductRelationship is an association between two Products.

    :ivar id: a set of Identifiers for the ProductRelationship
    :ivar related: the other instance of Product that is a part of the
        relationship. If one element of the relationship is dependent on
        the other, this attribute shall be the dependent one.
    :ivar analysis_assignment:
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar security_classification_assignment:
    """

    id: Optional["ProductRelationship.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ProjectRelationship(RelationshipObject):
    """
    A ProjectRelationship is an association between two instances of Project with
    an identification and a description of their relationship.

    :ivar related: the other instance of Project that is a part of the
        relationship. If one element of the relationship is dependent
        upon the other, this attribute shall be the dependent one.
    :ivar analysis_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PropertyDefinitionRelationship(RelationshipObject):
    """
    To be defined.

    :ivar related: To be defined
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PropertyValueRelationship(RelationshipObject):
    """A PropertyValueRelationship is a specialization of RelationshipObject.

    It represents an association between two PropertyValues. An
    association between a value for a property expressed in a given unit
    and an equivalent value for the same property in a different unit.
    The PropertyValueRelationship is classified as a .

    :ivar related: the secondary PropertyValue in a property value
        relationship. PropertyValue
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class QualificationAssignment(AssignmentObject):
    """
    A QualificationAssignment is the assignment of a qualification to a person or
    organization.

    :ivar assigned_qualification_type: the type of qualification that
        has been gained by the person or organization.
    :ivar approval_assignment:
    :ivar certification_assignment:
    :ivar date_time_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    assigned_qualification_type: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedQualificationType",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List[CertificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class QualitativeUncertainty(UncertaintyQualifier):
    """A QualitativeUncertainty is a specialization of UncertaintyQualifier.

    The uncertainty is defined in clause 2 of "The Guide to the
    Expression of Uncertainty in Measurement".

    :ivar uncertainty_value: specifies a STRING for the
        QualitativeUncertainty.
    """

    uncertainty_value: Optional["QualitativeUncertainty.UncertaintyValue"] = (
        field(
            default=None,
            metadata={
                "name": "UncertaintyValue",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )
    )

    @dataclass
    class UncertaintyValue:
        localized_string: List[LocalizedString] = field(
            default_factory=list,
            metadata={
                "name": "LocalizedString",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )


@dataclass
class RegionalCoordinate(BaseRootObject):
    """
    A RegionalCoordinate is a location that is specified relative to a Regional
    location system.

    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this RegionalCoordinate This
        RegionalCoordinate is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar coordinate_value: the value and unit for the coordinate within
        the regional location system used.
    :ivar grid_system: the RegionalGridLocationRepresentation in which
        the regional coordinate is used.
    :ivar observation_assignment:
    """

    classified_as: Optional["RegionalCoordinate.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["RegionalCoordinate.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    coordinate_value: Optional["RegionalCoordinate.CoordinateValue"] = field(
        default=None,
        metadata={
            "name": "CoordinateValue",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    grid_system: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "GridSystem",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class CoordinateValue:
        value_with_unit: Optional[ValueWithUnit] = field(
            default=None,
            metadata={
                "name": "ValueWithUnit",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )


@dataclass
class RequiredResourceAssignment(AssignmentObject):
    """A RequiredResourceAssignment is an association of a resource requirement
    statement with one or more entities that requires the resource.

    task, task step, activity, activity method, organization are
    examples of entities to which the resource requirement statement
    could be related. The role of the assignment is determined by
    classification. The assignment can be classified as "required by".
    NOTE: An association between a required resource and actions that
    are needed prior to its usage. A resource required by the activity
    "12" needs to be calibrated prior to usage. The calibration activity
    "21" is associated with the same required resource A resource
    required by the task "123" needs to be disposed after its usage.
    This disposal task "456" is associated with the same required
    resource.

    :ivar assigned_resource: the required resource that is to be
        associated with the requiring entity.
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar condition_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    """

    assigned_resource: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedResource",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List["TaskElementAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List["TaskMethodAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List["TaskMethodVersionAssignment"] = (
        field(
            default_factory=list,
            metadata={
                "name": "TaskMethodVersionAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )


@dataclass
class RequiredResourceRelationship(RelationshipObject):
    """A RequiredResourceRelationship is a relationship between two required
    resource statements.

    The meaning of the relationship is determined by classification.
    "alternative" and "realized by" are examples of required resource
    relationship.

    :ivar id: a set of Identifiers for the RequiredResourceRelationship
    :ivar related: the other instance of RequiredResource that is a part
        of the relationship. If one element of the relationship is
        dependent upon the other, this attribute shall be the dependent
        one.
    :ivar approval_assignment:
    :ivar condition_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    id: Optional["RequiredResourceRelationship.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class RequirementAssignment(AssignmentObject):
    """A RequirementAssignment is used to relate a requirement (via the
    RequirementViewDefinition entity) to data types representing the items which
    are affected by the requirement.

    A requirement "the vehicle shall have a maximum power output of at
    least 150BHP" could be assigned to the data types which are used to
    represent the vehicle's engine.

    :ivar assigned_requirement: the RequirementViewDefinition which is
        assigned.
    :ivar analysis_assignment:
    :ivar approval_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar information_usage_right_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar security_classification_assignment:
    """

    assigned_requirement: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedRequirement",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class RequirementSatisfiedBy(BaseRootObject):
    """A RequirementSatisfiedBy is a relationship between an item (specified in
    RequirementAssignmentSelect) and a requirement, asserting that the item
    satisfies the identified requirement.

    A data type used to represent a vehicle's engine with a power output
    of 160BHP could be asserted to satisfy a requirement "the vehicle
    shall have a maximum power output of at least 150BHP".

    :ivar id: a set of Identifiers for the RequirementSatisfiedBy
    :ivar description: a set of text based descriptions of the
        RequirementSatisfiedBy.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this RequirementSatisfiedBy. This
        RequirementSatisfiedBy is a member of the referenced class.
    :ivar satisfied_by: the item that satisfies the requirement.
    :ivar satisfied_requirement: the requirement that is satisfied.
    :ivar related_assignment: the RequirementAssignment that is
        satisfied by the RequirementSatisfiedBy. The value of this
        attribute need not be specified.
    :ivar observation_assignment:
    """

    id: Optional["RequirementSatisfiedBy.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["RequirementSatisfiedBy.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["RequirementSatisfiedBy.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    satisfied_by: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "SatisfiedBy",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    satisfied_requirement: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "SatisfiedRequirement",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    related_assignment: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "RelatedAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class RiskImpactAssignment(AssignmentObject):
    """A RiskImpactAssignment is a specialization of AssignmentObject and a type of
    PropertyAssignmentSelect.

    It assigns a set of items that might be impacted to the
    RiskConsequence that is the cause of the effect.

    :ivar assigned_risk_impact: the items impacted by the
        RiskConsequence.
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    assigned_risk_impact: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedRiskImpact",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class RiskPerceptionSourceAssignment(AssignmentObject):
    """A RiskPerceptionSourceAssignment is a specialization of AssignmentObject.

    It assigns a set of one or many items that are the source for a
    RiskPerception to the RiskPerception.

    :ivar assigned_risk_source: the items which are identified as the
        source of the RiskPerception.
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    assigned_risk_source: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedRiskSource",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ShapeElementRelationship(RelationshipObject):
    """
    A ShapeElementRelationship is a relationship between two instances of
    ShapeElement.

    :ivar id: a set of Identifiers for the ShapeElementRelationship
    :ivar related: the other instance of ShapeElement that takes part in
        the relationship.
    :ivar document_assignment:
    :ivar observation_assignment:
    """

    id: Optional["ShapeElementRelationship.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class StandardUncertainty(UncertaintyQualifier):
    """A StandardUncertainty is a specialization of UncertaintyQualifier.

    A StandardUncertainty may be an ExpandedUncertainty. The uncertainty
    is defined in clause 2 of "The Guide to the Expression of
    Uncertainty in Measurement".

    :ivar uncertainty_value: specifies a REAL value of the uncertainty.
    """

    uncertainty_value: Optional[float] = field(
        default=None,
        metadata={
            "name": "UncertaintyValue",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class StateAssertion(BaseRootObject):
    """
    A StateAssertion is used to assert that the subject State is in conformance
    with a particular StateDefinition.

    :ivar id: a set of Identifiers for the StateAssertion
    :ivar description: a set of text based descriptions of the
        StateAssertion.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this StateAssertion This
        StateAssertion is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar asserted_state: the subject State being asserted.
    :ivar conformance_state: a particular StateDefinition the subject
        State is being asserted against.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar condition_evaluation_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    id: Optional["StateAssertion.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["StateAssertion.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["StateAssertion.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["StateAssertion.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    asserted_state: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssertedState",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    conformance_state: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ConformanceState",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class StateDefinitionRelationship(RelationshipObject):
    """A StateDefinitionRelationship is an association between two or more
    instances of StateDefinition.

    NOTE: Relationships between StateDefinition entities may
    be used to support fault diagnosis.

    :ivar id: a set of Identifiers for the StateDefinitionRelationship
    :ivar related: the other of the instances of StateDefinition that is
        a part of the relationship.
    :ivar approval_assignment:
    :ivar condition_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    id: Optional["StateDefinitionRelationship.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class SystemBreakdownContext(BreakdownContext):
    """A SystemBreakdownContext is a specialization of BreakdownContext that is a
    membership relationship between a SystemElement and a SystemBreakdown of which
    the system element is a member.

    A heating system is a member of the breakdown of a climate control
    system.
    """


@dataclass
class TaskElementStateRelationship(RelationshipObject):
    """A TaskElementStateRelationship is an type of ActivityMethodRelationship.

    It is an association between a State or a StateDefinition and a
    TaskElement. The meaning of the entity is determined by
    classification. Candidate meanings include: assumed starting state;
    required starting state.

    :ivar id: a set of Identifiers for the TaskElementStateRelationship
    :ivar state: the State or StateDefinition being related.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar security_classification_assignment:
    """

    id: Optional["TaskElementStateRelationship.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    state: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "State",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class TaskMethodStateRelationship(RelationshipObject):
    """A TaskMethodStateRelationship is a relationship between a state and a
    TaskMethod.

    NOTE: The meaning of the entity is determined by classification. Candidate
    meanings include: Assumed starting state; Required starting state.

    :ivar id: a set of Identifiers for the TaskMethodStateRelationship
    :ivar state: the mode of being that is related.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    id: Optional["TaskMethodStateRelationship.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    state: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "State",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class TaskObjectiveStateRelationship(RelationshipObject):
    """A TaskObjectiveStateRelationship is a relationship between a state and a
    TaskObjective.

    NOTE: The meaning of the entity is determined by classification.
    Candidate meanings include: Intended finishing state; Alternative finishing state.

    :ivar id: a set of Identifiers for the
        TaskObjectiveStateRelationship
    :ivar state: the mode of being that is related.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar security_classification_assignment:
    """

    id: Optional["TaskObjectiveStateRelationship.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    state: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "State",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class TimeInterval(BaseRootObject):
    """
    A TimeInterval is the identification of an intervening time.

    :ivar id: a set of Identifiers for the TimeInterval.
    :ivar description: a set of text based descriptions of the
        TimeInterval.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar time_interval_relationship:
    """

    id: Optional["TimeInterval.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["TimeInterval.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["TimeInterval.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_relationship: List[TimeIntervalRelationship] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class TypeOfPersonAssignment(AssignmentObject):
    """
    A TypeOfPersonAssignment is the association of a TypeOfPerson in a role with an
    activity or product data.

    :ivar assigned_type_of_person: the TypeOfPerson that is to be
        assigned.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    assigned_type_of_person: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedTypeOfPerson",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeOfPersonDefinitionRelationship(RelationshipObject):
    """A TypeOfPersonDefinitionRelationship is a relationship between two
    definitions of a type of person (TypeOfPersonDefinition).

    A
    TypeOfPersonDefinitionRelationship is a specialization of a RelationshipObject that is a
    relationship between two instances of a type of person (TypeOfPersonDefinition).
    "alternate" and "superceded by" are examples of TypeOfPersonDefinitionRelationships.
    NOTE: The meaning of the relationship is determined by classification which is
    identified by the RelationshipObject property. The possible classifications are
    subclasses of .

    :ivar related: the other instance of TypeOfPersonDefinition that is
        a part of the relationship. If one element of the relationship
        is dependent upon the other, this attribute shall be the
        dependent one.
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeOfPersonDefinitionRequiredAttributesRelationship(RelationshipObject):
    """A TypeOfPersonDefinitionRequiredAttributesRelationship is a relationship
    between a TypeOfPersonDefinition and the attributes required to define that
    type of person.

    The type of person "van driver" is required to possess the
    qualification named "commercial driving license" or the experience
    level "3 years of driving more than 10,000 miles per year".

    :ivar required_attributes: the required attributes of a person. Must
        have a degree Must have 10 years experience
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    required_attributes: Optional[
        "TypeOfPersonDefinitionRequiredAttributesRelationship.RequiredAttributes"
    ] = field(
        default=None,
        metadata={
            "name": "RequiredAttributes",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class RequiredAttributes:
        experience_type: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ExperienceType",
                "type": "Element",
                "namespace": "",
            },
        )
        qualification_type: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "QualificationType",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ValueRange(ValueWithUnit):
    """
    A ValueRange is a specialization of ValueWithUnit that is a pair of numbers
    representing the range in which the value shall lie.

    :ivar lower_limit: the lower limit.
    :ivar upper_limit: the upper limit.
    """

    lower_limit: Optional[float] = field(
        default=None,
        metadata={
            "name": "LowerLimit",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    upper_limit: Optional[float] = field(
        default=None,
        metadata={
            "name": "UpperLimit",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class ValueWithTolerances(ValueWithUnit):
    """A ValueWithTolerances is a specialization of ValueWithUnit that specifies a
    range of values by specifying a single nominal value and two tolerances that
    are offsets from the single value.

    The range is defined to be the closed interval [item value + lower
    limit, item value + upper limit].

    :ivar toleranced_value: specifies the single value that is the base
        value for specifying the range.
    :ivar lower_limit: the lower limit of the range.
    :ivar upper_limit: the upper limit of the range.
    """

    toleranced_value: Optional[float] = field(
        default=None,
        metadata={
            "name": "TolerancedValue",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    lower_limit: Optional[float] = field(
        default=None,
        metadata={
            "name": "LowerLimit",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    upper_limit: Optional[float] = field(
        default=None,
        metadata={
            "name": "UpperLimit",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class VerificationRelationship(RelationshipObject):
    """A VerificationRelationship is an association between two verifications.

    NOTE: The meaning of the relationship is determined by classification which is
    identified by the RelationshipObject property. The possible classifications are
    subclasses of .

    :ivar related: the other verification in this relationship.
    :ivar analysis_assignment:
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar time_interval_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class WorkOutputRelationship(RelationshipObject):
    """A WorkOutputRelationship is a relationship between two work output
    statements.

    The meaning of the relationship is determined by classification. A
    WorkOutputRelationship is classified as "realized by" .

    :ivar related: the other instance of WorkOutput that is a part of
        the relationship. If one element of the relationship is
        dependent upon the other, this attribute shall be the dependent
        one.
    :ivar analysis_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class WorkRequestRelationship(RelationshipObject):
    """AWorkRequestRelationship is a specialization of an RelationshipObject that
    is a relationship between two instances of WorkRequest.

    NOTE: The meaning of the
    relationship is determined by classification which is identified by the
    RelationshipObject property. The possible classifications are subclasses of .

    :ivar related: the second instance of WorkRequest that is part of
        the relationship. NOTE: NOTE: If one WorkRequest in the
        relationship is dependent upon the other, this attribute shall
        be the dependent one.
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ZoneBreakdownContext(BreakdownContext):
    """A ZoneBreakdownContext is a specialization of BreakdownContext that is a
    membership relationship between a ZoneElement and a ZoneBreakdown of which the
    zonal element is a member.

    A 'fire-check zone' might be a member of the zonal breakdown of a
    building.
    """


@dataclass
class ActivityHappening(ActivityRelationship):
    """An ActivityHappening is a specialization of ActivityRelationship.

    It is a relationship between the definition of an activity
    (ActivityHappening) and its actual occurrence (ActivityHappening).
    NOTE: Many ActivityActuals may be realizations of a single Activity.
    A single defined check (e.g. an oil-check) is actually performed on
    many occasions or vehicles. NOTE: A single ActivityActual may
    realize several activities. A single actual servicing activity
    includes several checks and repairs (e.g. an oil-check and a tyre-
    replacement).
    """


@dataclass
class ActivityMethodRealization(AssociationObject):
    """An ActivityMethodRealization is a specialization of an AssociationObject.

    It is a further specification of how an activity method is to be
    performed with the ActivityMethod. NOTE: More than one specification
    can be associated with the same ActivityMethod. For a given planned
    activity there may be a task specification, a statement of how task
    performance is to be logged and a schedule that all apply.

    :ivar id: a set of Identifiers for the ActivityMethodRealization
    :ivar activity_method: the ActivityMethod for which further
        specification is being provided.
    :ivar realized_by: the item that realizes the ActivityMethod. A
        plan, schedule, or task description may realize the activity
        method. NOTE: More than one such item can be associated with the
        activity.
    :ivar approval_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar project_assignment:
    :ivar security_classification_assignment:
    :ivar activity_method_realization_relationship:
    """

    id: Optional["ActivityMethodRealization.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ActivityMethod",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    realized_by: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "RealizedBy",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    project_assignment: List[ProjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ProjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_realization_relationship: List[
        ActivityMethodRealizationRelationship
    ] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodRealizationRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class AddressBasedLocationRepresentation(LocationRepresentation):
    """
    An AddressBasedLocationRepresentation is a specialization of
    LocationRepresentation specified by its postal identification.

    :ivar postal_address: the location where mail can be received.
    """

    postal_address: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "PostalAddress",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class AlternateProductRelationship(ProductRelationship):
    """An AlternateProductRelationship is an association between two instances of
    Product.

    It specifies that any version of the AlternateProductRelationship, may be
    used in place of any version of the baseProduct. The relationship established by the
    AlternateProductRelationship is not symmetric: if B is an alternate product for A, A is
    not implied to be an alternate product for B. NOTE: If a product is an alternate for
    another product, it is understood that there is no interest to keep track of which
    product, the base or any alternates specified, is used as a particular instance of the
    base product within a product structure. NOTE: An organization may track design changes
    for a base part, and establish effectivity conditions for the use of that base part in
    various assemblies to be manufactured. The use of an alternate product implies that an
    organization does not specify any particular version of the alternate product nor
    establish effectivities relating to it. NOTE: An AlternateProductRelationship may relate
    products of any kind, provided both related instances of Product identify products of
    the same kind, for example part-part or document-document. NOTE: An
    AlternateProductRelationship for which the baseProduct is an assembly involves that the
    entire product structure of the alternateProduct may be used in place of the baseProduct
    and its product structure. Two bolts of the same size are products. One bolt has a
    square head and the other has a hexagonal head. The two bolts are considered equivalent
    with respect to form, fit, and function: they both have sufficiently close physical
    shape, they take up the same space when used, and they both serve to fasten two things
    together. Thus, one of these two bolts could be considered to be an alternate part for
    the other bolt.

    :ivar criteria: a text description that specifies the rationale and
        criteria used to assess the capability of replacing the
        AlternateProductRelationship by the
        AlternateProductRelationship. The concept of alternate products
        usually refers to form, fit, function, and quality. Additional
        properties such as performance, noise, endurance, or reliability
        may also be considered as a prerequisite for the replacement.
    """

    criteria: Optional["AlternateProductRelationship.Criteria"] = field(
        default=None,
        metadata={
            "name": "Criteria",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Criteria:
        localized_string: List[LocalizedString] = field(
            default_factory=list,
            metadata={
                "name": "LocalizedString",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class AnalysisModel(AnalysisModelObject):
    """
    An AnalysisModel is used to support the description of analysis concepts.

    :ivar items: The data that makes up the analysis model.
    :ivar collection_assignment:
    """

    items: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Items",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ApprovingPersonOrganization(BaseRootObject):
    """
    An ApprovingPersonOrganization is an association between an Approval and the
    organization or person and organization that has granted this approval.

    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this ApprovingPersonOrganization
        This ApprovingPersonOrganization is a member of the referenced
        class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar person_organization: the Organization or the
        PersonInOrganization that has granted the approval.
    :ivar approval_date: the point in time when the Approval has been
        given. The value of this attribute need not be specified.
    :ivar authorized_approval: the Approval that has been given by the
        considered person or the organization.
    :ivar collection_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar position_group_assignment:
    :ivar position_assignment:
    :ivar position_type_assignment:
    :ivar time_interval_assignment:
    """

    classified_as: Optional["ApprovingPersonOrganization.ClassifiedAs"] = (
        field(
            default=None,
            metadata={
                "name": "ClassifiedAs",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    same_as: Optional["ApprovingPersonOrganization.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    person_organization: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "PersonOrganization",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_date: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ApprovalDate",
            "type": "Element",
            "namespace": "",
        },
    )
    authorized_approval: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AuthorizedApproval",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    position_group_assignment: List[PositionGroupAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PositionGroupAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    position_assignment: List[PositionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PositionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    position_type_assignment: List[PositionTypeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PositionTypeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class CollectionRelationship(ProductRelationship):
    """
    An CollectionRelationship is a specialization of ProductRelationship that
    represents an association between two Collection instances.
    """


@dataclass
class CompositionOfStateDefinition(StateDefinitionRelationship):
    """A CompositionOfStateDefinition is a specialization of
    StateDefinitionRelationship.

    It relates StateDefinition entities to one another, when two or more
    StateDefinition entities act as parts to compose a whole
    StateDefinition; and furthermore, whole StateDefinition entities can
    become parts of yet another whole StateDefinition.
    """


@dataclass
class Condition(BaseRootObject):
    """A Condition is a definition of the precedent that must be fulfilled before a
    statement or relationship becomes valid.

    NOTE: The condition is defined as a
    text based expression that is represented by the description attribute. The parameters
    against which the condition is to be evaluated are identified by ConditionParameter. The
    target or consequence of a condition is represented by ConditionAssignment. "If the
    engine has been running for 10000 hours then it requires a service" is an example of a
    conditional statement. The conditional part of the statement is "If the engine has been
    running for 10000 hours" which is stored in definition attribute on Condition. The
    parameter or subject of the condition is "the engine" which is represented by a
    ConditionParameter identifying the ProductAsRealized which represents the engine. The
    consequence of the condition is "then it requires a service". This is represented by
    ConditionAssignment identifying the task to perform the service, a TaskMethod.

    :ivar id: a set of Identifiers for the Condition
    :ivar description: a set of text based descriptions of the
        Condition.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this Condition This Condition is a
        member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar parameters: the ConditionParameters that represent the
        parameters against which the condition is to be evaluated.
    :ivar analysis_assignment:
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar condition_relationship:
    """

    id: Optional["Condition.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["Condition.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["Condition.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["Condition.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    parameters: Optional["Condition.Parameters"] = field(
        default=None,
        metadata={
            "name": "Parameters",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_relationship: List[ConditionRelationship] = field(
        default_factory=list,
        metadata={
            "name": "ConditionRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Parameters:
        condition_parameter: List[ConditionParameter] = field(
            default_factory=list,
            metadata={
                "name": "ConditionParameter",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ConditionalEffectivity(Effectivity):
    """
    A ConditionalEffectivity is a specialization of Effectivity for which the
    domain of applicability is defined by an explicit condition.

    :ivar condition: the Condition that defines the domain of
        applicability.
    """

    condition: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Condition",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class ContextualItemShape(ItemShapeObject):
    """A ContextualItemShape is a specialization of ItemShape that identifies the
    shape of a product version in the context of its use in another product
    version.

    The product version whose contextual shape is identified, is the
    product version associated with the ViewDefinitionRelationship of
    the ViewDefinitionUsage. Flexible part may have several shapes, each
    associated with a particular occurrence of the part in assemblies.

    :ivar described_element: the ViewDefinitionRelationship that
        identifies the using product version and the used product
        version.
    :ivar shaped_product: the ProductViewDefinition that identifies the
        definition of the product version whose shape is considered.
    """

    described_element: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "DescribedElement",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    shaped_product: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ShapedProduct",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class DatedEffectivity(Effectivity):
    """A DatedEffectivity is a specialization of Effectivity for which the domain
    of applicability is defined as an interval of time bounded by dates or events.

    The interval may be open-ended. Events may be used to bound a
    DatedEffectivity period, at planning phase. Depending on which of
    the DatedEffectivity and DatedEffectivity attributes are specified,
    the actual domain of time defined by a DatedEffectivity is: the time
    interval between the start and end date or event; the open time
    interval that starts at the start date or event; the open time
    interval that ends at the end date or event (i.e. the start is
    unknown). If the DatedEffectivity is an event that actually
    identifies a point in time that comes before the DatedEffectivity,
    then the actual domain of effectivity is empty.
    """

    start_bound_activity: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "StartBoundActivity",
            "type": "Element",
            "namespace": "",
        },
    )
    start_bound: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "StartBound",
            "type": "Element",
            "namespace": "",
        },
    )
    end_bound_activity: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "EndBoundActivity",
            "type": "Element",
            "namespace": "",
        },
    )
    end_bound: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "EndBound",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class DistributionByValue(ProbabilityDistribution):
    """A DistributionByValue is a specialization of ProbabilityDistribution that
    explicitly lists pairs of random variable values and function values.

    NOTE:
    DistributionByValue is used where there is no named distribution which can be used to
    identify the distribution, for example, when the distribution is derived from
    observation.

    :ivar defined_function: a list of pairs consisting of a random
        variable value and the corresponding function value. This
        represents a numerical approximation to a probability
        distribution. NOTE: the value of random variable increases
        strictly monotonically along the list. The distribution is the
        probability generating function for an unfair dice ((1,0.1),
        (2,0.166),...,(6,0.23)). Here each pair represents the value on
        the face and the probability of it occurring. The probability of
        rolling a 1 or a 2 is therefore (0.1 + 0.166). The distribution
        is a cumulative distribution function for the measured length of
        a component ((2.1, 0.0), (2.2, 0.1), (2.3, 0.6), (2.4, 1.0))
        Here each pair represents a length and the probability that the
        component exceeds that length. The probability that the
        component is between 2.2m and 2.3m long is therefore 0.5 (0.6 -
        0.1).
    :ivar distribution_function: the type of function which the (random
        variable, function value) pair list represents. NOTE:
        Probabilities may be described by a number of different types of
        functions, such as the cumulative distribution function, the
        probability density function for continuous distributions or the
        probability generation function for discrete distributions. Each
        function is identified through reference-data.
    """

    defined_function: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "DefinedFunction",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    distribution_function: Optional[
        "DistributionByValue.DistributionFunction"
    ] = field(
        default=None,
        metadata={
            "name": "DistributionFunction",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class DistributionFunction:
        localized_string: List[LocalizedString] = field(
            default_factory=list,
            metadata={
                "name": "LocalizedString",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )


@dataclass
class ExpandedUncertainty(StandardUncertainty):
    """
    An ExpandedUncertainty is a specialization of StandardUncertainty that
    specifies the factor of an uncertainty.

    :ivar coverage_factor: the multiplier of the uncertainty of the
        value.
    """

    coverage_factor: Optional[float] = field(
        default=None,
        metadata={
            "name": "CoverageFactor",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class ExperienceGained(BaseRootObject):
    """
    An ExperienceGained is a relationship between an ExperienceInstance and a
    person or organization.

    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this ExperienceGained This
        ExperienceGained is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar experience_of: the ExperienceInstance undergone by a person or
        organization.
    :ivar gained_by: the person or organization that undergoes the
        ExperienceInstance.
    :ivar approval_assignment:
    :ivar collection_assignment:
    :ivar observation_assignment:
    """

    classified_as: Optional["ExperienceGained.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["ExperienceGained.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    experience_of: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ExperienceOf",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    gained_by: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "GainedBy",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ExperienceInstance(BaseRootObject):
    """An ExperienceInstance is a particular episode of contact with and/or
    observation of facts or events which contributes to the accumulation of
    knowledge or skill.

    Changing the exhaust system on a car. 2 years work on same type of
    milling machine. 100 flying hours in a Tornado jet. 5 years as
    Workshop Manager. The nature, duration and worth of the
    ExperienceInstance can be described using assigned properties or by
    referring to activities or tasks.

    :ivar id: a set of Identifiers for the ExperienceInstance
    :ivar description: a set of text based descriptions of the
        ExperienceInstance.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this ExperienceInstance This
        ExperienceInstance is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar is_defined_by: an experience instance contributes to the
        definition of the experience gained.
    :ivar consists_of: the Activity or ResourceAsRealized that provides
        the content of the ExperienceInstance. The value of the
        attribute need not be specified.
    :ivar collection_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    """

    id: Optional["ExperienceInstance.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["ExperienceInstance.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["ExperienceInstance.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["ExperienceInstance.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    is_defined_by: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "IsDefinedBy",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    consists_of: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ConsistsOf",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ExperienceType(BaseRootObject):
    """An ExperienceType is a category or class of experience.

    welding mechanical design flying

    :ivar id: a set of Identifiers for the ExperienceType
    :ivar description: a set of text based descriptions of the
        ExperienceType.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar consists_of: the ActivityMethod or RequiredResource that
        provides the content of the ExperienceType. The value of the
        attribute need not be specified.
    :ivar approval_assignment:
    :ivar collection_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar experience_type_relationship:
    """

    id: Optional["ExperienceType.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["ExperienceType.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["ExperienceType.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    consists_of: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ConsistsOf",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    experience_type_relationship: List[ExperienceTypeRelationship] = field(
        default_factory=list,
        metadata={
            "name": "ExperienceTypeRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ExternalAnalysisModel(AnalysisModelObject):
    """
    An ExternalAnalysisModel is a specialization of AnalysisModel whose content is
    provided in an external file.

    :ivar external_file: the DigitalFile that contains the analysis
        representation. The external file may be an analysis
        representation defined using AP209 in Physical File Format, or a
        tool specific format.
    :ivar collection_assignment:
    """

    external_file: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ExternalFile",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ExternalPropertyDefinition(BaseRootObject):
    """An ExternalPropertyDefinition is a reference to a property definition that
    is defined externally to the exchange file.

    A Property definition is the definition of a particular quality or
    feature of a product or activity data. A Property definition may
    reflect physics or arbitrary user defined measurements. Colour is a
    property of product and is defined by a red, green and blue values.

    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this ExternalPropertyDefinition.
        This ExternalPropertyDefinition is a member of the referenced
        class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which the
        ExternalPropertyDefinition is a proxy.
    :ivar definition: a reference to an ExternalOwlClass or an
        ExternalItem held externally to the exchange file that provides
        the definition of the ExternalPropertyDefinition.
    :ivar allowed_units:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_relationship:
    """

    classified_as: Optional["ExternalPropertyDefinition.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["ExternalPropertyDefinition.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    definition: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Definition",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    allowed_units: Optional["ExternalPropertyDefinition.AllowedUnits"] = field(
        default=None,
        metadata={
            "name": "AllowedUnits",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_relationship: List[PropertyDefinitionRelationship] = (
        field(
            default_factory=list,
            metadata={
                "name": "PropertyDefinitionRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
    )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class AllowedUnits:
        external_unit: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ExternalUnit",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class GeometricModel(BaseRootObject):
    """A GeometricModel is a model comprising geometric constructs.

    The GeometricModel is founded in a GeometricCoordinateSpace. The
    items of a GeometricModel are instances of
    DetailedGeometricModelElement.

    :ivar id: a set of Identifiers for the GeometricModel
    :ivar version_ids: a set of version identifiers for the
        GeometricModel.
    :ivar model_extent: the LengthMeasure that specifies the radius of a
        sphere that encloses all elements of the geometric model. The
        centre of the sphere is located at the origin of the
        GeometricCoordinateSpace of the GeometricModel. The value of
        this attribute need not be specified.
    :ivar context_of_items: the GeometricCoordinateSpace in which the
        GeometricModel is defined.
    :ivar items: the instances of DetailedGeometricModelElement that are
        included in the GeometricModel.
    """

    id: Optional["GeometricModel.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    version_ids: Optional["GeometricModel.VersionIds"] = field(
        default=None,
        metadata={
            "name": "VersionIds",
            "type": "Element",
            "namespace": "",
        },
    )
    model_extent: Optional[float] = field(
        default=None,
        metadata={
            "name": "ModelExtent",
            "type": "Element",
            "namespace": "",
        },
    )
    context_of_items: Optional["GeometricModel.ContextOfItems"] = field(
        default=None,
        metadata={
            "name": "ContextOfItems",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    items: Optional["GeometricModel.Items"] = field(
        default=None,
        metadata={
            "name": "Items",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class VersionIds:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ContextOfItems:
        geometric_coordinate_space: Optional[GeometricCoordinateSpace] = field(
            default=None,
            metadata={
                "name": "GeometricCoordinateSpace",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )

    @dataclass
    class Items:
        detailed_geometric_model_element: List[
            DetailedGeometricModelElement
        ] = field(
            default_factory=list,
            metadata={
                "name": "DetailedGeometricModelElement",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )


@dataclass
class GlobalLocationRepresentation(LocationRepresentation):
    """
    A GlobalLocationRepresentation is a type of LocationRepresentation specified
    using geographic means in the global system and values, which could be physical
    or political geographic values.

    :ivar altitude: specifies the height above sea-level of the
        location. The value of the attribute need not be specified.
    :ivar geographical_area: specifies the geographical, physical or
        political region of the indicated location, such as Europe,
        North America, Berlin or Indian Ocean. The precise location can
        be further detailed within refinements. The value of the
        attribute need not be specified.
    :ivar latitude: the angular distance of a place north or south of
        the equator.
    :ivar longitude: the angular distance of a place east or west of the
        Greenwich meridian.
    """

    altitude: Optional["GlobalLocationRepresentation.Altitude"] = field(
        default=None,
        metadata={
            "name": "Altitude",
            "type": "Element",
            "namespace": "",
        },
    )
    geographical_area: Optional[
        "GlobalLocationRepresentation.GeographicalArea"
    ] = field(
        default=None,
        metadata={
            "name": "GeographicalArea",
            "type": "Element",
            "namespace": "",
        },
    )
    latitude: Optional["GlobalLocationRepresentation.Latitude"] = field(
        default=None,
        metadata={
            "name": "Latitude",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    longitude: Optional["GlobalLocationRepresentation.Longitude"] = field(
        default=None,
        metadata={
            "name": "Longitude",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class Altitude:
        value_with_unit: Optional[ValueWithUnit] = field(
            default=None,
            metadata={
                "name": "ValueWithUnit",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class GeographicalArea:
        localized_string: List[LocalizedString] = field(
            default_factory=list,
            metadata={
                "name": "LocalizedString",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Latitude:
        value_with_unit: Optional[ValueWithUnit] = field(
            default=None,
            metadata={
                "name": "ValueWithUnit",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )

    @dataclass
    class Longitude:
        value_with_unit: Optional[ValueWithUnit] = field(
            default=None,
            metadata={
                "name": "ValueWithUnit",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )


@dataclass
class ItemShape(ItemShapeObject):
    """
    AnItemShape is a specialization of an ItemShapeObject  that represents the
    shape of a ShapeableItemSelect.

    :ivar described_element: specifies the role of the
        ShapeableItemSelect whose shape is the ItemShape.
    """

    described_element: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "DescribedElement",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class Justification(BaseRootObject):
    """A Justification is the identification and description of the reasons for
    something.

    Justification entities may be associated with the data to which they
    apply. A justification may be provided for a product design.
    Similarly, a justification may be provided for why an activity is
    needed or was undertaken.

    :ivar id: a set of Identifiers for the Justification
    :ivar description: a set of text based descriptions of the
        Justification.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this Justification This
        Justification is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar context_description: the text that provides information about
        the nature of the context in which the Justification applies.
        The value of the attribute need not be specified.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar justification_support_assignment:
    :ivar justification_relationship:
    """

    id: Optional["Justification.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["Justification.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["Justification.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["Justification.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    context_description: Optional["Justification.ContextDescription"] = field(
        default=None,
        metadata={
            "name": "ContextDescription",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_support_assignment: List[JustificationSupportAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "JustificationSupportAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    justification_relationship: List[JustificationRelationship] = field(
        default_factory=list,
        metadata={
            "name": "JustificationRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ContextDescription:
        localized_string: List[LocalizedString] = field(
            default_factory=list,
            metadata={
                "name": "LocalizedString",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class LotEffectivity(Effectivity):
    """
    A LotEffectivity is a specialization of Effectivity for which the domain of
    applicability is defined as a given batch of items.

    :ivar lot_id: the identification of the batch of items.
    :ivar lot_size: the size of the batch of items.
    """

    lot_id: Optional["LotEffectivity.LotId"] = field(
        default=None,
        metadata={
            "name": "LotId",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    lot_size: Optional["LotEffectivity.LotSize"] = field(
        default=None,
        metadata={
            "name": "LotSize",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class LotId:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )

    @dataclass
    class LotSize:
        value_with_unit: Optional[ValueWithUnit] = field(
            default=None,
            metadata={
                "name": "ValueWithUnit",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )


@dataclass
class Market(BaseRootObject):
    """
    A Market is the identification of a marketing segment for products.

    :ivar id: a set of Identifiers for the Market
    :ivar description: a set of text based descriptions of the Market.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this Market This Market is a
        member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar market_segment_type: the text that identifies a marketing
        category of products. 'Luxury automobiles', 'laptop personal
        computers', and 'budget personal stereos' are examples of market
        segment types. The value of this attribute need not be
        specified.
    :ivar collection_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    """

    id: Optional["Market.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["Market.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["Market.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["Market.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    market_segment_type: Optional["Market.MarketSegmentType"] = field(
        default=None,
        metadata={
            "name": "MarketSegmentType",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class MarketSegmentType:
        localized_string: List[LocalizedString] = field(
            default_factory=list,
            metadata={
                "name": "LocalizedString",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class Observation(BaseRootObject):
    """An Observation is an historical record of something that has occurred during
    the life of a product or its support environment.

    Its use is restricted to observations not directly represented in
    the data model, and should not be used where some other reporting
    data structure is defined.

    :ivar id: a set of Identifiers for the Observation
    :ivar description: a set of text based descriptions of the
        Observation.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this Observation This Observation
        is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar in_context: the context in which the observation is made. A
        problem is found during a maintenance operation. The set of
        contexts can include the equipment being maintained, the end
        product the equipment is fitted to, the activity being
        undertaken, the manual that describes the activity and the
        resources being used.
    :ivar observed_by: the person or equipment that did the observing.
        By default this is a piece of physical equipment, represented by
        ProductAsRealized. NOTE: One use of Observation is to provide a
        link between health monitoring equipment and the file it
        produces (recorded as a Document).
    :ivar observed_during: the ActivityActual that was being performed
        when the observation was made. The value of this attribute need
        not be specified. An unexpected problem may be found during a
        maintenance activity, in which case the ActivityActual is the
        maintenance activity itself. Aircraft health monitoring data is
        collected during a flight. The flight profile may be recorded
        using the ActivityActual. NOTE: Some business rules may require
        that an observation is always made against an ActivityActual,
        while others may not require that the activity be recorded.
    :ivar analysis_assignment:
    :ivar approval_assignment:
    :ivar collection_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar security_classification_assignment:
    :ivar observation_relationship:
    """

    id: Optional["Observation.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["Observation.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["Observation.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["Observation.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    in_context: Optional["Observation.InContext"] = field(
        default=None,
        metadata={
            "name": "InContext",
            "type": "Element",
            "namespace": "",
        },
    )
    observed_by: List[Reference] = field(
        default_factory=list,
        metadata={
            "name": "ObservedBy",
            "type": "Element",
            "namespace": "",
        },
    )
    observed_during: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ObservedDuring",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_relationship: List[ObservationRelationship] = field(
        default_factory=list,
        metadata={
            "name": "ObservationRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class InContext:
        activity: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Activity",
                "type": "Element",
                "namespace": "",
            },
        )
        activity_actual: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ActivityActual",
                "type": "Element",
                "namespace": "",
            },
        )
        directed_activity: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "DirectedActivity",
                "type": "Element",
                "namespace": "",
            },
        )
        activity_assignment: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ActivityAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
        activity_method: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ActivityMethod",
                "type": "Element",
                "namespace": "",
            },
        )
        scheme: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Scheme",
                "type": "Element",
                "namespace": "",
            },
        )
        scheme_entry: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SchemeEntry",
                "type": "Element",
                "namespace": "",
            },
        )
        scheme_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SchemeVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        task_element: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "TaskElement",
                "type": "Element",
                "namespace": "",
            },
        )
        end_task: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "EndTask",
                "type": "Element",
                "namespace": "",
            },
        )
        exit_loop: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ExitLoop",
                "type": "Element",
                "namespace": "",
            },
        )
        start_task: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "StartTask",
                "type": "Element",
                "namespace": "",
            },
        )
        structured_task_element: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "StructuredTaskElement",
                "type": "Element",
                "namespace": "",
            },
        )
        concurrent_elements: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ConcurrentElements",
                "type": "Element",
                "namespace": "",
            },
        )
        simultaneous_elements: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SimultaneousElements",
                "type": "Element",
                "namespace": "",
            },
        )
        decision_point: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "DecisionPoint",
                "type": "Element",
                "namespace": "",
            },
        )
        looping_element: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "LoopingElement",
                "type": "Element",
                "namespace": "",
            },
        )
        repeat_count: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RepeatCount",
                "type": "Element",
                "namespace": "",
            },
        )
        repeat_until: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RepeatUntil",
                "type": "Element",
                "namespace": "",
            },
        )
        repeat_while: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RepeatWhile",
                "type": "Element",
                "namespace": "",
            },
        )
        task_element_sequence: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "TaskElementSequence",
                "type": "Element",
                "namespace": "",
            },
        )
        task_element_levels: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "TaskElementLevels",
                "type": "Element",
                "namespace": "",
            },
        )
        task_invocation: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "TaskInvocation",
                "type": "Element",
                "namespace": "",
            },
        )
        task_step: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "TaskStep",
                "type": "Element",
                "namespace": "",
            },
        )
        advisory_task_step: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AdvisoryTaskStep",
                "type": "Element",
                "namespace": "",
            },
        )
        task_method: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "TaskMethod",
                "type": "Element",
                "namespace": "",
            },
        )
        task_method_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "TaskMethodVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        analysis_assignment: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AnalysisAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_connector_occurrence: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceConnectorOccurrence",
                "type": "Element",
                "namespace": "",
            },
        )
        product: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Product",
                "type": "Element",
                "namespace": "",
            },
        )
        analysis: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Analysis",
                "type": "Element",
                "namespace": "",
            },
        )
        attachment_slot: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AttachmentSlot",
                "type": "Element",
                "namespace": "",
            },
        )
        breakdown: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Breakdown",
                "type": "Element",
                "namespace": "",
            },
        )
        functional_breakdown: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "FunctionalBreakdown",
                "type": "Element",
                "namespace": "",
            },
        )
        physical_breakdown: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PhysicalBreakdown",
                "type": "Element",
                "namespace": "",
            },
        )
        system_breakdown: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemBreakdown",
                "type": "Element",
                "namespace": "",
            },
        )
        zone_breakdown: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ZoneBreakdown",
                "type": "Element",
                "namespace": "",
            },
        )
        breakdown_element: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "BreakdownElement",
                "type": "Element",
                "namespace": "",
            },
        )
        functional_element: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "FunctionalElement",
                "type": "Element",
                "namespace": "",
            },
        )
        physical_element: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PhysicalElement",
                "type": "Element",
                "namespace": "",
            },
        )
        system_element: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemElement",
                "type": "Element",
                "namespace": "",
            },
        )
        zone_element: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ZoneElement",
                "type": "Element",
                "namespace": "",
            },
        )
        collection: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Collection",
                "type": "Element",
                "namespace": "",
            },
        )
        document: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Document",
                "type": "Element",
                "namespace": "",
            },
        )
        environment_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "EnvironmentDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_connector: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceConnector",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_specification: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceSpecification",
                "type": "Element",
                "namespace": "",
            },
        )
        observed_environment: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ObservedEnvironment",
                "type": "Element",
                "namespace": "",
            },
        )
        part: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Part",
                "type": "Element",
                "namespace": "",
            },
        )
        product_as_individual: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductAsIndividual",
                "type": "Element",
                "namespace": "",
            },
        )
        requirement: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Requirement",
                "type": "Element",
                "namespace": "",
            },
        )
        risk: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Risk",
                "type": "Element",
                "namespace": "",
            },
        )
        system: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "System",
                "type": "Element",
                "namespace": "",
            },
        )
        product_group: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductGroup",
                "type": "Element",
                "namespace": "",
            },
        )
        product_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        analysis_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AnalysisVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        attachment_slot_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AttachmentSlotVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        attachment_slot_as_planned: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AttachmentSlotAsPlanned",
                "type": "Element",
                "namespace": "",
            },
        )
        attachment_slot_as_realized: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AttachmentSlotAsRealized",
                "type": "Element",
                "namespace": "",
            },
        )
        attachment_slot_design: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AttachmentSlotDesign",
                "type": "Element",
                "namespace": "",
            },
        )
        breakdown_element_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "BreakdownElementVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        functional_element_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "FunctionalElementVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        physical_element_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PhysicalElementVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        system_element_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemElementVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        zone_element_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ZoneElementVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        breakdown_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "BreakdownVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        functional_breakdown_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "FunctionalBreakdownVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        physical_breakdown_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PhysicalBreakdownVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        system_breakdown_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemBreakdownVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        zone_breakdown_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ZoneBreakdownVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        collection_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "CollectionVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        document_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "DocumentVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        environment_definition_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "EnvironmentDefinitionVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_connector_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceConnectorVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_connector_as_planned: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceConnectorAsPlanned",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_connector_as_realized: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceConnectorAsRealized",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_connector_design: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceConnectorDesign",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_specification_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceSpecificationVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        observed_environment_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ObservedEnvironmentVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        part_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PartVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        product_as_individual_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductAsIndividualVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        product_as_planned: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductAsPlanned",
                "type": "Element",
                "namespace": "",
            },
        )
        product_as_realized: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductAsRealized",
                "type": "Element",
                "namespace": "",
            },
        )
        requirement_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RequirementVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        risk_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RiskVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        system_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        product_view_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductViewDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        analysis_discipline_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AnalysisDisciplineDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        attachment_slot_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AttachmentSlotDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        breakdown_element_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "BreakdownElementDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        functional_element_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "FunctionalElementDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        physical_element_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PhysicalElementDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        system_element_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemElementDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        zone_element_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ZoneElementDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        collection_view_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "CollectionViewDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        document_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "DocumentDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        digital_document_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "DigitalDocumentDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        physical_document_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PhysicalDocumentDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        environment_definition_view: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "EnvironmentDefinitionView",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_connector_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceConnectorDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_specification_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceSpecificationDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        observed_environment_view: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ObservedEnvironmentView",
                "type": "Element",
                "namespace": "",
            },
        )
        part_view_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PartViewDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        product_as_individual_view: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductAsIndividualView",
                "type": "Element",
                "namespace": "",
            },
        )
        requirement_view_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RequirementViewDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        risk_view_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RiskViewDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        risk_consequence: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RiskConsequence",
                "type": "Element",
                "namespace": "",
            },
        )
        risk_perception: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RiskPerception",
                "type": "Element",
                "namespace": "",
            },
        )
        system_view_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemViewDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        required_resource: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RequiredResource",
                "type": "Element",
                "namespace": "",
            },
        )
        resource_as_realized: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ResourceAsRealized",
                "type": "Element",
                "namespace": "",
            },
        )
        resource_item: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ResourceItem",
                "type": "Element",
                "namespace": "",
            },
        )
        view_definition_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ViewDefinitionRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        assembly_view_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AssemblyViewRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        component_upper_level_identification: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ComponentUpperLevelIdentification",
                "type": "Element",
                "namespace": "",
            },
        )
        next_assembly_view_usage: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "NextAssemblyViewUsage",
                "type": "Element",
                "namespace": "",
            },
        )
        promissory_assembly_view_usage: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PromissoryAssemblyViewUsage",
                "type": "Element",
                "namespace": "",
            },
        )
        causal_consequence: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "CausalConsequence",
                "type": "Element",
                "namespace": "",
            },
        )
        environment_view_definition_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "EnvironmentViewDefinitionRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        observed_environment_view_definition_relationship: List[Reference] = (
            field(
                default_factory=list,
                metadata={
                    "name": "ObservedEnvironmentViewDefinitionRelationship",
                    "type": "Element",
                    "namespace": "",
                },
            )
        )
        related_consequence: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RelatedConsequence",
                "type": "Element",
                "namespace": "",
            },
        )
        requirement_view_definition_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RequirementViewDefinitionRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        requirement_collection_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RequirementCollectionRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        tracing_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "TracingRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        risk_perception_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RiskPerceptionRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        view_definition_usage: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ViewDefinitionUsage",
                "type": "Element",
                "namespace": "",
            },
        )
        breakdown_element_usage: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "BreakdownElementUsage",
                "type": "Element",
                "namespace": "",
            },
        )
        functional_element_usage: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "FunctionalElementUsage",
                "type": "Element",
                "namespace": "",
            },
        )
        physical_element_usage: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PhysicalElementUsage",
                "type": "Element",
                "namespace": "",
            },
        )
        system_element_usage: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemElementUsage",
                "type": "Element",
                "namespace": "",
            },
        )
        zone_element_usage: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ZoneElementUsage",
                "type": "Element",
                "namespace": "",
            },
        )
        make_from_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "MakeFromRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        product_in_attachment_slot: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductInAttachmentSlot",
                "type": "Element",
                "namespace": "",
            },
        )
        work_order: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "WorkOrder",
                "type": "Element",
                "namespace": "",
            },
        )
        work_output: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "WorkOutput",
                "type": "Element",
                "namespace": "",
            },
        )
        work_request: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "WorkRequest",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class OrganizationBasedLocationRepresentation(LocationRepresentation):
    """An OrganizationBasedLocationRepresentation is a specialization of
    LocationRepresentation that specifies a location in the context of an
    organization.

    The location "Room 99" in "The Administration Building" of a
    particular university might be represented using one instance of
    OrganizationBasedLocationRepresentation with two instances of
    OrganizationalLocationIdentification and one instance of
    Organization.

    :ivar location_identifications:
    :ivar organization_for_location: the organization in which the
        location identifier is meaningful.
    """

    location_identifications: Optional[
        "OrganizationBasedLocationRepresentation.LocationIdentifications"
    ] = field(
        default=None,
        metadata={
            "name": "LocationIdentifications",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_for_location: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "OrganizationForLocation",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class LocationIdentifications:
        organizational_location_identification: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "OrganizationalLocationIdentification",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class PersonOrOrganizationOrPersonInOrganizationInPosition(BaseRootObject):
    """A PersonOrOrganizationOrPersonInOrganizationInPosition is a Person,
    Organization, or PersonInOrganization that holds a Position.

    A person may hold more than
    one position within an organization or organizations. A person can hold two positions in
    an organization: Production Manager and Safety Officer. A position in an organization
    can be held by more than one person or organization. Two people can hold the same
    position in a job-share scheme.

    :ivar id: a set of Identifiers for the
        PersonOrOrganizationOrPersonInOrganizationInPosition
    :ivar description: a set of text based descriptions of the
        PersonOrOrganizationOrPersonInOrganizationInPosition.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this
        PersonOrOrganizationOrPersonInOrganizationInPosition This
        PersonOrOrganizationOrPersonInOrganizationInPosition is a member
        of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar person_or_organization: the Person or Organization who holds
        the Position.
    :ivar position: the Position that is held by the Person or
        Organization.
    :ivar approval_assignment:
    :ivar collection_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar
        person_or_organization_or_person_in_organization_in_position_relationship:
    """

    id: Optional["PersonOrOrganizationOrPersonInOrganizationInPosition.Id"] = (
        field(
            default=None,
            metadata={
                "name": "Id",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    description: Optional[
        "PersonOrOrganizationOrPersonInOrganizationInPosition.Description"
    ] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional[
        "PersonOrOrganizationOrPersonInOrganizationInPosition.ClassifiedAs"
    ] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional[
        "PersonOrOrganizationOrPersonInOrganizationInPosition.SameAs"
    ] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    person_or_organization: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "PersonOrOrganization",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    position: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Position",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    person_or_organization_or_person_in_organization_in_position_relationship: List[
        PersonOrOrganizationOrPersonInOrganizationInPositionRelationship
    ] = field(
        default_factory=list,
        metadata={
            "name": "PersonOrOrganizationOrPersonInOrganizationInPositionRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ProbabilityDerivationParameter(NumericalValue):
    """A ProbabilityDerivationParameter is a specialization of NumericalValue that
    is used by a ProbabilityDerived in a particular role in order to calculate the
    particular probability.

    In a coin tossing trial, the probability calculated is that of
    getting more than 6 heads in ten tosses. The parameter with the role
    "minimum number of heads" will have the value "6" NOTE: The value
    attribute, which holds the parameter value, is inherited from the
    parent generalization.
    """


@dataclass
class ProbabilityDistributionParameter(NumericalValue):
    """A ProbabilityDistributionParameter is a specialization of NumericalValue
    that is one of the set of values that characterises a probability distribution.

    The Normal (or Gaussian) distribution has, in the standard
    parameterisation, two parameters: the mean and the variance NOTE:
    For many common distributions, the mean and the variance are
    sufficient to characterize a distribution, and the parameter list
    may be empty. NOTE: ProbabilityDistributionParameter inherits the
    'name' attribute from its parent generalization, and this is used to
    identify the name of the parameter within the particular
    parameterization. The value attribute is also inherited.
    """


@dataclass
class ProbabilityFunctionValue(NumericalValue):
    """A ProbabilityFunctionValue is a specialization of NumericalValue that is the
    value of the probability function at the given random variable value.

    NOTE: The
    value is an inherited attribute. It is not in general a probability value. In some
    functions for continuous distributions, the probability that the random variable lies
    between two values is the integral of the function of that range.
    """


@dataclass
class ProbabilityNumericValue(NumericalValue):
    """A ProbabilityNumericValue is a specialization of NumericalValue providing a
    numeric representation of a probability.

    NOTE: The value attribute is
    inherited from the parent generalization.
    """


@dataclass
class ProductAsIndividualEffectivity(Effectivity):
    """
    A ProductAsIndividualEffectivity is a specialization of Effectivity for which
    the domain of applicability is defined as a set of instances of
    ProductAsIndividual.
    """

    items: Optional["ProductAsIndividualEffectivity.Items"] = field(
        default=None,
        metadata={
            "name": "Items",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class Items:
        product_as_individual: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductAsIndividual",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )


@dataclass
class ProductConfigurationHierarchicalRelationship(
    ProductConfigurationRelationship
):
    """
    A ProductConfigurationHierarchicalRelationship is a specialization of
    ProductConfigurationRelationship that is used to represent a hierarchical
    relationship between a parent ProductConfiguration and a child
    ProductConfiguration.
    """


@dataclass
class ProductConfigurationRevisionSequence(ProductConfigurationRelationship):
    """
    A ProductConfigurationRevisionSequence is a specialization of
    ProductConfigurationRelationship that is used to relate a previous version
    (predecessor) of a ProductConfiguration to the version that replaces it
    (successor).
    """


@dataclass
class ProductGroupMembership(AssociationObject):
    """
    A ProductGroupMembership is an identification of an instance of an entity
    defined in the type ProductGroupMembershipSelect that belongs to a
    ProductGroup.

    :ivar id: a set of Identifiers for the ProductGroupMembership
    :ivar member: the instance that is a member of the ProductGroup.
    :ivar of_group: the ProductGroup to which the instance identified by
        ProductGroupMembership belongs.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar project_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar requirement_assignment:
    :ivar security_classification_assignment:
    :ivar work_request_assignment:
    """

    id: Optional["ProductGroupMembership.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    member: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Member",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    of_group: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "OfGroup",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    project_assignment: List[ProjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ProjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class QualificationType(BaseRootObject):
    """A QualificationType is the identification of a definitive recognition as a
    practitioner.

    A driving licence. A qualification for executing the Ground Running
    task for RB211 engines. A Military rank such as Colonel, or Captain
    Educational qualification such as GCSE, A level, Degree, Ordinary
    National Certificate, Higher National Certificate, City and Guilds,
    or GNVQ.

    :ivar id: a set of Identifiers for the QualificationType
    :ivar description: a set of text based descriptions of the
        QualificationType.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar approval_assignment:
    :ivar collection_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar qualification_type_relationship:
    """

    id: Optional["QualificationType.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["QualificationType.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["QualificationType.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    qualification_type_relationship: List[QualificationTypeRelationship] = (
        field(
            default_factory=list,
            metadata={
                "name": "QualificationTypeRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class RandomVariable(NumericalValue):
    """A RandomVariable is a specialization of NumericalValue that is the value of
    a random variable.

    NOTE: The value attribute is inherited from the parent
    generalization.
    """


@dataclass
class RegionalGridLocationRepresentation(LocationRepresentation):
    """
    A RegionalGridLocationRepresentation is a specialization of
    LocationRepresentation that specifies a reference grid system.
    """


@dataclass
class RelatedConditionParameter(BaseRootObject):
    """A RelatedConditionParameter is a relationship between a ConditionParameter
    and a ConditionEvaluationParameter.

    This relationship is used to record the relationship between the
    parameters used to define a condition and the parameters used to
    evaluate it. The value of oil pressure (1.9 bar) used in
    ConditionEvaluation (instance 87) was a measured value of the
    parameter used to define condition 29 (oil pressure on gauge 3).

    :ivar description: a set of text based descriptions of the
        RelatedConditionParameter.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this RelatedConditionParameter
        This RelatedConditionParameter is a member of the referenced
        class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar conditon_evaluation_parameter: the
        ConditionEvaluationParameter being related.
    :ivar condition_parameter: the ConditionParameter being related.
    :ivar collection_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    """

    description: Optional["RelatedConditionParameter.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["RelatedConditionParameter.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["RelatedConditionParameter.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    conditon_evaluation_parameter: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ConditonEvaluationParameter",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    condition_parameter: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ConditionParameter",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class RequirementSource(BaseRootObject):
    """
    A RequirementSource is a relationship between a requirement (via the
    RequirementViewDefinition entity) and the data types representing the source of
    the requirement The source of the requirement "the vehicle shall have a maximum
    power output of at least 150BHP" could be a document representing the findings
    of a market survey of sports car buyers.

    :ivar id: a set of Identifiers for the RequirementSource
    :ivar description: a set of text based descriptions of the
        RequirementSource.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this RequirementSource This
        RequirementSource is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar source: the item which is the source of the requirement.
    :ivar sourced_requirement: the requirement which is to be related to
        its source.
    :ivar approval_assignment:
    :ivar collection_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar security_classification_assignment:
    """

    id: Optional["RequirementSource.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["RequirementSource.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["RequirementSource.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["RequirementSource.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    source: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Source",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    sourced_requirement: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "SourcedRequirement",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class RiskRelationship(ProductRelationship):
    """A RiskRelationship is a specialization of ProductRelationship.

    It is an association between two an association between two
    instances of Risk.
    """


@dataclass
class SchemeEntryRelationship(ActivityMethodRelationship):
    """A SchemeEntryRelationship is a specialization of ActivityMethodRelationship.

    It relates two SchemeEntry entities. An association may exists
    between SchemeEntry entities that relate to different Scheme or
    between different SchemeEntry entity instances for the same Scheme.
    NOTE: The SchemeEntryRelationship provides the ability to relate
    entries included in Plans or Schedules in different ways. By
    applying classifications on the SchemeEntryRelationship it can be
    used for different purposes. Decomposition, Dependency, and
    sequencing are examples of kinds of relationships possible between
    schema entries.
    """


@dataclass
class SchemeRelationship(ActivityMethodRelationship):
    """A SchemeRelationship is a specialization of ActivityMethodRelationship
    relating two Schemes.

    NOTE: The SchemeRelationship provides the ability to relate Plans
    or Schedules represented by the Scheme entity in different ways. If classifications are
    available to the schema using this on, by applying classifications on the
    SchemeRelationship it can be used for different purposes. Decomposition, based-on,
    alternative, version are kinds of relationships between Schemes.
    """


@dataclass
class SchemeVersionRelationship(ActivityMethodRelationship):
    """A SchemeVersionRelationship is a specialization of
    ActivityMethodRelationship relating two SchemeVersions.

    NOTE: The meaning of the
    relationship is determined by classification which is identified by the
    RelationshipObject property. The possible classifications are subclasses of .
    """


@dataclass
class SequenceOfStateDefinition(StateDefinitionRelationship):
    """A SequenceOfStateDefinition is a specialization of
    StateDefinitionRelationship.

    It defines a sequence of two or more state definitions.
    """


@dataclass
class SerialEffectivity(Effectivity):
    """
    A SerialEffectivity is a specialization of Effectivity for which the domain of
    applicability is defined as a possibly open-ended interval of serial numbers.

    :ivar start_id: the first valid serial number.
    :ivar end_id: the last valid serial number. The value of the
        attribute need not be specified. If the value for this attribute
        is not specified, the interval of applicability has no upper
        bound.
    """

    start_id: Optional["SerialEffectivity.StartId"] = field(
        default=None,
        metadata={
            "name": "StartId",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    end_id: Optional["SerialEffectivity.EndId"] = field(
        default=None,
        metadata={
            "name": "EndId",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class StartId:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )

    @dataclass
    class EndId:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ShapeElement(BaseRootObject):
    """A ShapeElement is a portion of a shape.

    The threaded portion of the shape of a bolt may be represented as a
    ShapeElement, so that other properties, such as surface finish, may
    be associated with it.

    :ivar description: a set of text based descriptions of the
        ShapeElement.
    :ivar element_name: the name of the ShapeElement. The value of this
        attribute need not be specified.
    :ivar containing_shape: the ItemShape that the ShapeElement is a
        part of.
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar shape_element_relationship:
    """

    description: Optional["ShapeElement.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    element_name: Optional["ShapeElement.ElementName"] = field(
        default=None,
        metadata={
            "name": "ElementName",
            "type": "Element",
            "namespace": "",
        },
    )
    containing_shape: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ContainingShape",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    shape_element_relationship: List[ShapeElementRelationship] = field(
        default_factory=list,
        metadata={
            "name": "ShapeElementRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ElementName:
        localized_string: List[LocalizedString] = field(
            default_factory=list,
            metadata={
                "name": "LocalizedString",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class StateAssessment(BaseRootObject):
    """
    A StateAssessment is used to determine whether the subject State is comparable
    with a particular StateDefinition.

    :ivar id: a set of Identifiers for the StateAssessment
    :ivar description: a set of text based descriptions of the
        StateAssessment.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this StateAssessment This
        StateAssessment is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar assessed_state: a subject State that will be assessed against
        a particular StateDefinition.
    :ivar comparable_state: a particular StateDefinition the subject
        State is assessed against.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar analysis_assignment:
    :ivar approval_assignment:
    :ivar condition_evaluation_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar defined_state_relationship:
    """

    id: Optional["StateAssessment.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["StateAssessment.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["StateAssessment.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["StateAssessment.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    assessed_state: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssessedState",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    comparable_state: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ComparableState",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    defined_state_relationship: List[DefinedStateRelationship] = field(
        default_factory=list,
        metadata={
            "name": "DefinedStateRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class StateAssignment(AssignmentObject):
    """
    An StateAssignment is a relationship that allows a subject to have State or to
    be in a State.

    :ivar assigned_state: a State the subject has or is in.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar requirement_assignment:
    """

    assigned_state: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedState",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class StateCauseEffectDefinition(StateDefinitionRelationship):
    """A StateCauseEffectDefinition is a specialization of
    StateDefinitionRelationship that is used to define a causal relationship
    between two sets of StateDefinition entities.

    At least one StateDefinition acts as a cause and at
    least one StateDefinition acts as a effect. NOTE: Additional causal relationships
    between states can be expressed using the following subtypes:
    AndStateCauseEffectDefinition, OrStateCauseEffectDefinition, and
    XorStateCauseEffectDefinition.
    """


@dataclass
class StateComplementDefinition(StateDefinitionRelationship):
    """A StateComplementDefinition is a specialization of
    StateDefinitionRelationship.

    It is a relationship among three sets of StateDefinition entities.
    It defines the complement of a set of StateDefinition entities
    relative to a set of StateDefinition entities that are the universe.
    NOTE: The semantics are the same as in elementary set theory. NOTE:
    The relationship between a StateDefinition and its complement is
    symmetrical.
    """

    set2: Optional["StateComplementDefinition.Set2"] = field(
        default=None,
        metadata={
            "name": "Set2",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class Set2:
        state_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "StateDefinition",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )


@dataclass
class StateDefinitionAssignment(AssignmentObject):
    """
    An StateDefinitionAssignment is a mechanism that enables an instance to have or
    to be in a StateDefinition.

    :ivar assigned_state_definition: the StateDefinition that is
        assigned.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar requirement_assignment:
    """

    assigned_state_definition: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedStateDefinition",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class StateProperSubsetDefinition(StateDefinitionRelationship):
    """A StateProperSubsetDefinition is a specialization of
    StateDefinitionRelationship.

    It is a relationship between two sets of StateDefinition entities.
    NOTE: The relationship between a state and its environment can be
    described as a StateProperSubsetDefinition. The identification of an
    intrinsic state is the properSubset. The identification of an
    extrinsic state is the properSuperset.
    """


@dataclass
class StateSubsetDefinition(StateDefinitionRelationship):
    """A StateSubsetDefinition is a specialization of StateDefinitionRelationship.

    It is a relationship between two sets of StateDefinition entities.
    NOTE: The first set may be equal to the second set.
    """


@dataclass
class StateSymptomDefinition(StateDefinitionRelationship):
    """A StateSymptomDefinition is a specialization of StateDefinitionRelationship.

    It relates two or more StateDefinition entities in regards to
    symptom, where a symptom is something that indicates the existence
    of something else. At least one StateDefinition acts as a
    symptomCause and at least one StateDefinition acts as a
    symptomEffect.
    """


@dataclass
class StateTransitionDefinition(StateDefinitionRelationship):
    """A StateTransitionDefinition is a specialization of
    StateDefinitionRelationship.

    It relates two or more StateDefinition entities before and after a
    transition in state, where at least one StateDefinition is a
    startState and at least one StateDefinition is an endState.
    """


@dataclass
class TaskElementRelationship(ActivityMethodRelationship):
    """A TaskElementRelationship is a specialization of ActivityMethodRelationship.

    It relates two instances of TaskElement. Can be used to capture a
    time dependency that cuts across the structure of the method.
    """


@dataclass
class TaskMethodRelationship(ActivityMethodRelationship):
    """A TaskMethodRelationship is a specialization of ActivityMethodRelationship.

    It relates two task methods. NOTE: The meaning of the relationship
    is determined by classification which is identified by the
    RelationshipObject property. The possible classifications are
    subclasses of .
    """


@dataclass
class TaskMethodVersionRelationship(ActivityMethodRelationship):
    """A TaskMethodVersionRelationship is a specialization of
    ActivityMethodRelationship.

    It relates two instances of TaskMethodVersion.
    """


@dataclass
class TaskObjective(BaseRootObject):
    """A TaskObjective is a result or objective that is reached by undertaking a
    TaskMethod.

    NOTE: More than one TaskMethod may be defined for a given objective, if
    there can be several ways to accomplish the objective.

    :ivar id: a set of Identifiers for the TaskObjective
    :ivar description: a set of text based descriptions of the
        TaskObjective.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this TaskObjective This
        TaskObjective is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar approval_assignment:
    :ivar certification_assignment:
    :ivar collection_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar information_usage_right_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar project_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar security_classification_assignment:
    :ivar task_objective_state_relationship:
    """

    id: Optional["TaskObjective.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["TaskObjective.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["TaskObjective.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["TaskObjective.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List[CertificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    project_assignment: List[ProjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ProjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_objective_state_relationship: List[TaskObjectiveStateRelationship] = (
        field(
            default_factory=list,
            metadata={
                "name": "TaskObjectiveStateRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class TimeIntervalEffectivity(Effectivity):
    """
    A TimeIntervalEffectivity is a specialization of Effectivity for which the
    domain of applicability is defined as a TimeInterval.

    :ivar effectivity_period: the TimeInterval that defines the domain
        of validity.
    """

    effectivity_period: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "EffectivityPeriod",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class TimeIntervalWithBounds(TimeInterval):
    """A TimeIntervalWithBounds is a specialization of TimeInterval.

    A TimeIntervalWithBounds is bounded either on one side or both
    sides. If neither secondaryBound nor NumericalValue by the
    durationFromPrimaryBound are specified, the time interval begins at
    the point in time identified by primaryBound and has no specified
    end point.

    :ivar primary_bound_activity:
    :ivar primary_bound:
    :ivar secondary_bound_activity:
    :ivar secondary_bound:
    :ivar duration_from_primary_bound: the duration that specifies the
        length of the time interval from the primary bound. If positive,
        the TimeIntervalWithBounds defines a lower bounded time
        interval, else an upper bounded time interval. The value of this
        attribute need not be specified.
    """

    primary_bound_activity: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "PrimaryBoundActivity",
            "type": "Element",
            "namespace": "",
        },
    )
    primary_bound: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "PrimaryBound",
            "type": "Element",
            "namespace": "",
        },
    )
    secondary_bound_activity: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "SecondaryBoundActivity",
            "type": "Element",
            "namespace": "",
        },
    )
    secondary_bound: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "SecondaryBound",
            "type": "Element",
            "namespace": "",
        },
    )
    duration_from_primary_bound: Optional[
        "TimeIntervalWithBounds.DurationFromPrimaryBound"
    ] = field(
        default=None,
        metadata={
            "name": "DurationFromPrimaryBound",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class DurationFromPrimaryBound:
        numerical_value: Optional[NumericalValue] = field(
            default=None,
            metadata={
                "name": "NumericalValue",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ValueLimit(NumericalValue):
    """
    A ValueLimit is a specialization of NumericalValue that specifies a qualified
    numerical value representing either the lower limit or the upper limit of a
    particular quantifiable characteristic.

    :ivar qualifier: There shall exist exactly one
        PreDefinedTypeQualifier for the ValueLimit. It shall be
        classified as 'minimum' or 'maximum'.
    """

    qualifier: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Qualifier",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class AlternatePartRelationship(AlternateProductRelationship):
    """
    An AlternatePartRelationship is a specialization of
    AlternateProductRelationship where the alternate and base products are parts.
    """

    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class AndStateCauseEffectDefinition(StateCauseEffectDefinition):
    """An AndStateCauseEffectDefinition is a specialization of
    StateCauseEffectDefinition.

    It relates one or more causing StateDefinition entities and one
    effect StateDefinition. All the causing StateDefinition entities
    must exist prior to the single effect.
    """


@dataclass
class Approval(BaseRootObject):
    """
    An Approval is a formal confirmation of the quality of some activity or product
    data.

    :ivar id: a set of Identifiers for the Approval
    :ivar description: a set of text based descriptions of the Approval.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this Approval This Approval is a
        member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar planned_date: the point in time when the Approval is or was
        supposed to be performed. The value of this attribute need not
        be specified.
    :ivar actual_date: the point in time when the Approval actually
        became valid. The value of this attribute need not be specified.
    :ivar assumption_assignment:
    :ivar collection_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar time_interval_assignment:
    :ivar approval_relationship:
    """

    id: Optional["Approval.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["Approval.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["Approval.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["Approval.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    planned_date: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "PlannedDate",
            "type": "Element",
            "namespace": "",
        },
    )
    actual_date: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ActualDate",
            "type": "Element",
            "namespace": "",
        },
    )
    assumption_assignment: List[AssumptionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AssumptionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_relationship: List[ApprovalRelationship] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class AssemblyRelationshipSubstitution(RelationshipObject):
    """An AssemblyRelationshipSubstitution is a relationship that indicates that an
    AssemblyViewRelationship may be substituted by another
    AssemblyViewRelationship.

    Both assembly relationships shall refer to the same ProductViewDefinition of the same
    assembly. NOTE: Consequently, an AssemblyRelationshipSubstitution actually specifies
    that the product version that plays the role of component in the substituteRelationship
    may be replaced by the product version that plays the role of component in the
    baseRelationship. NOTE: The instance of the substitute constituent does not require the
    same spatial relationship or the same quantity. A substitute constituent does not
    require equivalent form, fit, and function of the constituent for which it is a
    substitute. NOTE: As instances of AssemblyViewRelationship establish assembly
    relationships relevant in the definition contexts of the assembly, the substitution only
    apply in these contexts. An AssemblyRelationshipSubstitution defines a one-way
    substitution: if A is specified as a substitute for B, B is not implied to be a
    substitute for A.

    :ivar substitute_relationship: the AssemblyViewRelationship that may
        be used in place of the baseRelationship
    :ivar analysis_assignment:
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar information_usage_right_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar requirement_assignment:
    :ivar security_classification_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    """

    substitute_relationship: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "SubstituteRelationship",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Assumption(BaseRootObject):
    """An Assumption is the identification of something assumed to be true without
    proof.

    The reason or justification for an assumption being made shall be
    represented by a JustificationAssignment being assigned to the
    Assumption. An activity is planned based on the assumption that the
    resource required to perform the activity is available at a
    location. The item that is assumed shall be related to the
    Assumption by an ItemAssumed

    :ivar id: a set of Identifiers for the Assumption
    :ivar description: a set of text based descriptions of the
        Assumption.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this Assumption This Assumption is
        a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar approval_assignment:
    :ivar collection_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar time_interval_assignment:
    :ivar assumption_relationship:
    """

    id: Optional["Assumption.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["Assumption.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["Assumption.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["Assumption.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    assumption_relationship: List[AssumptionRelationship] = field(
        default_factory=list,
        metadata={
            "name": "AssumptionRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class AttachmentSlotDesignToPlanned(AssociationObject):
    """An AttachmentSlotDesignToPlanned is a relationship between a design version
    of an AttachmentSlot and a planned individual that conforms to the design.

    WeMakeBigPlanes Limited plans production of aircraft serial number
    1234 with a starboard engine attachment slot that is to conform to
    design version 1.34.

    :ivar design: the version of the attachment slot concept to which
        the planned individual will conform.
    :ivar planned: the attachment slot that is to conform to the design
        version.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar information_usage_right_assignment:
    :ivar observation_assignment:
    :ivar security_classification_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    """

    design: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Design",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    planned: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Planned",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class AttachmentSlotDesignToRealized(AssociationObject):
    """An AttachmentSlotDesignToRealized is a relationship between a design version
    of an AttachmentSlot and a realized individual that conforms to the design.

    WeMakeBigPlanes Limited builds aircraft serial number 1234 with a
    starboard engine attachment slot that conforms to design version
    1.34.

    :ivar design: the version of the concept to which the realized
        individual conforms.
    :ivar realized: the individual that conforms to the design.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar information_usage_right_assignment:
    :ivar observation_assignment:
    :ivar security_classification_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    """

    design: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Design",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    realized: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Realized",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class AttachmentSlotOnProduct(BaseRootObject):
    """An AttachmentSlotOnProduct is a relationship between a product and an
    AttachmentSlot that is a location on the product at which to install removable
    parts.

    An aircraft has a pylon mounting on a wing as a location at which to
    install various equipment. An instance of the
    AttachmentSlotOnProduct entity data type identifies which attachment
    slot corresponds to the pylon.

    :ivar id: a set of Identifiers for the AttachmentSlotOnProduct
    :ivar description: a set of text based descriptions of the
        AttachmentSlotOnProduct.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this AttachmentSlotOnProduct This
        AttachmentSlotOnProduct is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar product: the thing that associates the attachment slot
        location at which to attach parts to the product view
        definition.
    :ivar attachment_slot: a location on a product at which to attach
        parts via an aperture.
    :ivar approval_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar information_usage_right_assignment:
    :ivar observation_assignment:
    :ivar security_classification_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    """

    id: Optional["AttachmentSlotOnProduct.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["AttachmentSlotOnProduct.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["AttachmentSlotOnProduct.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["AttachmentSlotOnProduct.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    product: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Product",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    attachment_slot: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AttachmentSlot",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class AttachmentSlotPlannedToRealized(AssociationObject):
    """An AttachmentSlotPlannedToRealized is a relationship between a realized
    individual of an AttachmentSlot and a corresponding planned individual.

    WeMakeBigPlanes Limited builds aircraft serial number 2468 with a
    starboard engine attachment slot that was previously planned.

    :ivar planned: the attachment slot that relates to the realized
        individual.
    :ivar realized: the individual that relates to the planned
        individual.
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    :ivar security_classification_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    """

    planned: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Planned",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    realized: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Realized",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class BreakdownElementRealization(ProductDefinitionElementRelationship):
    """A BreakdownElementRealization is a specialization of
    ProductDefinitionElementRelationship that identifies a relationship between a
    BreakdownElementDefinition or a BreakdownElementUsage and an item that realizes
    that element definition or usage.

    A pump realizes the 'provide fuel to engine' element in a functional
    breakdown for a ship.

    :ivar id: a set of Identifiers for the BreakdownElementRealization
    :ivar date_time_assignment:
    :ivar information_usage_right_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar requirement_assignment:
    :ivar security_classification_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    """

    id: Optional["BreakdownElementRealization.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class Certification(BaseRootObject):
    """A Certification is a certificate.

    It asserts satisfaction of particular quality criteria. NOTE:
    Certification information can be attached to any aspect of product
    or activity data.

    :ivar id: a set of Identifiers for the Certification
    :ivar description: a set of text based descriptions of the
        Certification.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this Certification This
        Certification is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar approval_assignment:
    :ivar collection_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar information_usage_right_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    """

    id: Optional["Certification.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["Certification.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["Certification.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["Certification.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ElementConstraint(TaskElementRelationship):
    """An ElementConstraint is a specialization of TaskElementRelationship that
    signifies a constraint between TaskElements.

    The constraint may only apply within the context of a TaskMethod or
    TaskElement, specified as the context.

    :ivar applies_in: the TaskElement within which the constraint
        applies. The value of this attribute need not be specified.
        Within a specific method, use of test equipment must be preceded
        by calibration. Or a 30 minute wait is required between stages
        of a method.
    """

    applies_in: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AppliesIn",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Evidence(BaseRootObject):
    """An Evidence is a collector of items used together to provide a single piece
    of evidence within a validation or verification.

    For example a document and its approval by a customer may be used
    together to provide evidence of customer acceptance.

    :ivar id: a set of Identifiers for the Evidence
    :ivar description: a set of text based descriptions of the Evidence.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this Evidence This Evidence is a
        member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar supports: identifies the validation or verification for which
        this evidence has been related.
    :ivar items: the component data items used to support this evidence.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar analysis_assignment:
    :ivar approval_assignment:
    :ivar certification_assignment:
    :ivar collection_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar information_usage_right_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar security_classification_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar time_interval_assignment:
    """

    id: Optional["Evidence.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["Evidence.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["Evidence.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["Evidence.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    supports: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Supports",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    items: Optional["Evidence.Items"] = field(
        default=None,
        metadata={
            "name": "Items",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List[CertificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Items:
        activity_actual: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ActivityActual",
                "type": "Element",
                "namespace": "",
            },
        )
        activity_assignment: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ActivityAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
        activity_method: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ActivityMethod",
                "type": "Element",
                "namespace": "",
            },
        )
        scheme: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Scheme",
                "type": "Element",
                "namespace": "",
            },
        )
        scheme_entry: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SchemeEntry",
                "type": "Element",
                "namespace": "",
            },
        )
        scheme_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SchemeVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        task_element: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "TaskElement",
                "type": "Element",
                "namespace": "",
            },
        )
        end_task: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "EndTask",
                "type": "Element",
                "namespace": "",
            },
        )
        exit_loop: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ExitLoop",
                "type": "Element",
                "namespace": "",
            },
        )
        start_task: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "StartTask",
                "type": "Element",
                "namespace": "",
            },
        )
        structured_task_element: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "StructuredTaskElement",
                "type": "Element",
                "namespace": "",
            },
        )
        concurrent_elements: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ConcurrentElements",
                "type": "Element",
                "namespace": "",
            },
        )
        simultaneous_elements: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SimultaneousElements",
                "type": "Element",
                "namespace": "",
            },
        )
        decision_point: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "DecisionPoint",
                "type": "Element",
                "namespace": "",
            },
        )
        looping_element: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "LoopingElement",
                "type": "Element",
                "namespace": "",
            },
        )
        repeat_count: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RepeatCount",
                "type": "Element",
                "namespace": "",
            },
        )
        repeat_until: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RepeatUntil",
                "type": "Element",
                "namespace": "",
            },
        )
        repeat_while: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RepeatWhile",
                "type": "Element",
                "namespace": "",
            },
        )
        task_element_sequence: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "TaskElementSequence",
                "type": "Element",
                "namespace": "",
            },
        )
        task_element_levels: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "TaskElementLevels",
                "type": "Element",
                "namespace": "",
            },
        )
        task_invocation: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "TaskInvocation",
                "type": "Element",
                "namespace": "",
            },
        )
        task_step: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "TaskStep",
                "type": "Element",
                "namespace": "",
            },
        )
        advisory_task_step: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AdvisoryTaskStep",
                "type": "Element",
                "namespace": "",
            },
        )
        task_method: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "TaskMethod",
                "type": "Element",
                "namespace": "",
            },
        )
        task_method_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "TaskMethodVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        activity_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ActivityRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        activity_happening: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ActivityHappening",
                "type": "Element",
                "namespace": "",
            },
        )
        analysis_assignment: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AnalysisAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
        approval_assignment: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ApprovalAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
        certification_assignment: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "CertificationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
        classification: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )
        contract_assignment: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ContractAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
        date_time_assignment: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "DateTimeAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
        effectivity_assignment: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "EffectivityAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
        environment_assignment: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "EnvironmentAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
        information_usage_right_assignment: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InformationUsageRightAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
        justification_assignment: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "JustificationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
        justification_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "JustificationRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        justification_support_assignment: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "JustificationSupportAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
        observation_assignment: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ObservationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
        observed_environment_assignment: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ObservedEnvironmentAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
        observed_environment_to_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ObservedEnvironmentToDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        observed_environment_to_definition_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ObservedEnvironmentToDefinitionVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        observed_environment_to_definition_view: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ObservedEnvironmentToDefinitionView",
                "type": "Element",
                "namespace": "",
            },
        )
        organization_or_person_in_organization_assignment: List[Reference] = (
            field(
                default_factory=list,
                metadata={
                    "name": "OrganizationOrPersonInOrganizationAssignment",
                    "type": "Element",
                    "namespace": "",
                },
            )
        )
        person_in_organization: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PersonInOrganization",
                "type": "Element",
                "namespace": "",
            },
        )
        product: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Product",
                "type": "Element",
                "namespace": "",
            },
        )
        analysis: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Analysis",
                "type": "Element",
                "namespace": "",
            },
        )
        attachment_slot: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AttachmentSlot",
                "type": "Element",
                "namespace": "",
            },
        )
        breakdown: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Breakdown",
                "type": "Element",
                "namespace": "",
            },
        )
        functional_breakdown: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "FunctionalBreakdown",
                "type": "Element",
                "namespace": "",
            },
        )
        physical_breakdown: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PhysicalBreakdown",
                "type": "Element",
                "namespace": "",
            },
        )
        system_breakdown: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemBreakdown",
                "type": "Element",
                "namespace": "",
            },
        )
        zone_breakdown: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ZoneBreakdown",
                "type": "Element",
                "namespace": "",
            },
        )
        breakdown_element: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "BreakdownElement",
                "type": "Element",
                "namespace": "",
            },
        )
        functional_element: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "FunctionalElement",
                "type": "Element",
                "namespace": "",
            },
        )
        physical_element: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PhysicalElement",
                "type": "Element",
                "namespace": "",
            },
        )
        system_element: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemElement",
                "type": "Element",
                "namespace": "",
            },
        )
        zone_element: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ZoneElement",
                "type": "Element",
                "namespace": "",
            },
        )
        collection: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Collection",
                "type": "Element",
                "namespace": "",
            },
        )
        document: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Document",
                "type": "Element",
                "namespace": "",
            },
        )
        environment_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "EnvironmentDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_connector: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceConnector",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_specification: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceSpecification",
                "type": "Element",
                "namespace": "",
            },
        )
        observed_environment: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ObservedEnvironment",
                "type": "Element",
                "namespace": "",
            },
        )
        part: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Part",
                "type": "Element",
                "namespace": "",
            },
        )
        product_as_individual: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductAsIndividual",
                "type": "Element",
                "namespace": "",
            },
        )
        requirement: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Requirement",
                "type": "Element",
                "namespace": "",
            },
        )
        risk: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Risk",
                "type": "Element",
                "namespace": "",
            },
        )
        system: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "System",
                "type": "Element",
                "namespace": "",
            },
        )
        product_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        analysis_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AnalysisVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        attachment_slot_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AttachmentSlotVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        attachment_slot_as_planned: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AttachmentSlotAsPlanned",
                "type": "Element",
                "namespace": "",
            },
        )
        attachment_slot_as_realized: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AttachmentSlotAsRealized",
                "type": "Element",
                "namespace": "",
            },
        )
        attachment_slot_design: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AttachmentSlotDesign",
                "type": "Element",
                "namespace": "",
            },
        )
        breakdown_element_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "BreakdownElementVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        functional_element_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "FunctionalElementVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        physical_element_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PhysicalElementVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        system_element_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemElementVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        zone_element_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ZoneElementVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        breakdown_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "BreakdownVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        functional_breakdown_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "FunctionalBreakdownVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        physical_breakdown_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PhysicalBreakdownVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        system_breakdown_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemBreakdownVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        zone_breakdown_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ZoneBreakdownVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        collection_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "CollectionVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        document_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "DocumentVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        environment_definition_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "EnvironmentDefinitionVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_connector_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceConnectorVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_connector_as_planned: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceConnectorAsPlanned",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_connector_as_realized: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceConnectorAsRealized",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_connector_design: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceConnectorDesign",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_specification_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceSpecificationVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        observed_environment_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ObservedEnvironmentVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        part_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PartVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        product_as_individual_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductAsIndividualVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        product_as_planned: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductAsPlanned",
                "type": "Element",
                "namespace": "",
            },
        )
        product_as_realized: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductAsRealized",
                "type": "Element",
                "namespace": "",
            },
        )
        requirement_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RequirementVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        risk_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RiskVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        system_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        product_version_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductVersionRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        analysis_version_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AnalysisVersionRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        analysis_version_sequence: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AnalysisVersionSequence",
                "type": "Element",
                "namespace": "",
            },
        )
        collection_version_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "CollectionVersionRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        collection_version_sequence_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "CollectionVersionSequenceRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        requirement_version_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RequirementVersionRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        supplied_part_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SuppliedPartRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        system_version_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemVersionRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        system_version_sequence: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemVersionSequence",
                "type": "Element",
                "namespace": "",
            },
        )
        product_view_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductViewDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        analysis_discipline_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AnalysisDisciplineDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        attachment_slot_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AttachmentSlotDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        breakdown_element_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "BreakdownElementDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        functional_element_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "FunctionalElementDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        physical_element_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PhysicalElementDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        system_element_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemElementDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        zone_element_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ZoneElementDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        collection_view_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "CollectionViewDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        document_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "DocumentDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        digital_document_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "DigitalDocumentDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        physical_document_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PhysicalDocumentDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        environment_definition_view: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "EnvironmentDefinitionView",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_connector_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceConnectorDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_specification_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceSpecificationDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        observed_environment_view: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ObservedEnvironmentView",
                "type": "Element",
                "namespace": "",
            },
        )
        part_view_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PartViewDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        product_as_individual_view: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductAsIndividualView",
                "type": "Element",
                "namespace": "",
            },
        )
        requirement_view_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RequirementViewDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        risk_view_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RiskViewDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        risk_consequence: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RiskConsequence",
                "type": "Element",
                "namespace": "",
            },
        )
        risk_perception: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RiskPerception",
                "type": "Element",
                "namespace": "",
            },
        )
        system_view_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemViewDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        project_assignment: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProjectAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
        property_definition_assignment: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PropertyDefinitionAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
        property_value: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PropertyValue",
                "type": "Element",
                "namespace": "",
            },
        )
        probability: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Probability",
                "type": "Element",
                "namespace": "",
            },
        )
        probability_by_name: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProbabilityByName",
                "type": "Element",
                "namespace": "",
            },
        )
        probability_numeric: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProbabilityNumeric",
                "type": "Element",
                "namespace": "",
            },
        )
        probability_derived: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProbabilityDerived",
                "type": "Element",
                "namespace": "",
            },
        )
        probability_generator: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProbabilityGenerator",
                "type": "Element",
                "namespace": "",
            },
        )
        probability_distribution: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProbabilityDistribution",
                "type": "Element",
                "namespace": "",
            },
        )
        distribution_by_value: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "DistributionByValue",
                "type": "Element",
                "namespace": "",
            },
        )
        parameterized_distribution: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ParameterizedDistribution",
                "type": "Element",
                "namespace": "",
            },
        )
        string_value: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "StringValue",
                "type": "Element",
                "namespace": "",
            },
        )
        value_list: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ValueList",
                "type": "Element",
                "namespace": "",
            },
        )
        value_set: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ValueSet",
                "type": "Element",
                "namespace": "",
            },
        )
        value_with_unit: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ValueWithUnit",
                "type": "Element",
                "namespace": "",
            },
        )
        numerical_value: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "NumericalValue",
                "type": "Element",
                "namespace": "",
            },
        )
        probability_derivation_parameter: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProbabilityDerivationParameter",
                "type": "Element",
                "namespace": "",
            },
        )
        probability_distribution_parameter: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProbabilityDistributionParameter",
                "type": "Element",
                "namespace": "",
            },
        )
        probability_function_value: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProbabilityFunctionValue",
                "type": "Element",
                "namespace": "",
            },
        )
        probability_numeric_value: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProbabilityNumericValue",
                "type": "Element",
                "namespace": "",
            },
        )
        random_variable: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RandomVariable",
                "type": "Element",
                "namespace": "",
            },
        )
        value_limit: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ValueLimit",
                "type": "Element",
                "namespace": "",
            },
        )
        value_range: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ValueRange",
                "type": "Element",
                "namespace": "",
            },
        )
        value_with_tolerances: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ValueWithTolerances",
                "type": "Element",
                "namespace": "",
            },
        )
        property_value_assignment: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PropertyValueAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
        proxy: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )
        risk_impact_assignment: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RiskImpactAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
        security_classification_assignment: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SecurityClassificationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
        validation: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Validation",
                "type": "Element",
                "namespace": "",
            },
        )
        verification: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Verification",
                "type": "Element",
                "namespace": "",
            },
        )
        view_definition_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ViewDefinitionRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        assembly_view_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AssemblyViewRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        component_upper_level_identification: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ComponentUpperLevelIdentification",
                "type": "Element",
                "namespace": "",
            },
        )
        next_assembly_view_usage: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "NextAssemblyViewUsage",
                "type": "Element",
                "namespace": "",
            },
        )
        promissory_assembly_view_usage: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PromissoryAssemblyViewUsage",
                "type": "Element",
                "namespace": "",
            },
        )
        causal_consequence: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "CausalConsequence",
                "type": "Element",
                "namespace": "",
            },
        )
        environment_view_definition_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "EnvironmentViewDefinitionRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        observed_environment_view_definition_relationship: List[Reference] = (
            field(
                default_factory=list,
                metadata={
                    "name": "ObservedEnvironmentViewDefinitionRelationship",
                    "type": "Element",
                    "namespace": "",
                },
            )
        )
        related_consequence: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RelatedConsequence",
                "type": "Element",
                "namespace": "",
            },
        )
        requirement_view_definition_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RequirementViewDefinitionRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        requirement_collection_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RequirementCollectionRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        tracing_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "TracingRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        risk_perception_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RiskPerceptionRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        view_definition_usage: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ViewDefinitionUsage",
                "type": "Element",
                "namespace": "",
            },
        )
        breakdown_element_usage: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "BreakdownElementUsage",
                "type": "Element",
                "namespace": "",
            },
        )
        functional_element_usage: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "FunctionalElementUsage",
                "type": "Element",
                "namespace": "",
            },
        )
        physical_element_usage: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PhysicalElementUsage",
                "type": "Element",
                "namespace": "",
            },
        )
        system_element_usage: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemElementUsage",
                "type": "Element",
                "namespace": "",
            },
        )
        zone_element_usage: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ZoneElementUsage",
                "type": "Element",
                "namespace": "",
            },
        )
        make_from_relationship: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "MakeFromRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
        product_in_attachment_slot: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductInAttachmentSlot",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ExternalGeometricModel(GeometricModel):
    """An ExternalGeometricModel is a specialization of 3D GeometricModel whose
    content is provided in an external file.

    The set of items of the ExternalGeometricModel contains only one
    element that shall be an AxisPlacement. This AxisPlacement specifies
    the reference location and orientation with respect to which
    placement of the ExternalGeometricModel in other GeometricModels
    shall be defined.

    :ivar external_file: the DigitalFile that contains the external
        geometry information.
    """

    external_file: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ExternalFile",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class FunctionValuePair(BaseRootObject):
    """A FunctionValuePair is a single random variable/value pair, thus defining a
    single point on the distribution curve of a numerically defined distribution.
    The distribution function for the tossing of two coins uses the number of heads
    as the.

    random variable and the probability as value of the function, and has the form of a list
    of three pairs ((0, 0.25), (1, 0.5), (2, 0.25)) - 0, 1 and 2 being the random variable
    values, 0.25, 0.5 and 0.25 being the probability values.

    :ivar function_value: the value of the probability function for the
        given random variable value.
    :ivar variable_value: the value of the random variable.
    :ivar observation_assignment:
    """

    function_value: Optional["FunctionValuePair.FunctionValue"] = field(
        default=None,
        metadata={
            "name": "FunctionValue",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    variable_value: Optional["FunctionValuePair.VariableValue"] = field(
        default=None,
        metadata={
            "name": "VariableValue",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class FunctionValue:
        probability_function_value: Optional[ProbabilityFunctionValue] = field(
            default=None,
            metadata={
                "name": "ProbabilityFunctionValue",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )

    @dataclass
    class VariableValue:
        random_variable: Optional[RandomVariable] = field(
            default=None,
            metadata={
                "name": "RandomVariable",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )


@dataclass
class GeometricPlacementModel(GeometricModel):
    """
    A GeometricPlacementModel is a specialization of GeometricModel.
    """


@dataclass
class OrStateCauseEffectDefinition(StateCauseEffectDefinition):
    """An OrStateCauseEffectDefinition is a specialization of
    StateCauseEffectDefinition.

    It relates one or more StateDefinition entities that are causes to a
    StateDefinition that is the effect. At least one cause must exist
    prior to the effect.
    """


@dataclass
class ParameterizedDistribution(ProbabilityDistribution):
    """A ParameterizedDistribution is a specialization of ProbabilityDistribution
    that is used to link a named probability distribution to the parameters that
    define it.

    NOTE: The ParameterizedDistribution of this entity is used to
    discriminate between alternative parameterizations of the same distribution. NOTE: To
    calculate a value using a ParameterizedDistribution it is necessary to know the general
    distribution function, the value of the distribution function parameters, and the
    specific random variable value for which the probability evaluation is required. The
    Probability Distribution module does not define the formula for the distribution
    function, and it is assumed that this is defined externally, either through reference
    information or via a "formula" module. This entity provides the distribution function
    parameters. The value of the random variable for which the probability is calculated is
    provided by the ProbabilityDerivationParameter.

    :ivar has_parameters: the list of parameters used in the
        parameterization. NOTE: In many distributions there is a trivial
        relationship between the mean and variance for the distribution.
        In such a case it is not necessary to list the parameters.
    :ivar parameterization_name: the name of the parameterization,
        distinguishing it from other parameterizations.
    """

    has_parameters: Optional["ParameterizedDistribution.HasParameters"] = (
        field(
            default=None,
            metadata={
                "name": "HasParameters",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )
    )
    parameterization_name: Optional[
        "ParameterizedDistribution.ParameterizationName"
    ] = field(
        default=None,
        metadata={
            "name": "ParameterizationName",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class HasParameters:
        probability_distribution_parameter: List[
            ProbabilityDistributionParameter
        ] = field(
            default_factory=list,
            metadata={
                "name": "ProbabilityDistributionParameter",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )

    @dataclass
    class ParameterizationName:
        localized_string: List[LocalizedString] = field(
            default_factory=list,
            metadata={
                "name": "LocalizedString",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )


@dataclass
class ProbabilityNumeric(Probability):
    """
    A ProbabilityNumeric is a specialization of Probability that is expressed as a
    numeric value between 0 and 1.

    :ivar probability_value: the value of the probability
    """

    probability_value: Optional["ProbabilityNumeric.ProbabilityValue"] = field(
        default=None,
        metadata={
            "name": "ProbabilityValue",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class ProbabilityValue:
        probability_numeric_value: Optional[ProbabilityNumericValue] = field(
            default=None,
            metadata={
                "name": "ProbabilityNumericValue",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )


@dataclass
class ResourceAsRealizedAssignment(AssignmentObject):
    """A ResourceAsRealizedAssignment is an association of a resource record
    statement with the entity that used or consumed the resource.

    The role of the assignment is determined by classification.

    :ivar assigned_resource: the resource record that is to be
        associated with one or more activities or tasks that used or
        consumed the resource.
    :ivar approval_assignment:
    :ivar condition_evaluation_assignment:
    :ivar date_time_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    """

    assigned_resource: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedResource",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ResourceAsRealizedRelationship(RelationshipObject):
    """A ResourceAsRealizedRelationship is a relationship between the record of
    used or consumed resources and the corresponding statement of RequiredResource.

    "Alternative" and "Corresponding" are examples of classifications of
    resource as realized relationship. NOTE: A resource used or consumed
    can be recorded without having a corresponding resource requirement
    statement.

    :ivar related: the other instance of that is a part of the
        relationship. If one element of the relationship is dependent
        upon the other, this attribute shall be the dependent one.
    :ivar condition_evaluation_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ResourceEventCorrespondenceRelationship(RelationshipObject):
    """A ResourceEventCorrespondenceRelationship is an association of a resource
    event and a corresponding statement of RequiredResource.

    The meaning of the relationship is determined by classification.
    NOTE: A resource event can be planned or recorded without having a
    corresponding resource requirement statement. A resource event
    correspondence relationship can be classified as "Designated for".

    :ivar related: the instance of RequiredResource being related.
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ResourceEventRelationship(RelationshipObject):
    """A ResourceEventRelationship is a specification of how an ResourceEvent may
    be associated with another ResourceEvent.

    The meaning of the relationship is determined by classification. A
    managed resource relationship can be classified as "realized by" or
    "replaces".

    :ivar related: the other instance of ResourceEvent that is a part of
        the relationship. If one element of the relationship is
        dependent upon the other then this attribute shall be the
        dependent one.
    :ivar analysis_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ResourceItemAssignment(AssignmentObject):
    """A ResourceItemAssignment is an association of a resource item with some
    product information.

    The role of the assignment is determined by classification. The
    assignment can be classified as "applicable to" or "acquired for".

    :ivar assigned_resource: the resource item that is to be associated
        with an item.
    :ivar approval_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    """

    assigned_resource: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedResource",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ResourceItemRealization(AssociationObject):
    """A ResourceItemRealization is a specification of how a resource item may be
    associated with an item that serves as the resource.

    A product may serve as a resource.

    :ivar id: a set of Identifiers for the ResourceItemRealization
    :ivar item: the item that is to be associated with the resource that
        it serves as.
    :ivar resource_item: the resource that is to be associated with an
        item that serves as that resource.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar condition_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    """

    id: Optional["ResourceItemRealization.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    item: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Item",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    resource_item: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ResourceItem",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ResourceItemRelationship(RelationshipObject):
    """A ResourceItemRelationship is a specification of how a resource item may be
    associated with another resource item.

    The role of the relationship is determined by classification. The
    relationship between a product and a package can be classified as
    "Preferred".

    :ivar id: a set of Identifiers for the ResourceItemRelationship
    :ivar related: the other instance of ResourceItem that is a part of
        the relationship. If one element of the relationship is
        dependent upon the other, this attribute shall be the dependent
        one.
    :ivar analysis_assignment:
    :ivar approval_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    """

    id: Optional["ResourceItemRelationship.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class RiskEvent(AssignmentObject):
    """A RiskEvent is a specialization of an AssignmentObject that represents the
    unwanted (or wanted) event resulting in the RiskPerception.

    The probability of the
    event occurring is represented by a set of probabilities referenced from
    RiskEvent.probabilityRepresentations. If more than one probability is provided each
    probability shall be equivalent. NOTE: The definition attribute of the
    probabilityRepresentations shall refer to a definition for perceivedProbability. The
    definition attribute of the probabilityRepresentations could refer to an
    ExternalPropertyDefinition that uses an ExternalOwlObject with individual set to
    "http://docs.oasis-open.org/plcs/ns/plcslib/v1.0/data/contexts/OASIS/refdata/plcs-rdl#Perceived_Probability".

    :ivar assigned_activity_method: the ActivityMethod that defines the
        event.
    :ivar probability_representations: the probability representations
        of the risk event occurring.
    :ivar approval_assignment:
    :ivar certification_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar project_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar requirement_assignment:
    :ivar security_classification_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    """

    assigned_activity_method: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedActivityMethod",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    probability_representations: Optional[
        "RiskEvent.ProbabilityRepresentations"
    ] = field(
        default=None,
        metadata={
            "name": "ProbabilityRepresentations",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List[CertificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    project_assignment: List[ProjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ProjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class ProbabilityRepresentations:
        probability: List[Probability] = field(
            default_factory=list,
            metadata={
                "name": "Probability",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class SecurityClassification(BaseRootObject):
    """
    A SecurityClassification is a level of confidentiality that can be applied to
    protect activity or product data against unauthorized usage.

    :ivar id: a set of Identifiers for the SecurityClassification
    :ivar description: a set of text based descriptions of the
        SecurityClassification.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar definition: a reference to an ExternalOwlClass or an
        ExternalItem held externally to the exchange file that provides
        the definition of the SecurityClassification.
    :ivar approval_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar information_usage_right_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar time_interval_assignment:
    """

    id: Optional["SecurityClassification.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["SecurityClassification.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["SecurityClassification.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    definition: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Definition",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class SequencingRelationship(SchemeEntryRelationship):
    """A SequencingRelationship is a specialization of SchemeEntryRelationship.

    It defines a specific type of sequencing and relative timing for two
    SchemeEntry. NOTE: Specific types of sequencing could include start-
    start, finish-start.

    :ivar time_lag: the amount of time, either positive or negative,
        before the sequencing applies between the
        SchemeEntryRelationship and the SchemeEntryRelationship. The
        value of this attribute need not be specified. NOTE: For a
        positive timeLag, the SchemeEntryRelationship is the later entry
        in time.
    """

    time_lag: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "TimeLag",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TaskElementAssignment(AssignmentObject):
    """A TaskElementAssignment is a specialization of an AssignmentObject that
    represents the assignment of TaskElement instances to instances that are
    specializations of TaskAssignmentSelect.

    NOTE: The meaning of the assignment is determined by
    classification which is identified by the AssignmentObject property. The possible
    classifications are subclasses of .

    :ivar assigned_task_element: the TaskElement that is assigned.
    :ivar approval_assignment:
    :ivar certification_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar project_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar requirement_assignment:
    :ivar security_classification_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar work_output_assignment:
    """

    assigned_task_element: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedTaskElement",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List[CertificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    project_assignment: List[ProjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ProjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_output_assignment: List["WorkOutputAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "WorkOutputAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TaskMethodAssignment(AssignmentObject):
    """A TaskMethodAssignment is a specialization of an AssignmentObject that
    represents the assignment of TaskMethod instances to instances that are
    specializations of TaskAssignmentSelect.

    NOTE: The meaning of the assignment is determined by
    classification which is identified by the AssignmentObject property. The possible
    classifications are subclasses of .

    :ivar assigned_task_method: the TaskMethod being assigned.
    :ivar approval_assignment:
    :ivar certification_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar project_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar required_resource_assignment:
    :ivar requirement_assignment:
    :ivar security_classification_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar work_output_assignment:
    """

    assigned_task_method: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedTaskMethod",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List[CertificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    project_assignment: List[ProjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ProjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    required_resource_assignment: List[RequiredResourceAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequiredResourceAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_output_assignment: List["WorkOutputAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "WorkOutputAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TaskMethodVersionAssignment(AssignmentObject):
    """A TaskMethodVersionAssignment is a specialization of an AssignmentObject
    that represents the assignment of TaskMethodVersion instances to instances that
    are specializations of TaskAssignmentSelect.

    NOTE: The meaning of the
    assignment is determined by classification which is identified by the AssignmentObject
    property. The possible classifications are subclasses of .

    :ivar assigned_task_method: the TaskMethodVersion that is assigned.
    :ivar approval_assignment:
    :ivar certification_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar project_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar required_resource_assignment:
    :ivar requirement_assignment:
    :ivar security_classification_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar work_output_assignment:
    """

    assigned_task_method: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedTaskMethod",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List[CertificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    project_assignment: List[ProjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ProjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    required_resource_assignment: List[RequiredResourceAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequiredResourceAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_output_assignment: List["WorkOutputAssignment"] = field(
        default_factory=list,
        metadata={
            "name": "WorkOutputAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Validation(BaseRootObject):
    """A Validation is a subjective assertion that an item is "fit for purpose".

    Evidence used in this validation is identified by the inverse attribute
    validatedBy. Validation is commonly understood to mean "Have we built the right
    system?". Validation is concerned with ensuring that the system will meet the customer’s
    objectives and expectations. Validation usually includes testing under normal usage
    conditions. NOTE: An item may pass validation even though some requirements fail
    verification. NOTE: It is assumed that meta data supporting the validation will be
    applied using assignment entities, such as identification assignment, person and
    organization assignment etc.. Every flight of every Space Shuttle has been a
    "Validation" flight to test the new design under actual conditions. No two shuttles have
    flown in the same configuration and many systems cannot be validated except under actual
    conditions.

    :ivar id: a set of Identifiers for the Validation
    :ivar description: a set of text based descriptions of the
        Validation.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this Validation This Validation is
        a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar validates: identifies the item which is been validated by this
        entity.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar analysis_assignment:
    :ivar approval_assignment:
    :ivar collection_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar information_usage_right_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar requirement_assignment:
    :ivar security_classification_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar time_interval_assignment:
    """

    id: Optional["Validation.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["Validation.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["Validation.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["Validation.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    validates: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Validates",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class Verification(BaseRootObject):
    """A Verification is an objective assertion of a claim that requirement is
    satisfied by a particular item represented in a RequirementSatisfiedBy has been
    verified.

    The evidence used in this verification is identified by the inverse attribute
    verifiedBy. Verification is commonly understood to mean "Have we built the system
    right?". Verification ensures that the specified requirements have been met.
    Verification uses the methods of Test, Analysis, Inspection, Demonstration, Similarity.
    NOTE: Just because an item is verified does not ensure that it meets all stakeholder
    needs or expectations, many of these are never specified are of an un-testable nature
    e.g. "the car should look sporty". NOTE: It is assumed that meta data supporting the
    verification will be applied using assignment entities, such as identification
    assignment, person and organization assignment etc.. A data type used to represent a
    vehicle's engine with a power output of 160BHP could be asserted to satisfy a
    requirement "the vehicle shall have a maximum power output of at least 150BHP". This
    assertion may be verified by analysis results on simulations of the engine. In this case
    the analysis results would be identified in the items collection of an evidence
    instance, possibly including the approval of the analysis. The evidence instance would
    identify that it is used to support the required verification.

    :ivar id: a set of Identifiers for the Verification
    :ivar description: a set of text based descriptions of the
        Verification.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this Verification This
        Verification is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar verifies: the claimed requirement satisfaction by a particular
        item which is been verified by this entity.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar analysis_assignment:
    :ivar approval_assignment:
    :ivar collection_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar information_usage_right_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar requirement_assignment:
    :ivar security_classification_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar time_interval_assignment:
    :ivar verification_relationship:
    """

    id: Optional["Verification.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["Verification.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["Verification.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["Verification.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    verifies: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Verifies",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    verification_relationship: List[VerificationRelationship] = field(
        default_factory=list,
        metadata={
            "name": "VerificationRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class WorkOrder(BaseRootObject):
    """A WorkOrder is an authoritative instrument which provides directions to
    achieve the specified results.

    A WorkOrder is the authorization for one or more Activity instances
    to be performed.

    :ivar id: a set of Identifiers for the WorkOrder
    :ivar description: a set of text based descriptions of the
        WorkOrder.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this WorkOrder This WorkOrder is a
        member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar in_response_to:
    :ivar approval_assignment:
    :ivar assumption_assignment:
    :ivar collection_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    """

    id: Optional["WorkOrder.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["WorkOrder.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["WorkOrder.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["WorkOrder.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    in_response_to: Optional["WorkOrder.InResponseTo"] = field(
        default=None,
        metadata={
            "name": "InResponseTo",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    assumption_assignment: List[AssumptionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AssumptionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class InResponseTo:
        work_request: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "WorkRequest",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class WorkRequest(BaseRootObject):
    """A WorkRequest is the solicitation for some work to be done.

    NOTE: These
    requests may not be acted upon depending on the authorization granted to the request or
    its associated WorkOrder.

    :ivar id: a set of Identifiers for the WorkRequest
    :ivar description: a set of text based descriptions of the
        WorkRequest.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this WorkRequest This WorkRequest
        is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar version_id: the identification of the version of the
        WorkRequest.
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar assumption_assignment:
    :ivar collection_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar requirement_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar work_request_relationship:
    """

    id: Optional["WorkRequest.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    description: Optional["WorkRequest.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["WorkRequest.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["WorkRequest.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    version_id: Optional["WorkRequest.VersionId"] = field(
        default=None,
        metadata={
            "name": "VersionId",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    assumption_assignment: List[AssumptionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AssumptionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_relationship: List[WorkRequestRelationship] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class VersionId:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class XorStateCauseEffectDefinition(StateCauseEffectDefinition):
    """An XorStateCauseEffectDefinition is a specialization of
    StateCauseEffectDefinition.

    It relates one of the single or many causing state definition(s) and
    one effect StateDefinition, whereby any and only one of the causing
    state definitions exists prior to the single effect to take place.
    """


@dataclass
class Envelope(BaseRootObject):
    """An Envelope is an historical record of the transmission of a Message.

    It is used to record the audit data for sending and acknowledging a
    Message. Because it is an historical record, each Envelope is only
    used once, and so is not versioned.

    :ivar id: a set of Identifiers for the Envelope
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this Envelope This Envelope is a
        member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar acknowledge: the request for and acknowledgement of receipt of
        the Envelope. The value of this attribute need not be specified.
        On transmission of a Message this attribute shall take one of
        the values "" (blank), "ask message arrival" or "ask message
        read". A blank value expects no reply. A value of "ask message
        arrival" asks if the Message arrived at the recipients' mailbox,
        and requires the reply Envelope to have values "acknowledge
        arrival" if the Message arrives at the destination, or "delivery
        failure" if failure of the delivery is detected. NOTE: Envelope
        is used to provide an audit trail. There is no assumption that
        the transmission system has any knowledge of Envelope or its
        usage. However, if it reports some failure, this can then be
        recorded in the way described. A value of "ask message read"
        asks if the recipient has actually opened the Message to read
        it, and expects the reply "acknowledge read" on success, or
        "contents corrupt" if it is not possible to for it to be read.
        NOTE: For any single Envelope, there should be an
        acknowledgement per recipient. The acknowledgement will not
        contain a Message. NOTE: The Envelope being acknowledged is
        referenced using an EnvelopeRelationship.
    :ivar wrapping: the Message that the Envelope is wrapping. A Message
        should be present unless the Envelope is being used to carry an
        acknowledgement. The value of this attribute need not be
        specified.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar security_classification_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    :ivar envelope_relationship:
    """

    id: Optional["Envelope.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["Envelope.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["Envelope.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    acknowledge: Optional["Envelope.Acknowledge"] = field(
        default=None,
        metadata={
            "name": "Acknowledge",
            "type": "Element",
            "namespace": "",
        },
    )
    wrapping: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Wrapping",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    envelope_relationship: List[EnvelopeRelationship] = field(
        default_factory=list,
        metadata={
            "name": "EnvelopeRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Acknowledge:
        localized_string: List[LocalizedString] = field(
            default_factory=list,
            metadata={
                "name": "LocalizedString",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class File(BaseObject):
    """
    A File is a file stored on a computer system or in a stack of non-digital
    documents.

    :ivar id: a set of Identifiers for the File
    :ivar version_ids: a set of version identifiers for the File.
    :ivar contained_data_type: a string that provides information about
        the kind of data stored in the file. The value of this attribute
        need not be specified. Where applicable, the following values
        shall be used: 'geometry': The file contains a shape model; 'NC
        data': The file contains numerical control data; 'FE data': The
        file contains finite element data; 'sample data': The file
        represents measured data; 'process plan': The document file
        represents process planning data; 'check plan': The document
        file represents quality control planning data; 'drawing': The
        document file represents a technical drawing.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this File This File is a member of
        the referenced class.
    :ivar locations:
    :ivar description: a set of text based descriptions of the File.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar effectivity_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    :ivar work_request_assignment:
    :ivar file_relationship:
    """

    id: Optional["File.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    version_ids: Optional["File.VersionIds"] = field(
        default=None,
        metadata={
            "name": "VersionIds",
            "type": "Element",
            "namespace": "",
        },
    )
    contained_data_type: Optional["File.ContainedDataType"] = field(
        default=None,
        metadata={
            "name": "ContainedDataType",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["File.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    locations: Optional["File.Locations"] = field(
        default=None,
        metadata={
            "name": "Locations",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["File.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    file_relationship: List[FileRelationship] = field(
        default_factory=list,
        metadata={
            "name": "FileRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class VersionIds:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ContainedDataType:
        classification: Optional[Classification] = field(
            default=None,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Locations:
        external_item: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ExternalItem",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class InterfaceConnection(BaseRootObject):
    """A InterfaceConnection is an interconnection between a connected pair of
    InterfaceConnectorOccurrences.

    Each InterfaceConnectorOccurrence represents the place where a
    product used in an assembly can interact with other products in the
    assembly. An appliance such as a television has a power lead and
    attached plug. The plug and power lead could be represented as an
    assembly of parts such as the plug pins and wires. Each connection
    point of the pins and wires in the assembly is represented by a
    InterfaceConnectorOccurrence and an instance of the
    InterfaceConnection entity data type identifies the connection of
    the pins to the wires in the assembly.

    :ivar id: a set of Identifiers for the InterfaceConnection
    :ivar description: a set of text based descriptions of the
        InterfaceConnection.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this InterfaceConnection This
        InterfaceConnection is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar connecting: one of the instances of the connected pair of
        InterfaceConnectorOccurrences.
    :ivar connected: the other instance of the connected pair of
        InterfaceConnectorOccurrences. If one element of the
        relationship is dependent upon the other, this attribute shall
        be the dependent one.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar analysis_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar certification_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar information_usage_right_assignment:
    :ivar justification_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar security_classification_assignment:
    :ivar selected_item_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    :ivar work_request_assignment:
    """

    id: Optional["InterfaceConnection.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["InterfaceConnection.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["InterfaceConnection.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["InterfaceConnection.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    connecting: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Connecting",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    connected: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Connected",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List[CertificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    selected_item_assignment: List[SelectedItemAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SelectedItemAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class InterfaceConnectorOccurrence(BaseRootObject):
    """A InterfaceConnectorOccurrence is an occurrence of a
    InterfaceConnectorDefinition.

    The InterfaceConnectorOccurrence represents the place where a
    product used in an assembly can interact with other products in the
    assembly. The interaction is represented by a InterfaceConnection.

    :ivar id: a set of Identifiers for the InterfaceConnectorOccurrence
    :ivar description: a set of text based descriptions of the
        InterfaceConnectorOccurrence.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this InterfaceConnectorOccurrence
        This InterfaceConnectorOccurrence is a member of the referenced
        class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar occurrence_of: the InterfaceConnectorDefinition of which the
        InterfaceConnectorOccurrence is an occurrence of.
    :ivar connector_on: the item for which the
        InterfaceConnectorOccurrence provides an interface capability.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar analysis_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar information_usage_right_assignment:
    :ivar justification_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar requirement_assignment:
    :ivar security_classification_assignment:
    :ivar selected_item_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    :ivar work_request_assignment:
    """

    id: Optional["InterfaceConnectorOccurrence.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["InterfaceConnectorOccurrence.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["InterfaceConnectorOccurrence.ClassifiedAs"] = (
        field(
            default=None,
            metadata={
                "name": "ClassifiedAs",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    same_as: Optional["InterfaceConnectorOccurrence.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    occurrence_of: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "OccurrenceOf",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    connector_on: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ConnectorOn",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    selected_item_assignment: List[SelectedItemAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SelectedItemAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class InterfaceDefinitionConnection(BaseRootObject):
    """A InterfaceDefinitionConnection is an interconnection between a connected
    pair of InterfaceConnectorDefinitions or, if the point of interconnection is
    not specified, the interconnection between a pair of views (
    ProductViewDefinitions) on products A socket in the wall provides access to the
    domestic electricity supply.

    An appliance such as a television has a power lead and plug that
    fits into the socket. An instance of the
    InterfaceDefinitionConnection entity data type identifies this
    fitting of the plug into the socket.

    :ivar id: a set of Identifiers for the InterfaceDefinitionConnection
    :ivar description: a set of text based descriptions of the
        InterfaceDefinitionConnection.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this InterfaceDefinitionConnection
        This InterfaceDefinitionConnection is a member of the referenced
        class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar connecting: one of the instances of the connected pair of
        InterfaceConnectorDefinitions, or if the point of
        interconnection is not specified, the interconnection between a
        pair of ProductViewDefinitions.
    :ivar connected: the other instance of the connected pair of
        InterfaceConnectorDefinitions or ProductViewDefinitions. If one
        element of the relationship is dependent upon the other, this
        attribute shall be the dependent one.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar analysis_assignment:
    :ivar activity_method_assignment:
    :ivar certification_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar information_usage_right_assignment:
    :ivar justification_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar security_classification_assignment:
    :ivar selected_item_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    :ivar work_request_assignment:
    """

    id: Optional["InterfaceDefinitionConnection.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["InterfaceDefinitionConnection.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["InterfaceDefinitionConnection.ClassifiedAs"] = (
        field(
            default=None,
            metadata={
                "name": "ClassifiedAs",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    same_as: Optional["InterfaceDefinitionConnection.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    connecting: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Connecting",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    connected: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Connected",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List[CertificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    selected_item_assignment: List[SelectedItemAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SelectedItemAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class Message(BaseRootObject):
    """A Message is a collection of information, brought together by an originator
    (the message definer) for some particular purpose, generally the fulfillment of
    a process.

    A Message is an historical record, intended to be sent using an
    Envelope and in consequence, is not versioned. NOTE: The same
    Message can be sent several times using different Envelope. Once it
    has been sent once, it cannot be further changed. However it should
    not remain unsent, since that is to confuse its functions and
    therefore its meaning with other entities such as one of the types
    of document.

    :ivar id: a set of Identifiers for the Message
    :ivar description: a set of text based descriptions of the Message.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this Message This Message is a
        member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar contains: the actual contents of the Message or a reference to
        the contents.
    :ivar defined_by: the identification of who ( Organization or
        PersonInOrganization) or what defined the message, that is,
        identified its purpose and contents. The value of this attribute
        need not be specified.
    :ivar exchange_context_class_library: the
        ExchangeContextClassLibrary that identifies the OWL class
        library used in the exchange. This OWL class library may
        reference any other OWL libraries that are required.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar information_usage_right_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar security_classification_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    :ivar message_relationship:
    """

    id: Optional["Message.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["Message.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["Message.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["Message.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    contains: Optional["Message.Contains"] = field(
        default=None,
        metadata={
            "name": "Contains",
            "type": "Element",
            "namespace": "",
        },
    )
    defined_by: Optional["Message.DefinedBy"] = field(
        default=None,
        metadata={
            "name": "DefinedBy",
            "type": "Element",
            "namespace": "",
        },
    )
    exchange_context_class_library: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ExchangeContextClassLibrary",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    message_relationship: List[MessageRelationship] = field(
        default_factory=list,
        metadata={
            "name": "MessageRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Contains:
        activity: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Activity",
                "type": "Element",
                "namespace": "",
            },
        )
        activity_actual: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ActivityActual",
                "type": "Element",
                "namespace": "",
            },
        )
        directed_activity: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "DirectedActivity",
                "type": "Element",
                "namespace": "",
            },
        )
        activity_method: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ActivityMethod",
                "type": "Element",
                "namespace": "",
            },
        )
        scheme: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Scheme",
                "type": "Element",
                "namespace": "",
            },
        )
        scheme_entry: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SchemeEntry",
                "type": "Element",
                "namespace": "",
            },
        )
        scheme_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SchemeVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        task_element: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "TaskElement",
                "type": "Element",
                "namespace": "",
            },
        )
        end_task: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "EndTask",
                "type": "Element",
                "namespace": "",
            },
        )
        exit_loop: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ExitLoop",
                "type": "Element",
                "namespace": "",
            },
        )
        start_task: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "StartTask",
                "type": "Element",
                "namespace": "",
            },
        )
        structured_task_element: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "StructuredTaskElement",
                "type": "Element",
                "namespace": "",
            },
        )
        concurrent_elements: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ConcurrentElements",
                "type": "Element",
                "namespace": "",
            },
        )
        simultaneous_elements: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SimultaneousElements",
                "type": "Element",
                "namespace": "",
            },
        )
        decision_point: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "DecisionPoint",
                "type": "Element",
                "namespace": "",
            },
        )
        looping_element: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "LoopingElement",
                "type": "Element",
                "namespace": "",
            },
        )
        repeat_count: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RepeatCount",
                "type": "Element",
                "namespace": "",
            },
        )
        repeat_until: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RepeatUntil",
                "type": "Element",
                "namespace": "",
            },
        )
        repeat_while: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RepeatWhile",
                "type": "Element",
                "namespace": "",
            },
        )
        task_element_sequence: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "TaskElementSequence",
                "type": "Element",
                "namespace": "",
            },
        )
        task_element_levels: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "TaskElementLevels",
                "type": "Element",
                "namespace": "",
            },
        )
        task_invocation: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "TaskInvocation",
                "type": "Element",
                "namespace": "",
            },
        )
        task_step: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "TaskStep",
                "type": "Element",
                "namespace": "",
            },
        )
        advisory_task_step: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AdvisoryTaskStep",
                "type": "Element",
                "namespace": "",
            },
        )
        task_method: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "TaskMethod",
                "type": "Element",
                "namespace": "",
            },
        )
        task_method_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "TaskMethodVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        approval: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Approval",
                "type": "Element",
                "namespace": "",
            },
        )
        certification: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Certification",
                "type": "Element",
                "namespace": "",
            },
        )
        contract: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Contract",
                "type": "Element",
                "namespace": "",
            },
        )
        digital_file: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "DigitalFile",
                "type": "Element",
                "namespace": "",
            },
        )
        location: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Location",
                "type": "Element",
                "namespace": "",
            },
        )
        managed_resource: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ManagedResource",
                "type": "Element",
                "namespace": "",
            },
        )
        observation: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Observation",
                "type": "Element",
                "namespace": "",
            },
        )
        organization: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Organization",
                "type": "Element",
                "namespace": "",
            },
        )
        person: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Person",
                "type": "Element",
                "namespace": "",
            },
        )
        product: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Product",
                "type": "Element",
                "namespace": "",
            },
        )
        analysis: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Analysis",
                "type": "Element",
                "namespace": "",
            },
        )
        attachment_slot: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AttachmentSlot",
                "type": "Element",
                "namespace": "",
            },
        )
        breakdown: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Breakdown",
                "type": "Element",
                "namespace": "",
            },
        )
        functional_breakdown: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "FunctionalBreakdown",
                "type": "Element",
                "namespace": "",
            },
        )
        physical_breakdown: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PhysicalBreakdown",
                "type": "Element",
                "namespace": "",
            },
        )
        system_breakdown: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemBreakdown",
                "type": "Element",
                "namespace": "",
            },
        )
        zone_breakdown: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ZoneBreakdown",
                "type": "Element",
                "namespace": "",
            },
        )
        breakdown_element: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "BreakdownElement",
                "type": "Element",
                "namespace": "",
            },
        )
        functional_element: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "FunctionalElement",
                "type": "Element",
                "namespace": "",
            },
        )
        physical_element: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PhysicalElement",
                "type": "Element",
                "namespace": "",
            },
        )
        system_element: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemElement",
                "type": "Element",
                "namespace": "",
            },
        )
        zone_element: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ZoneElement",
                "type": "Element",
                "namespace": "",
            },
        )
        collection: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Collection",
                "type": "Element",
                "namespace": "",
            },
        )
        document: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Document",
                "type": "Element",
                "namespace": "",
            },
        )
        environment_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "EnvironmentDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_connector: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceConnector",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_specification: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceSpecification",
                "type": "Element",
                "namespace": "",
            },
        )
        observed_environment: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ObservedEnvironment",
                "type": "Element",
                "namespace": "",
            },
        )
        part: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Part",
                "type": "Element",
                "namespace": "",
            },
        )
        product_as_individual: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductAsIndividual",
                "type": "Element",
                "namespace": "",
            },
        )
        requirement: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Requirement",
                "type": "Element",
                "namespace": "",
            },
        )
        risk: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Risk",
                "type": "Element",
                "namespace": "",
            },
        )
        system: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "System",
                "type": "Element",
                "namespace": "",
            },
        )
        product_concept: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductConcept",
                "type": "Element",
                "namespace": "",
            },
        )
        product_configuration: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductConfiguration",
                "type": "Element",
                "namespace": "",
            },
        )
        product_group: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductGroup",
                "type": "Element",
                "namespace": "",
            },
        )
        product_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        analysis_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AnalysisVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        attachment_slot_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AttachmentSlotVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        attachment_slot_as_planned: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AttachmentSlotAsPlanned",
                "type": "Element",
                "namespace": "",
            },
        )
        attachment_slot_as_realized: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AttachmentSlotAsRealized",
                "type": "Element",
                "namespace": "",
            },
        )
        attachment_slot_design: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AttachmentSlotDesign",
                "type": "Element",
                "namespace": "",
            },
        )
        breakdown_element_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "BreakdownElementVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        functional_element_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "FunctionalElementVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        physical_element_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PhysicalElementVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        system_element_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemElementVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        zone_element_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ZoneElementVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        breakdown_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "BreakdownVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        functional_breakdown_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "FunctionalBreakdownVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        physical_breakdown_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PhysicalBreakdownVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        system_breakdown_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemBreakdownVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        zone_breakdown_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ZoneBreakdownVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        collection_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "CollectionVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        document_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "DocumentVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        environment_definition_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "EnvironmentDefinitionVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_connector_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceConnectorVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_connector_as_planned: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceConnectorAsPlanned",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_connector_as_realized: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceConnectorAsRealized",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_connector_design: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceConnectorDesign",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_specification_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceSpecificationVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        observed_environment_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ObservedEnvironmentVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        part_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PartVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        product_as_individual_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductAsIndividualVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        product_as_planned: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductAsPlanned",
                "type": "Element",
                "namespace": "",
            },
        )
        product_as_realized: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductAsRealized",
                "type": "Element",
                "namespace": "",
            },
        )
        requirement_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RequirementVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        risk_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RiskVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        system_version: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemVersion",
                "type": "Element",
                "namespace": "",
            },
        )
        product_view_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductViewDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        analysis_discipline_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AnalysisDisciplineDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        attachment_slot_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AttachmentSlotDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        breakdown_element_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "BreakdownElementDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        functional_element_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "FunctionalElementDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        physical_element_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PhysicalElementDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        system_element_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemElementDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        zone_element_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ZoneElementDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        collection_view_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "CollectionViewDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        document_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "DocumentDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        digital_document_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "DigitalDocumentDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        physical_document_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PhysicalDocumentDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        environment_definition_view: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "EnvironmentDefinitionView",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_connector_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceConnectorDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        interface_specification_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "InterfaceSpecificationDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        observed_environment_view: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ObservedEnvironmentView",
                "type": "Element",
                "namespace": "",
            },
        )
        part_view_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PartViewDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        product_as_individual_view: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ProductAsIndividualView",
                "type": "Element",
                "namespace": "",
            },
        )
        requirement_view_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RequirementViewDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        risk_view_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RiskViewDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        risk_consequence: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RiskConsequence",
                "type": "Element",
                "namespace": "",
            },
        )
        risk_perception: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RiskPerception",
                "type": "Element",
                "namespace": "",
            },
        )
        system_view_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SystemViewDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        project: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Project",
                "type": "Element",
                "namespace": "",
            },
        )
        required_resource: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "RequiredResource",
                "type": "Element",
                "namespace": "",
            },
        )
        resource_as_realized: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ResourceAsRealized",
                "type": "Element",
                "namespace": "",
            },
        )
        resource_event: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ResourceEvent",
                "type": "Element",
                "namespace": "",
            },
        )
        decreasing_resource_event: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "DecreasingResourceEvent",
                "type": "Element",
                "namespace": "",
            },
        )
        increasing_resource_event: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "IncreasingResourceEvent",
                "type": "Element",
                "namespace": "",
            },
        )
        security_classification: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "SecurityClassification",
                "type": "Element",
                "namespace": "",
            },
        )
        state: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "State",
                "type": "Element",
                "namespace": "",
            },
        )
        state_observed: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "StateObserved",
                "type": "Element",
                "namespace": "",
            },
        )
        state_predicted: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "StatePredicted",
                "type": "Element",
                "namespace": "",
            },
        )
        state_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "StateDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
        validation: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Validation",
                "type": "Element",
                "namespace": "",
            },
        )
        verification: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Verification",
                "type": "Element",
                "namespace": "",
            },
        )
        work_order: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "WorkOrder",
                "type": "Element",
                "namespace": "",
            },
        )
        work_request: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "WorkRequest",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class DefinedBy:
        organization: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Organization",
                "type": "Element",
                "namespace": "",
            },
        )
        person_in_organization: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "PersonInOrganization",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ObservationConsequence(AssociationObject):
    """An ObservationConsequence is an association of an observation to the
    consequences that follow from it, where those consequences are in the form of a
    WorkRequest.

    NOTE: One of the uses of ObservationConsequence is to close one of the
    feedback loops from the use of a product to requests for its enhancements.

    :ivar id: a set of Identifiers for the ObservationConsequence
    :ivar inferred_from: the Observation that leads to the consequence.
    :ivar requests: the WorkRequest that the consequence entails.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar analysis_assignment:
    :ivar activity_method_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    """

    id: Optional["ObservationConsequence.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    inferred_from: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "InferredFrom",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    requests: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Requests",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class Position(BaseRootObject):
    """A Position is a function or job performed by a person.

    It defines responsibilities and activities. A position that is not
    fulfilled by a person is a vacancy. Company Director Service
    Engineer

    :ivar id: a set of Identifiers for the Position
    :ivar description: a set of text based descriptions of the Position.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this Position This Position is a
        member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar address: the Address of the position. The value of the
        attribute need not be specified.
    :ivar position_context: the position that is used by the
        organization.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar collection_assignment:
    :ivar document_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar required_resource_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    :ivar type_of_person_assignment:
    :ivar work_request_assignment:
    :ivar position_position_type_assignment:
    :ivar position_relationship:
    """

    id: Optional["Position.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["Position.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["Position.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["Position.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    address: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Address",
            "type": "Element",
            "namespace": "",
        },
    )
    position_context: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "PositionContext",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    required_resource_assignment: List[RequiredResourceAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequiredResourceAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    type_of_person_assignment: List[TypeOfPersonAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TypeOfPersonAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    position_position_type_assignment: List[PositionPositionTypeAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "PositionPositionTypeAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    position_relationship: List[PositionRelationship] = field(
        default_factory=list,
        metadata={
            "name": "PositionRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class PositionGroup(BaseRootObject):
    """A PositionGroup is a group for collecting people in their positions to
    cooperate in an assignment.

    People representing utility companies who cooperate with each other
    to coordinate road works.

    :ivar id: a set of Identifiers for the PositionGroup
    :ivar description: a set of text based descriptions of the
        PositionGroup.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this PositionGroup This
        PositionGroup is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar collection_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    :ivar type_of_person_assignment:
    :ivar work_request_assignment:
    :ivar position_group_relationship:
    """

    id: Optional["PositionGroup.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["PositionGroup.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["PositionGroup.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["PositionGroup.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    type_of_person_assignment: List[TypeOfPersonAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TypeOfPersonAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    position_group_relationship: List[PositionGroupRelationship] = field(
        default_factory=list,
        metadata={
            "name": "PositionGroupRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class PositionType(BaseRootObject):
    """A PositionType is a recognized kind of position.

    Chief Executive Officer Manager Service engineer Programmer Aircraft
    engineering technician propulsion

    :ivar id: a set of Identifiers for the PositionType
    :ivar description: a set of text based descriptions of the
        PositionType.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar defined_by: the TypeOfPerson that serves as a defining example
        for the PositionType.
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar collection_assignment:
    :ivar document_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar required_resource_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    :ivar type_of_person_assignment:
    """

    id: Optional["PositionType.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["PositionType.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["PositionType.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    defined_by: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "DefinedBy",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    required_resource_assignment: List[RequiredResourceAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequiredResourceAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    type_of_person_assignment: List[TypeOfPersonAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TypeOfPersonAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ProbabilityDerived(ProbabilityNumeric):
    """A ProbabilityDerived is a specialization of ProbabilityNumeric that
    associates a particular value of ProbabilityNumeric with the source from which
    the value derived together with any parameters used to get the particular
    value.

    NOTE: Where the
    probability derived from a probability distribution, the parameters of
    ProbabilityDerived are those needed to get a single value from the distribution, and not
    those which characterise the distribution. For example, in the case of coin tossing, the
    distribution is a Binomial distribution, with parameters of 'probability for a single
    toss', and 'number of tosses', whereas the parameter for the ProbabilityDerived will be
    the 'number of heads obtained'.

    :ivar derives_from: the source from which the value derives. NOTE:
        The possible sources for values include a probability
        distribution, a statistic or a reference document.
    :ivar has_parameter: the list of parameters which are applied to a
        ProbabilityDistribution to get the actual ProbabilityByName
    """

    derives_from: Optional["ProbabilityDerived.DerivesFrom"] = field(
        default=None,
        metadata={
            "name": "DerivesFrom",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    has_parameter: Optional["ProbabilityDerived.HasParameter"] = field(
        default=None,
        metadata={
            "name": "HasParameter",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class DerivesFrom:
        probability_generator: Optional[ProbabilityGenerator] = field(
            default=None,
            metadata={
                "name": "ProbabilityGenerator",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )

    @dataclass
    class HasParameter:
        probability_derivation_parameter: List[
            ProbabilityDerivationParameter
        ] = field(
            default_factory=list,
            metadata={
                "name": "ProbabilityDerivationParameter",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )


@dataclass
class ProductBasedLocationIdentification(LocationRepresentation):
    """A ProductBasedLocationIdentification is a specialization of
    LocationRepresentation that specifies a location in the context of a product.

    Seat number M in the Aircraft.

    :ivar location_identification: the letters, numbers, or text, or
        combinations of letters, numbers, and text, that identify a
        location in the context of a product. NOTE: Such identification
        can be expressed in functional or physical terms. "1B" - where
        this is a seat number in an aircraft.
    :ivar location_name: the text by which a location in the context of
        a product is known. The value of this attribute need not be
        specified. "The co-pilot's seat."
    :ivar referenced_product: the product that provides the context for
        the location specification.
    :ivar activity_method_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    """

    location_identification: Optional[
        "ProductBasedLocationIdentification.LocationIdentification"
    ] = field(
        default=None,
        metadata={
            "name": "LocationIdentification",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    location_name: Optional[
        "ProductBasedLocationIdentification.LocationName"
    ] = field(
        default=None,
        metadata={
            "name": "LocationName",
            "type": "Element",
            "namespace": "",
        },
    )
    referenced_product: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ReferencedProduct",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class LocationIdentification:
        localized_string: List[LocalizedString] = field(
            default_factory=list,
            metadata={
                "name": "LocalizedString",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )

    @dataclass
    class LocationName:
        localized_string: List[LocalizedString] = field(
            default_factory=list,
            metadata={
                "name": "LocalizedString",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ProductConcept(BaseRootObject):
    """A ProductConcept is the identification of a set of similar products that
    were, are or will be proposed to customers.

    NOTE: The definition of product concepts is
    driven by market and customer requirements and forecasting. A ProductConcept often
    corresponds to the highest level item(s) manufactured by an organization for customers.
    In an organization which manufactures cars and engines for cars, the car models will be
    represented by instances of ProductConcept. NOTE: The entity data type ProductConcept
    enables to represent customer-oriented identification of products that are to be
    delivered to customers, while the entity data type Product enables to identify and to
    track the history of items that are designed and manufactured, as a tangible solution,
    or component of the solution, for a product concept. NOTE: A product concept may be
    characterized by a set of product features identified by the customers or derived from
    customers' needs. NOTE: Depending on the kind of industry and products, a product
    concept might be offered to the customers in one or many different configurations.

    :ivar id: a set of Identifiers for the ProductConcept
    :ivar description: a set of text based descriptions of the
        ProductConcept.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this ProductConcept This
        ProductConcept is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar target_market: the Market for which the ProductConcept is
        intended. The value of the attribute need not be specified.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar analysis_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar assumption_assignment:
    :ivar collection_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar environment_assignment:
    :ivar observation_assignment:
    :ivar observed_environment_assignment:
    :ivar project_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    """

    id: Optional["ProductConcept.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["ProductConcept.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["ProductConcept.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["ProductConcept.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    target_market: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "TargetMarket",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    assumption_assignment: List[AssumptionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AssumptionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    environment_assignment: List[EnvironmentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EnvironmentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observed_environment_assignment: List[ObservedEnvironmentAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ObservedEnvironmentAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    project_assignment: List[ProjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ProjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ProductConfiguration(BaseRootObject):
    """A ProductConfiguration is the identification of a ProductConcept as a
    configuration.

    NOTE: The entity ProductConfiguration corresponds to the concept of
    configuration item defined, in some configuration management standards, as an item
    subject to configuration management. A ProductConfiguration may represent a component of
    a contracted product, onto which severe safety rules apply and for which configuration
    management is therefore rigorously applied. NOTE: A ProductConfiguration may identify a
    variation of a ProductConcept, an entire ProductConcept, or some portion thereof. NOTE:
    A ProductConfiguration can be established prior to the existence of a corresponding
    product.

    :ivar id: a set of Identifiers for the ProductConfiguration
    :ivar description: a set of text based descriptions of the
        ProductConfiguration.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this ProductConfiguration This
        ProductConfiguration is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar item_context: the ProductConcept that defines the context in
        which the configuration item has been defined.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar certification_assignment:
    :ivar collection_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar information_usage_right_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar project_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar requirement_assignment:
    :ivar security_classification_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    :ivar work_request_assignment:
    :ivar product_configuration_hierarchical_relationship:
    :ivar product_configuration_relationship:
    :ivar product_configuration_revision_sequence:
    """

    id: Optional["ProductConfiguration.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["ProductConfiguration.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["ProductConfiguration.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["ProductConfiguration.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    item_context: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ItemContext",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List[CertificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    project_assignment: List[ProjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ProjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    product_configuration_hierarchical_relationship: List[
        ProductConfigurationHierarchicalRelationship
    ] = field(
        default_factory=list,
        metadata={
            "name": "ProductConfigurationHierarchicalRelationship",
            "type": "Element",
            "namespace": "",
        },
    )
    product_configuration_relationship: List[
        ProductConfigurationRelationship
    ] = field(
        default_factory=list,
        metadata={
            "name": "ProductConfigurationRelationship",
            "type": "Element",
            "namespace": "",
        },
    )
    product_configuration_revision_sequence: List[
        ProductConfigurationRevisionSequence
    ] = field(
        default_factory=list,
        metadata={
            "name": "ProductConfigurationRevisionSequence",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ProductVersionRelationship(RelationshipObject):
    """A ProductVersionRelationship is an association between two versions of
    Product.

    NOTE: A relationship may exist between ProductVersion of different Product or
    between different versions of the same Product.

    :ivar related: the other instance of ProductVersion that is a part
        of the relationship. If one element of the relationship is
        dependent up on the other, this attribute shall be the dependent
        one.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar analysis_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar certification_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    """

    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List[CertificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ResourceGroupRelationship(ResourceItemRelationship):
    """A ResourceGroupRelationship is a specialization of ResourceItemRelationship
    that specifies the means to associate two resource items that are part of a
    resource group.

    The meaning of the entity is determined by classification. The
    relationship between a tool set and a mallet could be classified as
    "Contains". The relationship between a facility and compressed air
    could be classified as "Provides".

    :ivar quantity: the measure of the amount of related ResourceItem.
        The value of the attribute need not be specified.
    """

    quantity: Optional["ResourceGroupRelationship.Quantity"] = field(
        default=None,
        metadata={
            "name": "Quantity",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Quantity:
        value_with_unit: Optional[ValueWithUnit] = field(
            default=None,
            metadata={
                "name": "ValueWithUnit",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class StateDefinition(BaseRootObject):
    """A StateDefinition is a mode of being.

    In formal systems, a StateDefinition is the definition of a
    situation during which some (usually implicit) invariant condition
    holds.

    :ivar id: a set of Identifiers for the StateDefinition
    :ivar description: a set of text based descriptions of the
        StateDefinition.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this StateDefinition This
        StateDefinition is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar definition: a reference to an ExternalOwlClass or an
        ExternalItem held externally to the exchange file that provides
        the definition of the StateDefinition.
    :ivar analysis_assignment:
    :ivar approval_assignment:
    :ivar collection_assignment:
    :ivar condition_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar requirement_assignment:
    :ivar work_request_assignment:
    :ivar and_state_cause_effect_definition:
    :ivar composition_of_state_definition:
    :ivar or_state_cause_effect_definition:
    :ivar sequence_of_state_definition:
    :ivar state_cause_effect_definition:
    :ivar state_complement_definition:
    :ivar state_definition_relationship:
    :ivar state_proper_subset_definition:
    :ivar state_subset_definition:
    :ivar state_symptom_definition:
    :ivar state_transition_definition:
    :ivar xor_state_cause_effect_definition:
    """

    id: Optional["StateDefinition.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["StateDefinition.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["StateDefinition.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["StateDefinition.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    definition: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Definition",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    and_state_cause_effect_definition: List[AndStateCauseEffectDefinition] = (
        field(
            default_factory=list,
            metadata={
                "name": "AndStateCauseEffectDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    composition_of_state_definition: List[CompositionOfStateDefinition] = (
        field(
            default_factory=list,
            metadata={
                "name": "CompositionOfStateDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    or_state_cause_effect_definition: List[OrStateCauseEffectDefinition] = (
        field(
            default_factory=list,
            metadata={
                "name": "OrStateCauseEffectDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    sequence_of_state_definition: List[SequenceOfStateDefinition] = field(
        default_factory=list,
        metadata={
            "name": "SequenceOfStateDefinition",
            "type": "Element",
            "namespace": "",
        },
    )
    state_cause_effect_definition: List[StateCauseEffectDefinition] = field(
        default_factory=list,
        metadata={
            "name": "StateCauseEffectDefinition",
            "type": "Element",
            "namespace": "",
        },
    )
    state_complement_definition: List[StateComplementDefinition] = field(
        default_factory=list,
        metadata={
            "name": "StateComplementDefinition",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_relationship: List[StateDefinitionRelationship] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionRelationship",
            "type": "Element",
            "namespace": "",
        },
    )
    state_proper_subset_definition: List[StateProperSubsetDefinition] = field(
        default_factory=list,
        metadata={
            "name": "StateProperSubsetDefinition",
            "type": "Element",
            "namespace": "",
        },
    )
    state_subset_definition: List[StateSubsetDefinition] = field(
        default_factory=list,
        metadata={
            "name": "StateSubsetDefinition",
            "type": "Element",
            "namespace": "",
        },
    )
    state_symptom_definition: List[StateSymptomDefinition] = field(
        default_factory=list,
        metadata={
            "name": "StateSymptomDefinition",
            "type": "Element",
            "namespace": "",
        },
    )
    state_transition_definition: List[StateTransitionDefinition] = field(
        default_factory=list,
        metadata={
            "name": "StateTransitionDefinition",
            "type": "Element",
            "namespace": "",
        },
    )
    xor_state_cause_effect_definition: List[XorStateCauseEffectDefinition] = (
        field(
            default_factory=list,
            metadata={
                "name": "XorStateCauseEffectDefinition",
                "type": "Element",
                "namespace": "",
            },
        )
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class StateRelationship(RelationshipObject):
    """
    A StateRelationship is a relationship between two or more State.

    :ivar id: a set of Identifiers for the StateRelationship
    :ivar related: the other of the set of instances of State that is a
        part of the relationship.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    """

    id: Optional["StateRelationship.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class TypeOfPersonDefinition(BaseRootObject):
    """A TypeOfPersonDefinition is the definition of a TypeOfPerson in terms of
    required properties or attributes.

    A junior mechanical design engineer could be specified to be either
    someone who has 3 years experience of working in a mechanical design
    department, or a degree in mechanical engineering.

    :ivar id: a set of Identifiers for the TypeOfPersonDefinition
    :ivar description: a set of text based descriptions of the
        TypeOfPersonDefinition.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this TypeOfPersonDefinition This
        TypeOfPersonDefinition is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar activity_method_assignment:
    :ivar collection_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    :ivar type_of_person_definition_relationship:
    :ivar type_of_person_definition_required_attributes_relationship:
    """

    id: Optional["TypeOfPersonDefinition.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["TypeOfPersonDefinition.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["TypeOfPersonDefinition.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["TypeOfPersonDefinition.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    type_of_person_definition_relationship: List[
        TypeOfPersonDefinitionRelationship
    ] = field(
        default_factory=list,
        metadata={
            "name": "TypeOfPersonDefinitionRelationship",
            "type": "Element",
            "namespace": "",
        },
    )
    type_of_person_definition_required_attributes_relationship: List[
        TypeOfPersonDefinitionRequiredAttributesRelationship
    ] = field(
        default_factory=list,
        metadata={
            "name": "TypeOfPersonDefinitionRequiredAttributesRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ViewDefinitionRelationship(RelationshipObject):
    """A ViewDefinitionRelationship is an association between two instances of
    ProductViewDefinition.

    This association represents a relationship between the product
    versions, indirectly identified by the instances of
    ProductViewDefinition, relevant in the definition contexts of the
    related instances of ProductViewDefinition.

    :ivar id: a set of Identifiers for the ViewDefinitionRelationship
    :ivar related: the other instance of ProductViewDefinition that is
        part of the relationship. If one element of the relationship is
        dependent upon the other, this attribute shall be the dependent
        one.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar analysis_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar certification_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    :ivar work_request_assignment:
    """

    id: Optional["ViewDefinitionRelationship.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    related: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Related",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List[CertificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class WorkOutput(BaseRootObject):
    """A WorkOutput is a statement of output resulting from an activity or a task.

    The role of the work output is determined by classification. When
    applicable a work output may be classified as "Planned"; "Actual";
    "By-product"; "Waste product".

    :ivar id: a set of Identifiers for the WorkOutput
    :ivar description: a set of text based descriptions of the
        WorkOutput.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this WorkOutput This WorkOutput is
        a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar quantity: the amount of output resulting from the associated
        activity or task. The value of this attribute need not be
        specified.
    :ivar output_item: a reference to a detailed representation of the
        item that is defined as the work output. It can refer to an
        actual as well as to a type of item. The value of this attribute
        need not be specified. A work output can be a product or a
        certificate.
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar certification_assignment:
    :ivar collection_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar security_classification_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    :ivar work_output_relationship:
    """

    id: Optional["WorkOutput.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["WorkOutput.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["WorkOutput.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["WorkOutput.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    quantity: Optional["WorkOutput.Quantity"] = field(
        default=None,
        metadata={
            "name": "Quantity",
            "type": "Element",
            "namespace": "",
        },
    )
    output_item: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "OutputItem",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List[CertificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_output_relationship: List[WorkOutputRelationship] = field(
        default_factory=list,
        metadata={
            "name": "WorkOutputRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Quantity:
        value_with_unit: Optional[ValueWithUnit] = field(
            default=None,
            metadata={
                "name": "ValueWithUnit",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class WorkOutputAssignment(AssignmentObject):
    """A WorkOutputAssignment is an association of a work output statement with the
    source that produces or delivers the output.

    The work output can be planned as well as actual. The role of the
    assignment is determined by classification.

    :ivar assigned_output: the work output that is to be associated with
        one or more activities or tasks that produce or deliver the
        output.
    :ivar analysis_assignment:
    :ivar activity_method_assignment:
    :ivar effectivity_assignment:
    :ivar observation_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    """

    assigned_output: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedOutput",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class AnalysisVersionRelationship(ProductVersionRelationship):
    """
    A AnalysisVersionRelationship is a specialization of ProductVersionRelationship
    that is used to assert an association between two versions of an analysis.
    """


@dataclass
class AssemblyViewRelationship(ViewDefinitionRelationship):
    """An AssemblyViewRelationship is a specialization of
    ViewDefinitionRelationship.

    It identifies a possibly quantified usage of a product
    version as a component of another product version. The relationship is established
    between two ProductViewDefinitions The inherited attribute ViewDefinitionRelationship
    identifies the ProductViewDefinition of the assembly. The inherited attribute
    ViewDefinitionRelationship identifies the ProductViewDefinition of the product version
    that plays the role of component. The AssemblyViewRelationship specifies that, in the
    ProductViewDefinition of the ProductViewDefinition that is referred to as
    ViewDefinitionRelationship, it is considered that the product version that is indirectly
    identified with the ViewDefinitionRelationship attribute, is a component of the product
    version that is indirectly identified with the ViewDefinitionRelationship attribute.
    NOTE: In another context, the structure of the assembly may be described differently,
    adding, for example, an intermediate level between the products. NOTE: This entity data
    type may be used to establish assembly relationships during design or to represent the
    composition of an assembly existing in the real world.

    :ivar location_indicator: the Identifier that identifies this usage
        of the component in the assembly in a diagram, list, chart, or
        on a physical piece of equipment. The value of this attribute
        need not be specified.
    :ivar quantity: the ValueWithUnit that defines the amount of this
        usage of the component in the assembly. The value of this
        attribute need not be specified.
    :ivar date_time_assignment:
    :ivar information_usage_right_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar requirement_assignment:
    :ivar security_classification_assignment:
    :ivar assembly_relationship_substitution:
    :ivar component_upper_level_identification:
    """

    location_indicator: Optional[
        "AssemblyViewRelationship.LocationIndicator"
    ] = field(
        default=None,
        metadata={
            "name": "LocationIndicator",
            "type": "Element",
            "namespace": "",
        },
    )
    quantity: Optional["AssemblyViewRelationship.Quantity"] = field(
        default=None,
        metadata={
            "name": "Quantity",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    assembly_relationship_substitution: List[
        AssemblyRelationshipSubstitution
    ] = field(
        default_factory=list,
        metadata={
            "name": "AssemblyRelationshipSubstitution",
            "type": "Element",
            "namespace": "",
        },
    )
    component_upper_level_identification: List[
        "ComponentUpperLevelIdentification"
    ] = field(
        default_factory=list,
        metadata={
            "name": "ComponentUpperLevelIdentification",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class LocationIndicator:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Quantity:
        value_with_unit: Optional[ValueWithUnit] = field(
            default=None,
            metadata={
                "name": "ValueWithUnit",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class CausalConsequence(ViewDefinitionRelationship):
    """A CausalConsequence is a specialization of ViewDefinitionRelationship that
    identifies secondary effects related to or resulting from a particular
    RiskConsequence.

    NOTE: A CausalConsequence is considered as an aftereffect of an
    immediate CausalConsequence.
    """


@dataclass
class CollectionVersionRelationship(ProductVersionRelationship):
    """
    An CollectionVersionRelationship is a specialization of
    ProductVersionRelationship that represents an association between two
    CollectionVersion instances.
    """


@dataclass
class CompositionOfState(StateRelationship):
    """
    A CompositionOfState is a specialization of state relationship and it relates
    the nature of states in relation to one another, where two or more State parts
    compose a whole State; and furthermore, whole states can become parts of yet
    another whole State.
    """


@dataclass
class DigitalFile(File):
    """A DigitalFile is a specialization of File.

    A DigitalFile contains computer interpretable data and is stored on
    an electronic device.
    """

    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EnvironmentViewDefinitionRelationship(ViewDefinitionRelationship):
    """
    A EnvironmentViewDefinitionRelationship is a specialization of
    ViewDefinitionRelationship that represents an association between two
    EnvironmentDefinitionView instances.
    """

    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Hardcopy(File):
    """A Hardcopy is a specialization of File that represents a non-digital
    document.

    An actual stack of paper consisting of one or more sheets, on which
    some product data is written, printed or plotted.
    """

    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class HierarchicalInterfaceConnection(InterfaceConnection):
    """A HierarchicalInterfaceConnection is a specialization of InterfaceConnection
    that provides an interconnection between components at different levels in an
    assembly.

    Each connection point in the assembly is represented by a
    InterfaceConnectorOccurrence. An appliance such as a television has
    a power lead and attached plug. The plug and power lead could be
    represented as an assembly of parts such as the plug pins and wires.
    Each connection point of the pins and wires in the assembly is
    represented by a InterfaceConnectorOccurrence and an instance of the
    HierarchicalInterfaceConnection entity data type identifies the
    connection of the pins (the parts) to the plug (the assembly) in the
    assembly.
    """


@dataclass
class ObservedEnvironmentViewDefinitionRelationship(
    ViewDefinitionRelationship
):
    """
    An ObservedEnvironmentViewDefinitionRelationship is a specialization of
    ViewDefinitionRelationship that represents an association between two
    ObservedEnvironmentView instances.
    """

    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class RelatedConsequence(ViewDefinitionRelationship):
    """
    A RelatedConsequence is a specialization of ViewDefinitionRelationship
    describing the expected consequences of a specific perception of a risk.
    """


@dataclass
class RequirementVersionRelationship(ProductVersionRelationship):
    """
    A RequirementVersionRelationship is a specialization of
    ProductVersionRelationship that is used to relate a previous version
    (predecessor) of a requirement to the version that replaces it (successor).

    :ivar id: a set of Identifiers for the
        RequirementVersionRelationship
    :ivar contract_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar security_classification_assignment:
    """

    id: Optional["RequirementVersionRelationship.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class RequirementViewDefinitionRelationship(ViewDefinitionRelationship):
    """A RequirementViewDefinitionRelationship is a specialization of
    ViewDefinitionRelationship.

    A RequirementViewDefinitionRelationship is the association between
    one RequirementViewDefinition and another.
    """


@dataclass
class RiskPerceptionRelationship(ViewDefinitionRelationship):
    """
    A RiskPerceptionRelationship defines an association between two instances of
    RiskPerception.
    """

    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class SchemeEntryAssignment(AssignmentObject):
    """A SchemeEntryAssignment is a specialization of an AssignmentObject that
    represents the assignment of SchemeEntry instances to instances that are
    specializations of SchemeEntryAssignmentSelect.

    NOTE: The meaning of the assignment is determined by
    classification which is identified by the AssignmentObject property. The possible
    classifications are subclasses of . NOTE: The SchemeEntryAssignment links the single
    items included in Plans and Schedules with their associated SchemeEntry. These items may
    be actions, events, or tasks depending on the nature of the Plan or Schedule.

    :ivar assigned_entry: the SchemeEntry that is assigned to activity
        or product data.
    :ivar approval_assignment:
    :ivar certification_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar project_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar requirement_assignment:
    :ivar security_classification_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar work_output_assignment:
    """

    assigned_entry: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedEntry",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List[CertificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    project_assignment: List[ProjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ProjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_output_assignment: List[WorkOutputAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOutputAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class SchemeSubjectAssignment(AssignmentObject):
    """A SchemeSubjectAssignment is a specialization of an AssignmentObject that
    represents the assignment of Scheme with a specific subject.

    NOTE: The meaning of
    the assignment is determined by classification which is identified by the
    AssignmentObject property. The possible classifications are subclasses of . NOTE: The
    SchemeSubjectAssignment links the Plans and Schedules with their associated subjects or
    targets. This may indicate the intent of the scheme. The maintenance plan for an
    individual vehicle, where the subject attribute points to an entity instance
    representing the individual vehicle.

    :ivar assigned_scheme: the Scheme that is assigned to a specific
        subject.
    :ivar approval_assignment:
    :ivar certification_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar project_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar requirement_assignment:
    :ivar security_classification_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar work_output_assignment:
    """

    assigned_scheme: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedScheme",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List[CertificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    project_assignment: List[ProjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ProjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_output_assignment: List[WorkOutputAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOutputAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class SchemeVersionAssignment(AssignmentObject):
    """A SchemeVersionAssignment is a specialization of an AssignmentObject that
    represents the assignment of a SchemeVersion instances to instances that are
    specializations of SchemeVersionAssignmentSelect.

    NOTE: The meaning of the assignment is
    determined by classification which is identified by the AssignmentObject property. The
    possible classifications are subclasses of .

    :ivar assigned_scheme_version: the SchemeVersion assigned to a set
        of items
    :ivar approval_assignment:
    :ivar certification_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar project_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar requirement_assignment:
    :ivar security_classification_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar work_output_assignment:
    """

    assigned_scheme_version: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AssignedSchemeVersion",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List[CertificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    project_assignment: List[ProjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ProjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_output_assignment: List[WorkOutputAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOutputAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class SequenceOfState(StateRelationship):
    """
    A SequenceOfState is a specialization of StateRelationship in which one set of
    State precedes another set of State.
    """


@dataclass
class StateCauseEffect(StateRelationship):
    """A StateCauseEffect is a specialization of state relationship and it relates
    two or more states as one state causing particular resulting effect state(s).

    In turn, an effect state can become a new causing state yielding in
    yet more effect states.
    """


@dataclass
class StatePredictedToObserved(StateRelationship):
    """A StatePredictedToObserved is a specialization of state relationship.

    It specifies the relationship between two individual states, one of
    which is a StatePredicted to a second state which is a
    StateObserved.
    """


@dataclass
class StateTransition(StateRelationship):
    """
    A StateTransition is a specialization of state relationship and it relates two
    or more states before and after a transition in State, where at least one State
    is a start state and at least one State is an end state.
    """


@dataclass
class SuppliedPartRelationship(ProductVersionRelationship):
    """A SuppliedPartRelationship is a specialization of ProductVersionRelationship
    that relates two instances of ProductVersion that represent the same instance
    in different organizational contexts.

    One of the organizations is the
    supplier of the instance to the other organization. This entity is applicable for part
    versions and document versions. NOTE: This entity enables to represent the fact that two
    organizations may use distinct identifiers to identify their Product and their versions.
    NOTE: This mechanism can only be used in an information system or in exchange files
    where the content of the id attribute of instances of Product is not constrained by a
    particular identification scheme.
    """

    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class SystemVersionRelationship(ProductVersionRelationship):
    """
    A SystemVersionRelationship is a specialization of ProductVersionRelationship
    used to relate versions of a system.
    """


@dataclass
class ViewDefinitionUsage(ViewDefinitionRelationship):
    """A ViewDefinitionUsage is a specialization of ViewDefinitionRelationship that
    specifies a directed association between two instances of
    ProductViewDefinition.

    This association represents a relationship stating that, in the
    definition contexts of the related instances of
    ProductViewDefinition, it is considered that the related product is
    used in the context of the relating product.
    """


@dataclass
class Activity(BaseRootObject):
    """An Activity is the identification of the occurrence of an action that has
    taken place, is taking place, or is expected to take place in the future.

    The procedure executed during an Activity is identified by the
    ActivityMethod that is referred to by the chosenMethod attribute.
    Change, distilling, design, a process to drill a hole, and a task
    such as training someone, are examples of activities. NOTE: Status
    information identifying the level of completion of each activity may
    be provided within an instance of StateObserved. NOTE: The items
    that are affected by an Activity, for example as input or output,
    may be identified within an instance of ActivityAssignment.

    :ivar id: a set of Identifiers for the Activity.
    :ivar description: a set of text based descriptions of the Activity.
    :ivar classified_as: A reference to a class held externally to the
        exchange file that classifies this Activity. This Activity is a
        member of the referenced class.
    :ivar same_as: A reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar chosen_method: A reference to the ActivityMethod used for this
        Activity.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar analysis_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar assumption_assignment:
    :ivar certification_assignment:
    :ivar collection_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar environment_assignment:
    :ivar justification_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar observed_environment_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar project_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar required_resource_assignment:
    :ivar scheme_entry_assignment:
    :ivar scheme_subject_assignment:
    :ivar scheme_version_assignment:
    :ivar security_classification_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar work_output_assignment:
    :ivar work_request_assignment:
    :ivar activity_relationship:
    """

    id: Optional["Activity.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["Activity.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["Activity.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["Activity.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    chosen_method: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ChosenMethod",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    assumption_assignment: List[AssumptionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AssumptionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List[CertificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    environment_assignment: List[EnvironmentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EnvironmentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observed_environment_assignment: List[ObservedEnvironmentAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ObservedEnvironmentAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    project_assignment: List[ProjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ProjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    required_resource_assignment: List[RequiredResourceAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequiredResourceAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_entry_assignment: List[SchemeEntryAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeEntryAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_subject_assignment: List[SchemeSubjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeSubjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_version_assignment: List[SchemeVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_output_assignment: List[WorkOutputAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOutputAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_relationship: List[ActivityRelationship] = field(
        default_factory=list,
        metadata={
            "name": "ActivityRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ActivityMethod(BaseRootObject):
    """An ActivityMethod is a way to carry out an Activity.

    NOTE: There may be
    more than one method for producing a required result. NOTE: This definition may be used
    to characterize a way to resolve a request for action. The concept of action request is
    represented by WorkRequest.

    :ivar id: a set of Identifiers for the ActivityMethod
    :ivar description: a set of text based descriptions of the
        ActivityMethod.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this ActivityMethod. This
        ActivityMethod is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar consequence: the text that describes the results of
        application of this method.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar analysis_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar certification_assignment:
    :ivar collection_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar environment_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar observed_environment_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar project_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar required_resource_assignment:
    :ivar requirement_assignment:
    :ivar scheme_entry_assignment:
    :ivar scheme_subject_assignment:
    :ivar scheme_version_assignment:
    :ivar security_classification_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar work_output_assignment:
    :ivar work_request_assignment:
    :ivar activity_method_relationship:
    """

    id: Optional["ActivityMethod.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["ActivityMethod.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["ActivityMethod.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["ActivityMethod.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    consequence: Optional["ActivityMethod.Consequence"] = field(
        default=None,
        metadata={
            "name": "Consequence",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List[CertificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    environment_assignment: List[EnvironmentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EnvironmentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observed_environment_assignment: List[ObservedEnvironmentAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ObservedEnvironmentAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    project_assignment: List[ProjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ProjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    required_resource_assignment: List[RequiredResourceAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequiredResourceAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_entry_assignment: List[SchemeEntryAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeEntryAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_subject_assignment: List[SchemeSubjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeSubjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_version_assignment: List[SchemeVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_output_assignment: List[WorkOutputAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOutputAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_relationship: List[ActivityMethodRelationship] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Consequence:
        localized_string: List[LocalizedString] = field(
            default_factory=list,
            metadata={
                "name": "LocalizedString",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class AnalysisVersionSequence(AnalysisVersionRelationship):
    """
    A AnalysisVersionSequence is a specialization of AnalysisVersionRelationship
    that is used to assert that the one analysis version (the successor) replaces
    another (its predecessor).
    """


@dataclass
class BreakdownElementUsage(ViewDefinitionUsage):
    """
    A BreakdownElementUsage is a specialization of ViewDefinitionRelationship that
    identifies a relationship between a parent and child BreakdownElement.
    """

    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class CollectionVersionSequenceRelationship(CollectionVersionRelationship):
    """
    An CollectionVersionSequenceRelationship is a specialization of
    CollectionVersionRelationship that represents a sequential association between
    two CollectionVersion instances.
    """


@dataclass
class ComponentUpperLevelIdentification(AssemblyViewRelationship):
    """A ComponentUpperLevelIdentification is a specialization of
    AssemblyViewRelationship.

    It identifies a component of an assembly with respect to an upper
    level in the assembly structure. NOTE: A
    ComponentUpperLevelIdentification does not add a component in an
    assembly, it provides a means to further characterize a component
    with respect to an upper level assembly. A
    ComponentUpperLevelIdentification may be used to assign a property
    to a component that applies in the context of a particular upper
    level assembly. The identified component is the version of product,
    indirectly referred to as the ViewDefinitionRelationship of the
    subAssemblyRelationship. The upper level assembly is the version of
    product, indirectly referred to as the ViewDefinitionRelationship of
    the upperAssemblyRelationship.

    :ivar sub_assembly_relationship: the NextAssemblyViewUsage that
        identifies indirectly the component that is further
        characterized by the ComponentUpperLevelIdentification.
    """

    sub_assembly_relationship: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "SubAssemblyRelationship",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class Contract(BaseRootObject):
    """
    A Contract is a binding agreement.

    :ivar id: a set of Identifiers for the Contract
    :ivar description: a set of text based descriptions of the Contract.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this Contract This Contract is a
        member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar assumption_assignment:
    :ivar collection_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar resource_item_assignment:
    :ivar scheme_subject_assignment:
    :ivar scheme_version_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar work_request_assignment:
    :ivar contract_relationship:
    """

    id: Optional["Contract.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["Contract.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["Contract.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["Contract.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    assumption_assignment: List[AssumptionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AssumptionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    resource_item_assignment: List[ResourceItemAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ResourceItemAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_subject_assignment: List[SchemeSubjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeSubjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_version_assignment: List[SchemeVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_relationship: List[ContractRelationship] = field(
        default_factory=list,
        metadata={
            "name": "ContractRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class Location(BaseRootObject):
    """
    A Location is a place or position where an activity or event can occur or a
    product or resource can exist.

    :ivar id: a set of Identifiers for the Location
    :ivar description: a set of text based descriptions of the Location.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this Location This Location is a
        member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar alternative_location_representations:
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar assumption_assignment:
    :ivar collection_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar resource_item_assignment:
    :ivar scheme_subject_assignment:
    :ivar scheme_version_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    :ivar work_request_assignment:
    :ivar location_relationship:
    """

    id: Optional["Location.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["Location.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["Location.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["Location.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    alternative_location_representations: Optional[
        "Location.AlternativeLocationRepresentations"
    ] = field(
        default=None,
        metadata={
            "name": "AlternativeLocationRepresentations",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    assumption_assignment: List[AssumptionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AssumptionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    resource_item_assignment: List[ResourceItemAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ResourceItemAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_subject_assignment: List[SchemeSubjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeSubjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_version_assignment: List[SchemeVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_relationship: List[LocationRelationship] = field(
        default_factory=list,
        metadata={
            "name": "LocationRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class AlternativeLocationRepresentations:
        location_representation: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "LocationRepresentation",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class MakeFromRelationship(ViewDefinitionUsage):
    """A MakeFromRelationship is a specialization of ViewDefinitionUsage
    established between two instances of PartViewDefinition.

    It specifies that, in the context of the definition of the relating
    part version, the relating part version is considered as resulting
    from the manufacturing transformation of the related part version.
    NOTE: The related part version may identify a raw material or a
    semi-finished part.

    :ivar quantity: the ValueWithUnit that specifies the amount of the
        related part version that is used to produce the relating part
        version. The value of this attribute need not be specified. The
        quantity is specified when the related part version is a
        countable material. If the value is absent , it shall be
        considered that one occurrence of the related part version is
        used to produce the relating part version.
    :ivar priority: an integer that ranks the preference for use of the
        related part version among all instances of MakeFromRelationship
        that have the same value for the inherited MakeFromRelationship
        attribute. This value is an integer that only has meaning when
        comparing it with corresponding values for MakeFromRelationship
        sharing the same MakeFromRelationship. It is a relative ranking
        value, not an absolute ranking. A lower value indicates a higher
        preference for the MakeFromRelationship, and a higher value
        indicates a lower preference. The value of this attribute need
        not be specified.
    """

    quantity: Optional["MakeFromRelationship.Quantity"] = field(
        default=None,
        metadata={
            "name": "Quantity",
            "type": "Element",
            "namespace": "",
        },
    )
    priority: Optional[int] = field(
        default=None,
        metadata={
            "name": "Priority",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Quantity:
        value_with_unit: Optional[ValueWithUnit] = field(
            default=None,
            metadata={
                "name": "ValueWithUnit",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ManagedResource(BaseRootObject):
    """A ManagedResource is a representation of a resource that is provided with
    resource management capabilities.

    The role of a managed resource is determined by classification. A
    managed resource can be classified as "Stock line".

    :ivar id: a set of Identifiers for the ManagedResource
    :ivar description: a set of text based descriptions of the
        ManagedResource.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this ManagedResource This
        ManagedResource is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar quantity: the measure of the amount of the resource that is
        available at a given location. The value of this attribute need
        not be specified.
    :ivar item: a reference to an identifiable ResourceItem (within the
        application context) that (when realized) will satisfy that
        requirement.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar collection_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar scheme_subject_assignment:
    :ivar scheme_version_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar work_request_assignment:
    :ivar managed_resource_relationship:
    """

    id: Optional["ManagedResource.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["ManagedResource.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["ManagedResource.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["ManagedResource.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    quantity: Optional["ManagedResource.Quantity"] = field(
        default=None,
        metadata={
            "name": "Quantity",
            "type": "Element",
            "namespace": "",
        },
    )
    item: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Item",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_subject_assignment: List[SchemeSubjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeSubjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_version_assignment: List[SchemeVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    managed_resource_relationship: List[ManagedResourceRelationship] = field(
        default_factory=list,
        metadata={
            "name": "ManagedResourceRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Quantity:
        value_with_unit: Optional[ValueWithUnit] = field(
            default=None,
            metadata={
                "name": "ValueWithUnit",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class NextAssemblyViewUsage(AssemblyViewRelationship):
    """A NextAssemblyViewUsage is a specialization of AssemblyViewRelationship.

    It establishes a relationship between a component and its immediate
    parent assembly in a product structure.
    """


@dataclass
class Organization(BaseRootObject):
    """
    An Organization is an administrative structure in which persons are active.

    :ivar id: a set of Identifiers for the Organization
    :ivar description: a set of text based descriptions of the
        Organization.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this Organization This
        Organization is a member of the referenced class.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar analysis_assignment:
    :ivar activity_method_assignment:
    :ivar collection_assignment:
    :ivar document_assignment:
    :ivar environment_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar observed_environment_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar address_assignment:
    :ivar qualification_assignment:
    :ivar scheme_subject_assignment:
    :ivar scheme_version_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    :ivar work_request_assignment:
    :ivar organization_organization_type_relationship:
    :ivar organization_relationship:
    """

    id: Optional["Organization.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    description: Optional["Organization.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["Organization.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    environment_assignment: List[EnvironmentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EnvironmentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observed_environment_assignment: List[ObservedEnvironmentAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ObservedEnvironmentAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    address_assignment: List[AddressAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AddressAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    qualification_assignment: List[QualificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "QualificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_subject_assignment: List[SchemeSubjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeSubjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_version_assignment: List[SchemeVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_organization_type_relationship: List[
        OrganizationOrganizationTypeRelationship
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrganizationTypeRelationship",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_relationship: List[OrganizationRelationship] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class OrganizationType(BaseRootObject):
    """An OrganizationType is a recognized kind of Organization.

    legal entity change control board sales organization manufacturing
    organization department

    :ivar id: a set of Identifiers for the OrganizationType
    :ivar description: a set of text based descriptions of the
        OrganizationType.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar activity_method_assignment:
    :ivar collection_assignment:
    :ivar document_assignment:
    :ivar environment_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar observed_environment_assignment:
    :ivar scheme_subject_assignment:
    :ivar scheme_version_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    """

    id: Optional["OrganizationType.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["OrganizationType.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["OrganizationType.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    environment_assignment: List[EnvironmentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EnvironmentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observed_environment_assignment: List[ObservedEnvironmentAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ObservedEnvironmentAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    scheme_subject_assignment: List[SchemeSubjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeSubjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_version_assignment: List[SchemeVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class Person(BaseRootObject):
    """
    A Person is an individual human being.

    :ivar id: a set of Identifiers for the Person
    :ivar description: a set of text based descriptions of the Person.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this Person This Person is a
        member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar last_name: the Person's name.
    :ivar first_name: the first element of the Person's list of
        forenames. The value of this attribute need not be specified.
    :ivar middle_names: the Person's other forenames. The value of this
        attribute need not be specified.
    :ivar prefix_titles: the text that specifies the Person's social or
        professional standing and appear before his or her names. The
        value of this attribute need not be specified. "Mr.", "Ms",
        "Dr." and combinations are examples of prefixTitles.
    :ivar suffix_titles: the text that specifies the Person's social or
        professional standing and appear after his or her names. The
        value of this attribute need not be specified. "Ph.D." and
        "Esquire" are examples of suffixTitles.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar collection_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar observed_environment_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar qualification_assignment:
    :ivar scheme_subject_assignment:
    :ivar scheme_version_assignment:
    :ivar time_interval_assignment:
    :ivar type_of_person_assignment:
    :ivar work_request_assignment:
    """

    id: Optional["Person.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["Person.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["Person.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["Person.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    last_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "LastName",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    first_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "FirstName",
            "type": "Element",
            "namespace": "",
        },
    )
    middle_names: Optional["Person.MiddleNames"] = field(
        default=None,
        metadata={
            "name": "MiddleNames",
            "type": "Element",
            "namespace": "",
        },
    )
    prefix_titles: Optional["Person.PrefixTitles"] = field(
        default=None,
        metadata={
            "name": "PrefixTitles",
            "type": "Element",
            "namespace": "",
        },
    )
    suffix_titles: Optional["Person.SuffixTitles"] = field(
        default=None,
        metadata={
            "name": "SuffixTitles",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observed_environment_assignment: List[ObservedEnvironmentAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ObservedEnvironmentAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    qualification_assignment: List[QualificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "QualificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_subject_assignment: List[SchemeSubjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeSubjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_version_assignment: List[SchemeVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    type_of_person_assignment: List[TypeOfPersonAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TypeOfPersonAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class MiddleNames:
        string: List[str] = field(
            default_factory=list,
            metadata={
                "name": "STRING",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class PrefixTitles:
        string: List[str] = field(
            default_factory=list,
            metadata={
                "name": "STRING",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SuffixTitles:
        string: List[str] = field(
            default_factory=list,
            metadata={
                "name": "STRING",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class PersonInOrganization(BaseRootObject):
    """
    A PersonInOrganization is the identification of a Person and of his role in an
    Organization.

    :ivar id: a set of Identifiers for the PersonInOrganization
    :ivar description: a set of text based descriptions of the
        PersonInOrganization.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this PersonInOrganization. This
        PersonInOrganization is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar concerned_person: the Person who is related with an
        Organization.
    :ivar containing_organization: the Organization to which a Person is
        related.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar collection_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar observed_environment_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar address_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar qualification_assignment:
    :ivar scheme_subject_assignment:
    :ivar scheme_version_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar time_interval_assignment:
    :ivar type_of_person_assignment:
    :ivar work_request_assignment:
    """

    id: Optional["PersonInOrganization.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["PersonInOrganization.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["PersonInOrganization.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["PersonInOrganization.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    concerned_person: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ConcernedPerson",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    containing_organization: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ContainingOrganization",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observed_environment_assignment: List[ObservedEnvironmentAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ObservedEnvironmentAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    address_assignment: List[AddressAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AddressAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    qualification_assignment: List[QualificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "QualificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_subject_assignment: List[SchemeSubjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeSubjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_version_assignment: List[SchemeVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_assignment: List[TimeIntervalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    type_of_person_assignment: List[TypeOfPersonAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TypeOfPersonAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ProductGroup(BaseRootObject):
    """A ProductGroup is an identification of a set of ProductConcepts, Products,
    ProductGroups, ProductVersions or ProductAsIndividuals that have been grouped
    together.

    All the aircraft sold to BigPlanes airways.

    :ivar id: a set of Identifiers for the ProductGroup
    :ivar description: a set of text based descriptions of the
        ProductGroup.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this ProductGroup This
        ProductGroup is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar membership_rule: the characteristics that are common to all
        members of this group. The value of this attribute need not be
        specified.
    :ivar product_group_context: the context in which the product group
        has meaning. The value of this attribute need not be specified.
        The project or equipment end item to which the group belongs.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar certification_assignment:
    :ivar collection_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar environment_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar observed_environment_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar project_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar requirement_assignment:
    :ivar resource_item_assignment:
    :ivar scheme_subject_assignment:
    :ivar scheme_version_assignment:
    :ivar security_classification_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    :ivar work_request_assignment:
    :ivar product_group_relationship:
    """

    id: Optional["ProductGroup.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["ProductGroup.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["ProductGroup.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["ProductGroup.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    membership_rule: Optional["ProductGroup.MembershipRule"] = field(
        default=None,
        metadata={
            "name": "MembershipRule",
            "type": "Element",
            "namespace": "",
        },
    )
    product_group_context: Optional["ProductGroup.ProductGroupContext"] = (
        field(
            default=None,
            metadata={
                "name": "ProductGroupContext",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List[CertificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    environment_assignment: List[EnvironmentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EnvironmentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observed_environment_assignment: List[ObservedEnvironmentAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ObservedEnvironmentAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    project_assignment: List[ProjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ProjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    resource_item_assignment: List[ResourceItemAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ResourceItemAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_subject_assignment: List[SchemeSubjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeSubjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_version_assignment: List[SchemeVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    product_group_relationship: List[ProductGroupRelationship] = field(
        default_factory=list,
        metadata={
            "name": "ProductGroupRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class MembershipRule:
        localized_string: List[LocalizedString] = field(
            default_factory=list,
            metadata={
                "name": "LocalizedString",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ProductGroupContext:
        localized_string: List[LocalizedString] = field(
            default_factory=list,
            metadata={
                "name": "LocalizedString",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ProductInAttachmentSlot(ViewDefinitionUsage):
    """A ProductInAttachmentSlot is a specialization of ViewDefinitionUsage that is
    a relationship between an AttachmentSlot and a ProductViewDefinition of a
    Product that is designed to be attached to the attachment slot.

    A long-range fuel tank is designed to be attached to an aircraft in
    an attachment slot that corresponds to a pylon mounting on a wing.
    """

    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Project(BaseRootObject):
    """
    A Project is an identified program of work.

    :ivar id: a set of Identifiers for the Project
    :ivar description: a set of text based descriptions of the Project.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this Project This Project is a
        member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar responsible_organizations:
    :ivar planned_start_activity:
    :ivar planned_start_date:
    :ivar planned_end_activity:
    :ivar planned_end_date:
    :ivar actual_start_date: the date and time when the Project was
        actually started. The value of this attribute need not be
        specified.
    :ivar actual_end_date: the date and time when the Project was
        actually finished. The value of this attribute need not be
        specified.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar assumption_assignment:
    :ivar certification_assignment:
    :ivar collection_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar requirement_assignment:
    :ivar resource_item_assignment:
    :ivar scheme_subject_assignment:
    :ivar scheme_version_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar work_request_assignment:
    :ivar project_relationship:
    """

    id: Optional["Project.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["Project.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["Project.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["Project.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    responsible_organizations: Optional["Project.ResponsibleOrganizations"] = (
        field(
            default=None,
            metadata={
                "name": "ResponsibleOrganizations",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    planned_start_activity: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "PlannedStartActivity",
            "type": "Element",
            "namespace": "",
        },
    )
    planned_start_date: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "PlannedStartDate",
            "type": "Element",
            "namespace": "",
        },
    )
    planned_end_activity: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "PlannedEndActivity",
            "type": "Element",
            "namespace": "",
        },
    )
    planned_end_date: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "PlannedEndDate",
            "type": "Element",
            "namespace": "",
        },
    )
    actual_start_date: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ActualStartDate",
            "type": "Element",
            "namespace": "",
        },
    )
    actual_end_date: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ActualEndDate",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    assumption_assignment: List[AssumptionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AssumptionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List[CertificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    resource_item_assignment: List[ResourceItemAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ResourceItemAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_subject_assignment: List[SchemeSubjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeSubjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_version_assignment: List[SchemeVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    project_relationship: List[ProjectRelationship] = field(
        default_factory=list,
        metadata={
            "name": "ProjectRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ResponsibleOrganizations:
        organization: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Organization",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class PromissoryAssemblyViewUsage(AssemblyViewRelationship):
    """A PromissoryAssemblyViewUsage is a specialization of
    AssemblyViewRelationship.

    It establishes a relationship between an assembly and a component,
    regardless of the number of intermediate levels between them, which
    may be established with instances of NextAssemblyViewUsage. NOTE: A
    PromissoryAssemblyViewUsage may be used when the product structure
    is not completely defined, to capture the intent that the
    constituent will be used in that assembly.
    """


@dataclass
class RequiredResource(BaseRootObject):
    """A RequiredResource is an identified need for resource.

    The role of a required resource is determined by classification.
    "facility", "test equipment", "supervisor" are examples of
    classifications of a required resource.

    :ivar id: a set of Identifiers for the RequiredResource
    :ivar description: a set of text based descriptions of the
        RequiredResource.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this RequiredResource This
        RequiredResource is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar required_quantity: the required quantity of the required
        resource. The value of this attribute need not be specified.
        Quantity can be specified using amount or duration.
    :ivar item: a reference to an identifiable item (within the
        application context) that will satisfy that requirement for a
        resource. Tool kit, facility, and product category are examples
        of resource items.
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar collection_assignment:
    :ivar condition_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar requirement_assignment:
    :ivar scheme_subject_assignment:
    :ivar scheme_version_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    :ivar required_resource_relationship:
    """

    id: Optional["RequiredResource.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["RequiredResource.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["RequiredResource.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["RequiredResource.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    required_quantity: Optional["RequiredResource.RequiredQuantity"] = field(
        default=None,
        metadata={
            "name": "RequiredQuantity",
            "type": "Element",
            "namespace": "",
        },
    )
    item: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Item",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_subject_assignment: List[SchemeSubjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeSubjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_version_assignment: List[SchemeVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    required_resource_relationship: List[RequiredResourceRelationship] = field(
        default_factory=list,
        metadata={
            "name": "RequiredResourceRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class RequiredQuantity:
        value_with_unit: Optional[ValueWithUnit] = field(
            default=None,
            metadata={
                "name": "ValueWithUnit",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class RequirementCollectionRelationship(RequirementViewDefinitionRelationship):
    """A RequirementCollectionRelationship is a specialization of
    ViewDefinitionRelationship that is used to relate a parent (collection)
    requirement to its member requirements.

    This provides a method for collecting together a set of requirements
    and treating them as a single requirement, whilst still being able
    to refer to individual requirements. NOTE: The inherited "
    ViewDefinitionRelationship" and " ViewDefinitionRelationship"
    attributes have been renamed for purposes of clarity.
    """

    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ResourceAsRealized(BaseRootObject):
    """A ResourceAsRealized is a record of a resource that has been used or
    consumed.

    A resource as realized can be classified as "Used" or "Consumed".

    :ivar id: a set of Identifiers for the ResourceAsRealized
    :ivar description: a set of text based descriptions of the
        ResourceAsRealized.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this ResourceAsRealized This
        ResourceAsRealized is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar quantity: the amount of the ResourceAsRealized that has been
        used or consumed. The value of this attribute need not be
        specified. The quantity can be recorded as amount or duration.
    :ivar item: a reference to an item that is provided with resource
        management capabilities.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar condition_evaluation_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar scheme_subject_assignment:
    :ivar scheme_version_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar resource_as_realized_relationship:
    """

    id: Optional["ResourceAsRealized.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["ResourceAsRealized.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["ResourceAsRealized.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["ResourceAsRealized.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    quantity: Optional["ResourceAsRealized.Quantity"] = field(
        default=None,
        metadata={
            "name": "Quantity",
            "type": "Element",
            "namespace": "",
        },
    )
    item: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Item",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_subject_assignment: List[SchemeSubjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeSubjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_version_assignment: List[SchemeVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    resource_as_realized_relationship: List[ResourceAsRealizedRelationship] = (
        field(
            default_factory=list,
            metadata={
                "name": "ResourceAsRealizedRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Quantity:
        value_with_unit: Optional[ValueWithUnit] = field(
            default=None,
            metadata={
                "name": "ValueWithUnit",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ResourceEvent(BaseObject):
    """A ResourceEvent is an abstract generalization of instances that represents
    an event or action that affects the balance or availability of a managed
    resource.

    NOTE: Only non-abstract specializations of the ResourceEvent can be
    instantiated. A ResourceEvent is The role of a resource event is determined by which is
    defined by the ResourceEvent property. A resource event can be classified as "Planned"
    or "Actual".

    :ivar id: a set of Identifiers for the ResourceEvent
    :ivar description: a set of text based descriptions of the
        ResourceEvent.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this ResourceEvent This
        ResourceEvent is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar quantity: the measure of the amount of resource affected by
        the change. The value of this attribute need not be specified.
    :ivar resource: the managed resource that is affected by the
        resource event.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar collection_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar scheme_entry_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar work_request_assignment:
    :ivar resource_event_correspondence_relationship:
    :ivar resource_event_relationship:
    """

    id: Optional["ResourceEvent.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["ResourceEvent.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["ResourceEvent.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["ResourceEvent.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    quantity: Optional["ResourceEvent.Quantity"] = field(
        default=None,
        metadata={
            "name": "Quantity",
            "type": "Element",
            "namespace": "",
        },
    )
    resource: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Resource",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_entry_assignment: List[SchemeEntryAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeEntryAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    resource_event_correspondence_relationship: List[
        ResourceEventCorrespondenceRelationship
    ] = field(
        default_factory=list,
        metadata={
            "name": "ResourceEventCorrespondenceRelationship",
            "type": "Element",
            "namespace": "",
        },
    )
    resource_event_relationship: List[ResourceEventRelationship] = field(
        default_factory=list,
        metadata={
            "name": "ResourceEventRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Quantity:
        value_with_unit: Optional[ValueWithUnit] = field(
            default=None,
            metadata={
                "name": "ValueWithUnit",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ResourceItem(BaseRootObject):
    """A ResourceItem is an item that can occur in the role of a resource within
    the application context.

    A ResourceItem may be classified as "Facility", "Replaceable unit",
    or "Package".

    :ivar id: a set of Identifiers for the ResourceItem
    :ivar description: a set of text based descriptions of the
        ResourceItem.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this ResourceItem This
        ResourceItem is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar certification_assignment:
    :ivar collection_assignment:
    :ivar condition_evaluation_assignment:
    :ivar condition_assignment:
    :ivar contract_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar justification_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar scheme_subject_assignment:
    :ivar scheme_version_assignment:
    :ivar security_classification_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    :ivar work_request_assignment:
    :ivar resource_group_relationship:
    :ivar resource_item_relationship:
    """

    id: Optional["ResourceItem.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["ResourceItem.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["ResourceItem.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["ResourceItem.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List[CertificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation_assignment: List[ConditionEvaluationAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ConditionEvaluationAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    condition_assignment: List[ConditionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ConditionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_subject_assignment: List[SchemeSubjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeSubjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_version_assignment: List[SchemeVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    resource_group_relationship: List[ResourceGroupRelationship] = field(
        default_factory=list,
        metadata={
            "name": "ResourceGroupRelationship",
            "type": "Element",
            "namespace": "",
        },
    )
    resource_item_relationship: List[ResourceItemRelationship] = field(
        default_factory=list,
        metadata={
            "name": "ResourceItemRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class State(BaseRootObject):
    """A State is the mode of being in which something does or could exist or
    existed for a period of time.

    NOTE: A state's existence can be just a state that an
    instance is currently in, a predicted state that an instance will eventually be in, or
    an observed state that an instance has been in. NOTE: The period of existence may be an
    instant or longer. Main Engine No. 1 is in "operation". When Generator No. 2 surpasses
    5,000 service hours, it will enter "maintenance" mode. The portable computer's power
    supply was attached after it displayed a "low-battery" warning.

    :ivar id: a set of Identifiers for the State
    :ivar description: a set of text based descriptions of the State.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this State This State is a member
        of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar analysis_assignment:
    :ivar collection_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar requirement_assignment:
    :ivar work_request_assignment:
    :ivar composition_of_state:
    :ivar sequence_of_state:
    :ivar state_cause_effect:
    :ivar state_relationship:
    :ivar state_transition:
    """

    id: Optional["State.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["State.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["State.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["State.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    composition_of_state: List[CompositionOfState] = field(
        default_factory=list,
        metadata={
            "name": "CompositionOfState",
            "type": "Element",
            "namespace": "",
        },
    )
    sequence_of_state: List[SequenceOfState] = field(
        default_factory=list,
        metadata={
            "name": "SequenceOfState",
            "type": "Element",
            "namespace": "",
        },
    )
    state_cause_effect: List[StateCauseEffect] = field(
        default_factory=list,
        metadata={
            "name": "StateCauseEffect",
            "type": "Element",
            "namespace": "",
        },
    )
    state_relationship: List[StateRelationship] = field(
        default_factory=list,
        metadata={
            "name": "StateRelationship",
            "type": "Element",
            "namespace": "",
        },
    )
    state_transition: List[StateTransition] = field(
        default_factory=list,
        metadata={
            "name": "StateTransition",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class SystemVersionSequence(SystemVersionRelationship):
    """
    A SystemVersionSequence is a specialization of SystemVersionRelationship used
    to relate a previous version of a system to the version that replaces it.
    """


@dataclass
class TracingRelationship(RequirementViewDefinitionRelationship):
    """A TracingRelationship is a specialization of ViewDefinitionRelationship that
    shows tracing from ( TracingRelationship) one requirement to another (
    TracingRelationship). A requirement on the performance of a catalytic converter
    in a car.

    may be traced from a more general emissions requirement. A requirement may trace to many
    other requirements and vice versa - this is achieved by creating multiple instances of
    the tracing relationship entity. NOTE: The inherited " ViewDefinitionRelationship" and "
    ViewDefinitionRelationship" attributes have been renamed for purposes of clarity. NOTE:
    Properties may be attached to tracing relationships. This is intended to deal with "user
    defined" attributes which are common on tracing relationships in requirements tools.
    """

    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TypeOfPerson(BaseRootObject):
    """A TypeOfPerson is a type of person.

    Class 3 welder Truck driver Electronics engineer Mechanical
    technician Helicopter pilot

    :ivar id: a set of Identifiers for the TypeOfPerson
    :ivar description: a set of text based descriptions of the
        TypeOfPerson.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar has:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar collection_assignment:
    :ivar document_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar observed_environment_assignment:
    :ivar required_resource_assignment:
    :ivar scheme_subject_assignment:
    :ivar scheme_version_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    """

    id: Optional["TypeOfPerson.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["TypeOfPerson.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["TypeOfPerson.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    has: Optional["TypeOfPerson.Has"] = field(
        default=None,
        metadata={
            "name": "Has",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observed_environment_assignment: List[ObservedEnvironmentAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ObservedEnvironmentAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    required_resource_assignment: List[RequiredResourceAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequiredResourceAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_subject_assignment: List[SchemeSubjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeSubjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_version_assignment: List[SchemeVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Has:
        type_of_person_definition: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "TypeOfPersonDefinition",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ActivityActual(Activity):
    """An ActivityActual is a specialization of Activity.

    It is a record of the occurrence of an Activity. The ActivityActual
    is related through an ActivityHappening to the Activity of which it
    is an occurrence. The existence of an ActivityActual instance means
    that the ActivityActual has commenced. NOTE: A DateTimeAssignment
    classified as "start date" should assign a date to the
    ActivityActual to record when the activity started. NOTE: A date and
    time may be assigned to the activity with role "end date" to record
    when the activity finished. In general, the absence of this
    assignment cannot be used to infer that the activity is continuing,
    only that the end of the activity has not yet been recorded. NOTE: A
    more detailed history of the progress of an activity may be recorded
    by applying states to the activity, but the meaning of these states
    must be defined through local business rules.
    """

    resource_as_realized_assignment: List[ResourceAsRealizedAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ResourceAsRealizedAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )


@dataclass
class DecreasingResourceEvent(ResourceEvent):
    """A DecreasingResourceEvent is a specialization of ResourceEvent that
    decreases the balance of a managed resource.

    Filling a requisition reduces an inventory.
    """


@dataclass
class DirectedActivity(Activity):
    """A DirectedActivity is a specialization of Activity.

    It identifies an activity that is governed by a WorkOrder.

    :ivar directive: the WorkOrder that governs the DirectedActivity.
    """

    directive: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Directive",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class FunctionalElementUsage(BreakdownElementUsage):
    """A FunctionalElementUsage is a specialization of BreakdownElementUsage that
    is an association of a functional element to another functional element that is
    a constituent.

    FunctionalElement.
    """


@dataclass
class IncreasingResourceEvent(ResourceEvent):
    """A IncreasingResourceEvent is a type of ResourceEvent that increases the
    balance of a managed resource.

    Purchasing new stock increases an inventory.
    """


@dataclass
class PhysicalElementUsage(BreakdownElementUsage):
    """A PhysicalElementUsage is a specialization of BreakdownElementUsage that is
    a relationship between a parent and child PhysicalElement.

    In a physical breakdown, the aircraft (parent) might include (as
    children) a fuselage, wings, tail and undercarriage.
    """


@dataclass
class ProductViewDefinition(BaseObject):
    """A ProductViewDefinition is a characterization of a ProductVersion, relevant
    in one or more application domains and for one or more life cycle stages.

    A ProductViewDefinition is a collector of the properties that
    characterize the ProductVersion in the initialContext and
    additionalContexts. The design of the SS Titanic and the as-built
    description of the SS Titanic can be represented as two instances of
    ProductViewDefinition.

    :ivar id: a set of Identifiers for the ProductViewDefinition
    :ivar description: a set of text based descriptions of the
        ProductViewDefinition.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this ProductViewDefinition This
        ProductViewDefinition is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar initial_context: the initial ViewDefinitionContext in which
        the definedVersion has been characterized by the
        ProductViewDefinition.
    :ivar additional_contexts:
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar analysis_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar collection_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar justification_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar position_group_assignment:
    :ivar position_assignment:
    :ivar position_type_assignment:
    :ivar property_definition_assignment:
    :ivar property_value_assignment:
    :ivar requirement_assignment:
    :ivar resource_item_assignment:
    :ivar scheme_subject_assignment:
    :ivar scheme_version_assignment:
    :ivar security_classification_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    :ivar work_request_assignment:
    :ivar assembly_view_relationship:
    :ivar next_assembly_view_usage:
    :ivar product_in_attachment_slot:
    :ivar promissory_assembly_view_usage:
    :ivar view_definition_relationship:
    :ivar view_definition_usage:
    """

    id: Optional["ProductViewDefinition.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["ProductViewDefinition.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["ProductViewDefinition.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["ProductViewDefinition.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    initial_context: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "InitialContext",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    additional_contexts: Optional[
        "ProductViewDefinition.AdditionalContexts"
    ] = field(
        default=None,
        metadata={
            "name": "AdditionalContexts",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    position_group_assignment: List[PositionGroupAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PositionGroupAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    position_assignment: List[PositionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PositionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    position_type_assignment: List[PositionTypeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PositionTypeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_definition_assignment: List[PropertyDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    property_value_assignment: List[PropertyValueAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PropertyValueAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    resource_item_assignment: List[ResourceItemAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ResourceItemAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_subject_assignment: List[SchemeSubjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeSubjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_version_assignment: List[SchemeVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    assembly_view_relationship: List[AssemblyViewRelationship] = field(
        default_factory=list,
        metadata={
            "name": "AssemblyViewRelationship",
            "type": "Element",
            "namespace": "",
        },
    )
    next_assembly_view_usage: List[NextAssemblyViewUsage] = field(
        default_factory=list,
        metadata={
            "name": "NextAssemblyViewUsage",
            "type": "Element",
            "namespace": "",
        },
    )
    product_in_attachment_slot: List[ProductInAttachmentSlot] = field(
        default_factory=list,
        metadata={
            "name": "ProductInAttachmentSlot",
            "type": "Element",
            "namespace": "",
        },
    )
    promissory_assembly_view_usage: List[PromissoryAssemblyViewUsage] = field(
        default_factory=list,
        metadata={
            "name": "PromissoryAssemblyViewUsage",
            "type": "Element",
            "namespace": "",
        },
    )
    view_definition_relationship: List[ViewDefinitionRelationship] = field(
        default_factory=list,
        metadata={
            "name": "ViewDefinitionRelationship",
            "type": "Element",
            "namespace": "",
        },
    )
    view_definition_usage: List[ViewDefinitionUsage] = field(
        default_factory=list,
        metadata={
            "name": "ViewDefinitionUsage",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class AdditionalContexts:
        view_definition_context: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "ViewDefinitionContext",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class SchemeEntry(ActivityMethod):
    """A SchemeEntry is a specialization of ActivityMethod that provides the
    identification and description of a single entry in a specific Scheme.

    NOTE: A
    SchemeEntry may be associated with time constraints. NOTE: A SchemeEntry only exists
    within the scope of a specific Scheme.
    """

    scheme_entry_relationship: List[SchemeEntryRelationship] = field(
        default_factory=list,
        metadata={
            "name": "SchemeEntryRelationship",
            "type": "Element",
            "namespace": "",
        },
    )
    sequencing_relationship: List[SequencingRelationship] = field(
        default_factory=list,
        metadata={
            "name": "SequencingRelationship",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class StateObserved(State):
    """A StateObserved is a specialization of State.

    It is an individual or realized State that is observed.
    """

    state_predicted_to_observed: List[StatePredictedToObserved] = field(
        default_factory=list,
        metadata={
            "name": "StatePredictedToObserved",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class StatePredicted(State):
    """A StatePredicted is a specialization of State It is a predicted actual
    State.

    Where a predicted state needs to be related to an observed state,
    the StatePredictedToObserved entity shall be used.
    """


@dataclass
class SystemElementUsage(BreakdownElementUsage):
    """A SystemElementUsage is a specialization of BreakdownElementUsage that is a
    relationship between a SystemElementDefinition and another
    SystemElementDefinition that is a constituent.

    In a system breakdown, the fuel system might include a fuel storage
    system and a fuel injection system as components.
    """


@dataclass
class TaskElement(ActivityMethod):
    """A TaskElement is a specialization of ActivityMethod.

    It is a representation of all or part of how to undertake a task.
    """

    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    element_constraint: List[ElementConstraint] = field(
        default_factory=list,
        metadata={
            "name": "ElementConstraint",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_relationship: List[TaskElementRelationship] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementRelationship",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_state_relationship: List[TaskElementStateRelationship] = (
        field(
            default_factory=list,
            metadata={
                "name": "TaskElementStateRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
    )


@dataclass
class ZoneElementUsage(BreakdownElementUsage):
    """A ZoneElementUsage is a specialization of BreakdownElementUsage that is a
    relationship between a parent and child ZoneElement.

    In a zonal breakdown, the 'wing' (parent) might include (as
    children) an 'inner wing' and an 'outer wing'.
    """


@dataclass
class AnalysisDisciplineDefinition(ProductViewDefinition):
    """An AnalysisDisciplineDefinition is a specialization of
    ProductViewDefinition.

    It is a definition or view of an AnalysisVersion taken from the
    perspective of the analysing organization. The AnalysisDisciplineDefinition is
    controlled by the analysing organization. The entity may be used to capture the
    definition of a particular version of an analysis at any intermediate stage of its
    development where the definition is not formally released by an organization at the
    analysis version level. It may be used to capture the various stages in the definition
    cycle of a product. If the analysis is explicitly represented by a model then the model
    is referenced from AnalysisDisciplineDefinition.definitionalRepresentations.
    """

    definitional_representations: Optional[
        "AnalysisDisciplineDefinition.DefinitionalRepresentations"
    ] = field(
        default=None,
        metadata={
            "name": "DefinitionalRepresentations",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class DefinitionalRepresentations:
        analysis_model_object: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "AnalysisModelObject",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class AttachmentSlotDefinition(ProductViewDefinition):
    """An AttachmentSlotDefinition is a specialization of ProductViewDefinition
    that identifies a view of an AttachmentSlot.

    An airworthiness authority requires an airline company to report
    which individual engines power the aircraft at different times
    during the lifetime of the aircraft.
    """

    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class BreakdownElementDefinition(ProductViewDefinition):
    """A BreakdownElementDefinition is a specialization of ProductViewDefinition
    that identifies a view of a version ( BreakdownElementVersion) of a
    BreakdownElement.

    NOTE: BreakdownElementDefinition is non-specific and allows for
    various types of product breakdowns. The more specific breakdown element definitions are
    FunctionalElementDefinition, PhysicalElementDefinition, SystemElementDefinition and
    ZoneElementDefinition.
    """

    breakdown_element_usage: List[BreakdownElementUsage] = field(
        default_factory=list,
        metadata={
            "name": "BreakdownElementUsage",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class CollectionViewDefinition(ProductViewDefinition):
    """An CollectionViewDefinition is a specialization of ProductViewDefinition
    that represents a characterization of an CollectionVersion relevant in one or
    more application domains and for one or more life cycle stages.

    A set of data relevant to the design of the SS Titanic and a set of
    data relevant to the as-built description of the SS Titanic might be
    represented as two instances of CollectionViewDefinition.
    """

    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class DocumentDefinition(ProductViewDefinition):
    """A DocumentDefinition is a specialization of ProductViewDefinition that is a
    DocumentVersion in a particular format.

    NOTE: A DocumentVersion may have more than
    one representation. A version of a logical document, which contains a shape model, may
    be represented in the native formats of different CAD systems. Each DocumentDefinition
    is a DigitalDocumentDefinition or a PhysicalDocumentDefinition. NOTE: Aspects of the
    representation may not be known at the time the identification is established.
    """

    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_definition_relationship: List[DocumentDefinitionRelationship] = (
        field(
            default_factory=list,
            metadata={
                "name": "DocumentDefinitionRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
    )


@dataclass
class EndTask(TaskElement):
    """An EndTask is a type of TaskElement.

    It signifies a point at which to end the task.
    """


@dataclass
class EnvironmentDefinitionView(ProductViewDefinition):
    """A EnvironmentDefinitionView is a specialization of ProductViewDefinition
    that provides a view of a version of an environment definition relevant for one
    or more application domains.

    This view collects the characteristics that define an environment.
    NOTE: The characteristics include the resources available, the
    locations in which the product is to operate as well as climatic
    conditions such temperature ranges.
    """

    environment_assignment: List[EnvironmentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EnvironmentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observed_environment_assignment: List[ObservedEnvironmentAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ObservedEnvironmentAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    environment_view_definition_relationship: List[
        EnvironmentViewDefinitionRelationship
    ] = field(
        default_factory=list,
        metadata={
            "name": "EnvironmentViewDefinitionRelationship",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ExitLoop(TaskElement):
    """An ExitLoop is a type of StructuredTaskElement.

    It signifies a point at which to exit from a loop.
    """


@dataclass
class InterfaceConnectorDefinition(ProductViewDefinition):
    """An InterfaceConnectorDefinition is a specialization of ProductViewDefinition
    that identifies a view of an InterfaceConnectorVersion.

    A reliability engineer assesses the likely failure modes of design
    version 3.8 for the connector between a brake unit and the hydraulic
    control system. The engineer generates a set of data that is a
    specific view of the connector. An instance of the
    InterfaceConnectorDefinition entity data type collects these data
    together.

    :ivar connector_on: the item for which the
        InterfaceConnectorDefinition provides an interface capability.
    :ivar information_usage_right_assignment:
    :ivar selected_item_assignment:
    """

    connector_on: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "ConnectorOn",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    selected_item_assignment: List[SelectedItemAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SelectedItemAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class InterfaceSpecificationDefinition(ProductViewDefinition):
    """An InterfaceSpecificationDefinition is a specialization of
    ProductViewDefinition that provides a view of an InterfaceSpecification.

    When developing a BSI standard for connecting domestic electrical
    equipment to the electricity supply, collected comments from experts
    form a new view on a version of the standard.
    """

    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ObservedEnvironmentView(ProductViewDefinition):
    """An ObservedEnvironmentView is a specialization of ProductViewDefinition that
    provides a view of a version of an observed environment relevant for one or
    more application domains.

    This view collects the characteristics of the observations on the
    environment.
    """

    observed_environment_view_definition_relationship: List[
        ObservedEnvironmentViewDefinitionRelationship
    ] = field(
        default_factory=list,
        metadata={
            "name": "ObservedEnvironmentViewDefinitionRelationship",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PartViewDefinition(ProductViewDefinition):
    """
    A PartViewDefinition is a specialization of ProductViewDefinition that defines
    a characterization view of a version of a Part.
    """

    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    make_from_relationship: List[MakeFromRelationship] = field(
        default_factory=list,
        metadata={
            "name": "MakeFromRelationship",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ProductAsIndividualView(ProductViewDefinition):
    """A ProductAsIndividualView is a specialization of ProductViewDefinition that
    defines a characterization view of a version of a ProductAsIndividual.

    NOTE: The
    ProductAsIndividualView entity type supports the representation of different views of a
    ProductAsIndividual for different purposes. Multiple views of the same
    ProductAsIndividual are represented by different instances of ProductAsIndividualView
    for the same ProductAsIndividualVersion.
    """

    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ProductVersion(BaseObject):
    """A ProductVersion is a revision of a Product.

    It is a collector of the definitions of this revision of the
    Product. NOTE: The set of all instances of ProductVersion of the
    same Product represents the history of the product.

    :ivar id: a set of Identifiers for the ProductVersion
    :ivar description: a set of text based descriptions of the
        ProductVersion.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this ProductVersion This
        ProductVersion is a member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar view_definitions: the views of the ProductVersion.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar analysis_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar assumption_assignment:
    :ivar certification_assignment:
    :ivar collection_assignment:
    :ivar date_time_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar environment_assignment:
    :ivar justification_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar observed_environment_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar position_group_assignment:
    :ivar position_assignment:
    :ivar position_type_assignment:
    :ivar project_assignment:
    :ivar requirement_assignment:
    :ivar resource_item_assignment:
    :ivar scheme_subject_assignment:
    :ivar scheme_version_assignment:
    :ivar security_classification_assignment:
    :ivar selected_item_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    :ivar work_request_assignment:
    :ivar product_version_relationship:
    :ivar supplied_part_relationship:
    """

    id: Optional["ProductVersion.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["ProductVersion.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["ProductVersion.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["ProductVersion.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    view_definitions: Optional["ProductVersion.ViewDefinitions"] = field(
        default=None,
        metadata={
            "name": "ViewDefinitions",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    assumption_assignment: List[AssumptionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AssumptionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List[CertificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    environment_assignment: List[EnvironmentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EnvironmentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observed_environment_assignment: List[ObservedEnvironmentAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ObservedEnvironmentAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    position_group_assignment: List[PositionGroupAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PositionGroupAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    position_assignment: List[PositionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PositionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    position_type_assignment: List[PositionTypeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PositionTypeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    project_assignment: List[ProjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ProjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    resource_item_assignment: List[ResourceItemAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ResourceItemAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_subject_assignment: List[SchemeSubjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeSubjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_version_assignment: List[SchemeVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    selected_item_assignment: List[SelectedItemAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SelectedItemAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    product_version_relationship: List[ProductVersionRelationship] = field(
        default_factory=list,
        metadata={
            "name": "ProductVersionRelationship",
            "type": "Element",
            "namespace": "",
        },
    )
    supplied_part_relationship: List[SuppliedPartRelationship] = field(
        default_factory=list,
        metadata={
            "name": "SuppliedPartRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ViewDefinitions:
        product_view_definition: List[ProductViewDefinition] = field(
            default_factory=list,
            metadata={
                "name": "ProductViewDefinition",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class RequirementViewDefinition(ProductViewDefinition):
    """A RequirementViewDefinition is a specialization of ProductViewDefinition
    that provides a view of a requirement version relevant for one or more
    application domains. This view collects requirement data for specific
    engineering.

    purposes. An engineer may have responsibility for collecting all requirements associated
    with the cooling of an engine - covering engine block, tubing, water pump, electric fan.
    Some requirements in a RequirementViewDefinition might impact on different disciplines.
    Multiple RequirementViewDefinition instances may be used to present different views of a
    given requirement for each discipline. The definition of the requirement is represented
    by a set of definitional properties referenced from
    RequirementViewDefinition.definitionalRepresentations. If more than one definitional
    property is provided each property shall be equivalent. Any other property that is
    associated with the RequirementViewDefinition is assumed to be a non-defining property,
    such as an annotation etc. The requirement that the weight should be less than 4 Kgs can
    be represented by by a string representation "weight must be 4Kg" and a numeric
    representation "4Kg" specified as a value with units. NOTE: The definition attribute of
    each of the definitionalRepresentations shall refer to a definition for
    RequirementDefinition. The definition attribute of the definitionalRepresentations could
    refer to an ExternalPropertyDefinition that uses an ExternalOwlObject with individual
    set to
    "http://docs.oasis-open.org/plcs/ns/plcslib/v1.0/data/contexts/OASIS/refdata/plcs-rdl#Requirement_definition".

    :ivar definitional_representations: the properties that define the
        requirement
    :ivar contract_assignment:
    :ivar information_usage_right_assignment:
    :ivar requirement_collection_relationship:
    :ivar requirement_view_definition_relationship:
    :ivar tracing_relationship:
    """

    definitional_representations: Optional[
        "RequirementViewDefinition.DefinitionalRepresentations"
    ] = field(
        default=None,
        metadata={
            "name": "DefinitionalRepresentations",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_collection_relationship: List[
        RequirementCollectionRelationship
    ] = field(
        default_factory=list,
        metadata={
            "name": "RequirementCollectionRelationship",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_view_definition_relationship: List[
        RequirementViewDefinitionRelationship
    ] = field(
        default_factory=list,
        metadata={
            "name": "RequirementViewDefinitionRelationship",
            "type": "Element",
            "namespace": "",
        },
    )
    tracing_relationship: List[TracingRelationship] = field(
        default_factory=list,
        metadata={
            "name": "TracingRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class DefinitionalRepresentations:
        property_value: List[PropertyValue] = field(
            default_factory=list,
            metadata={
                "name": "PropertyValue",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class RiskViewDefinition(ProductViewDefinition):
    """
    ARiskViewDefinition is a specialization of a ProductViewDefinition  and is an
    abstract generalization of instances that represents … NOTE: Only non-abstract
    specializations of the RiskViewDefinition can be instantiated.
    """


@dataclass
class SchemeVersion(ActivityMethod):
    """A SchemeVersion is a specialization of ActivityMethod.

    It enables version control of Scheme.

    :ivar entries: the SchemeEntrys that are within a SchemeVersion.
    :ivar scheme_version_relationship:
    """

    entries: Optional["SchemeVersion.Entries"] = field(
        default=None,
        metadata={
            "name": "Entries",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_version_relationship: List[SchemeVersionRelationship] = field(
        default_factory=list,
        metadata={
            "name": "SchemeVersionRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Entries:
        scheme_entry: List[SchemeEntry] = field(
            default_factory=list,
            metadata={
                "name": "SchemeEntry",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class StartTask(TaskElement):
    """A StartTask is a type of TaskElement.

    It signifies the start point of the task. NOTE: Not all formal task
    description require start and end elements, their inclusion is in a
    sequence is optional.
    """


@dataclass
class StructuredTaskElement(TaskElement):
    """A StructuredTaskElement is a type of TaskElement.

    It is made up of other TaskElements
    """


@dataclass
class SystemViewDefinition(ProductViewDefinition):
    """
    A SystemViewDefinition is a specialization of ProductViewDefinition that
    provides a view of a system version relevant for one or more application
    domains.
    """


@dataclass
class TaskElementLevels(TaskElement):
    """A TaskElementLevels is a type of TaskElement that provides two or more
    different descriptions in place of a single method.

    The actual work will be the same whichever alternative TaskElement
    is followed. NOTE: This can be used to provide different levels of
    description of a task for people with varying levels of experience
    or expertise.

    :ivar alternatives: the TaskElements describing two or more ways in
        which the same work may be undertaken.
    """

    alternatives: Optional["TaskElementLevels.Alternatives"] = field(
        default=None,
        metadata={
            "name": "Alternatives",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class Alternatives:
        task_element: List[TaskElement] = field(
            default_factory=list,
            metadata={
                "name": "TaskElement",
                "type": "Element",
                "namespace": "",
                "min_occurs": 2,
            },
        )


@dataclass
class TaskInvocation(TaskElement):
    """A TaskInvocation is a type of TaskElement.

    It is an instruction to perform another task. A TaskElement calls a
    predefined task to perform an instrument calibration.

    :ivar task_method: the TaskMethod to be invoked.
    """

    task_method: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "TaskMethod",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class TaskMethodVersion(ActivityMethod):
    """
    A TaskMethodVersion is a specialization of ActivityMethod which allows the
    explicit reference to versions of a TaskMethodand to track changes against a
    TaskMethod.

    :ivar content: the way in which the task is to be carried out. The
        value of this attribute need not be specified.
    :ivar information_usage_right_assignment:
    :ivar location_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    :ivar task_method_state_relationship:
    :ivar task_method_version_relationship:
    """

    content: Optional["TaskMethodVersion.Content"] = field(
        default=None,
        metadata={
            "name": "Content",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_state_relationship: List[TaskMethodStateRelationship] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodStateRelationship",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_relationship: List[TaskMethodVersionRelationship] = (
        field(
            default_factory=list,
            metadata={
                "name": "TaskMethodVersionRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
    )

    @dataclass
    class Content:
        task_element: Optional[TaskElement] = field(
            default=None,
            metadata={
                "name": "TaskElement",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class TaskStep(TaskElement):
    """
    A TaskStep is a specialization of TaskElement that is not further sub-divided.

    :ivar step_text: the text describing what is to be done to
        accomplish the TaskStep
    """

    step_text: Optional["TaskStep.StepText"] = field(
        default=None,
        metadata={
            "name": "StepText",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class StepText:
        localized_string: List[LocalizedString] = field(
            default_factory=list,
            metadata={
                "name": "LocalizedString",
                "type": "Element",
                "namespace": "",
                "min_occurs": 1,
            },
        )


@dataclass
class AdvisoryTaskStep(TaskStep):
    """An AdvisoryTaskStep is a type of TaskStep.

    It conveys information. NOTE: Some TaskMethods may not require any
    action to be undertaken. "Beware of hot exhausts", "do not use tool
    X this way" and similar messages.
    """


@dataclass
class AnalysisVersion(ProductVersion):
    """
    An AnalysisVersion is a specialization of ProductVersion that identifies a
    particular version of an analysis.
    """

    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_version_relationship: List[AnalysisVersionRelationship] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisVersionRelationship",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_version_sequence: List[AnalysisVersionSequence] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisVersionSequence",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class AttachmentSlotVersion(ProductVersion):
    """An AttachmentSlotVersion is a specialization of ProductVersion that
    identifies a version of AttachmentSlot.

    NOTE: This is a generic concept of version, in
    most situations it is possible and more specific to represent a version as
    AttachmentSlotDesign, AttachmentSlotAsPlanned or AttachmentSlotAsRealized.
    """

    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class BreakdownElementVersion(ProductVersion):
    """A BreakdownElementVersion is a specialization of ProductVersion that
    identifies a version of a BreakdownElement.

    NOTE: BreakdownElementVersion is
    non-specific and allows for various types of product breakdown. The more specific
    breakdown elements are FunctionalElementVersion, PhysicalElementVersion,
    SystemElementVersion and ZoneElementVersion.
    """


@dataclass
class BreakdownVersion(ProductVersion):
    """
    A BreakdownVersion is a specialization of ProductVersion that identifies a
    version of a Breakdown.

    :ivar breakdown_of: the Breakdown_version shall be a breakdown of
        one and only one product.
    :ivar contract_assignment:
    :ivar information_usage_right_assignment:
    """

    breakdown_of: Optional["BreakdownVersion.BreakdownOf"] = field(
        default=None,
        metadata={
            "name": "BreakdownOf",
            "type": "Element",
            "namespace": "",
        },
    )
    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class BreakdownOf:
        breakdown_of: List[BreakdownOf] = field(
            default_factory=list,
            metadata={
                "name": "BreakdownOf",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class CollectionVersion(ProductVersion):
    """
    An CollectionVersion is a specialization of ProductVersion that represents a
    revision of an Collection.
    """

    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_version_relationship: List[CollectionVersionRelationship] = (
        field(
            default_factory=list,
            metadata={
                "name": "CollectionVersionRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    collection_version_sequence_relationship: List[
        CollectionVersionSequenceRelationship
    ] = field(
        default_factory=list,
        metadata={
            "name": "CollectionVersionSequenceRelationship",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ConcurrentElements(StructuredTaskElement):
    """A ConcurrentElements is a specialization of StructuredTaskElement that
    comprises a set of actions to be performed during the time required for the
    longest task.

    No specific order is required.

    :ivar elements: the TaskElements to be performed.
    """

    elements: Optional["ConcurrentElements.Elements"] = field(
        default=None,
        metadata={
            "name": "Elements",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class Elements:
        task_element: List[TaskElement] = field(
            default_factory=list,
            metadata={
                "name": "TaskElement",
                "type": "Element",
                "namespace": "",
                "min_occurs": 2,
            },
        )


@dataclass
class DecisionPoint(StructuredTaskElement):
    """A DecisionPoint is a type of StructuredTaskElement.

    It requires a decision that determines which further TaskElement is
    to be followed. NOTE: The condition on which the decision is based
    optionally allows a further TaskElement to be invoked to provide the
    basis for the decision.

    :ivar condition: the criterion to be tested in order to make a
        decision.
    :ivar true_case_element: the TaskElement to be performed if the test
        condition is satisfied. The value of this attribute need not be
        specified.
    :ivar false_case_element: the TaskElement to be performed if the
        test condition is not satisfied. The value of this attribute
        need not be specified.
    :ivar unknown_case_element: the TaskElement to be performed if the
        test condition can not be evaluated or returns unknown. The
        value of this attribute need not be specified.
    """

    condition: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Condition",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    true_case_element: Optional["DecisionPoint.TrueCaseElement"] = field(
        default=None,
        metadata={
            "name": "TrueCaseElement",
            "type": "Element",
            "namespace": "",
        },
    )
    false_case_element: Optional["DecisionPoint.FalseCaseElement"] = field(
        default=None,
        metadata={
            "name": "FalseCaseElement",
            "type": "Element",
            "namespace": "",
        },
    )
    unknown_case_element: Optional["DecisionPoint.UnknownCaseElement"] = field(
        default=None,
        metadata={
            "name": "UnknownCaseElement",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class TrueCaseElement:
        task_element: Optional[TaskElement] = field(
            default=None,
            metadata={
                "name": "TaskElement",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class FalseCaseElement:
        task_element: Optional[TaskElement] = field(
            default=None,
            metadata={
                "name": "TaskElement",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class UnknownCaseElement:
        task_element: Optional[TaskElement] = field(
            default=None,
            metadata={
                "name": "TaskElement",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class DigitalDocumentDefinition(DocumentDefinition):
    """A DigitalDocumentDefinition is a specialization of DocumentDefinition.

    It identifies a collection of files that are archived on an optical
    computer disc, magnetic, electronic storage, or a combination
    thereof. A digital document definition may consist of one or many
    component digital files.
    """

    files: Optional["DigitalDocumentDefinition.Files"] = field(
        default=None,
        metadata={
            "name": "Files",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Files:
        digital_file: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "DigitalFile",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class DocumentVersion(ProductVersion):
    """
    A DocumentVersion is a specialization of ProductVersion A DocumentVersion
    identifies a particular version of a document.
    """

    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EnvironmentDefinitionVersion(ProductVersion):
    """
    A EnvironmentDefinitionVersion is a specialization of ProductVersion that
    identifies a particular version of an EnvironmentDefinition.
    """


@dataclass
class FunctionalElementDefinition(BreakdownElementDefinition):
    """
    A FunctionalElementDefinition is a specialization of BreakdownElementDefinition
    that identifies a view of a version ( FunctionalElementVersion ) of a
    FunctionalElement.
    """

    functional_element_usage: List[FunctionalElementUsage] = field(
        default_factory=list,
        metadata={
            "name": "FunctionalElementUsage",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class InterfaceConnectorVersion(ProductVersion):
    """
    An InterfaceConnectorVersion is a specialization of ProductVersion that
    identifies a version of an InterfaceConnector.
    """

    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class InterfaceSpecificationVersion(ProductVersion):
    """An InterfaceSpecificationVersion is a specialization of ProductVersion that
    identifies a version of an InterfaceSpecification.

    In 1999, BSI issues a new version of a standard for connecting
    domestic electrical equipment to the electricity supply.
    """

    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class LoopingElement(StructuredTaskElement):
    """A LoopingElement is a specialization of TaskElement.

    It invokes a specified number of repetitions of a further
    TaskElement.

    :ivar repeated_element: the TaskElement to be repeated in the
        looping element.
    """

    repeated_element: Optional["LoopingElement.RepeatedElement"] = field(
        default=None,
        metadata={
            "name": "RepeatedElement",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class RepeatedElement:
        task_element: Optional[TaskElement] = field(
            default=None,
            metadata={
                "name": "TaskElement",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )


@dataclass
class ObservedEnvironmentVersion(ProductVersion):
    """
    An ObservedEnvironmentVersion is a specialization of ProductVersion that
    identifies a particular version of an ObservedEnvironment.
    """


@dataclass
class PartVersion(ProductVersion):
    """A PartVersion is a specialization of ProductVersion that identifies a
    version of a part.

    A PartVersion serves as the collector of the data characterizing a
    realizable object in various application contexts. NOTE: A
    PartVersion is expected to be functionally and physically
    interchangeable with the other versions of the same Part.
    """

    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PhysicalDocumentDefinition(DocumentDefinition):
    """A PhysicalDocumentDefinition is a specialization of DocumentDefinition.

    A physical document definition may consist of one or many component
    hardcopy files. Paper plots of technical drawings, micro fiche, or
    paper documents such as calculations or test reports are examples of
    PhysicalDocumentDefinition.
    """

    components: Optional["PhysicalDocumentDefinition.Components"] = field(
        default=None,
        metadata={
            "name": "Components",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Components:
        hardcopy: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "Hardcopy",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class PhysicalElementDefinition(BreakdownElementDefinition):
    """
    A PhysicalElementDefinition is a specialization of BreakdownElementDefinition
    that identifies a view of a version ( PhysicalElementVersion) of a
    PhysicalElement.
    """

    physical_element_usage: List[PhysicalElementUsage] = field(
        default_factory=list,
        metadata={
            "name": "PhysicalElementUsage",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Product(BaseRootObject):
    """A Product is the identification of a product or of a type of product.

    It is a collector of data common to all revisions of the Product.
    NOTE: Products that this entity data type can represent, include:
    products existing in the real world; products that may come into
    existence as a consequence of some realization process. This
    includes parts and documents; products that are functions. The SS
    Titanic is a product that could be represented by the entity data
    type Product. Lifeboat is a class of products that could be
    represented by the entity data type Product. Each lifeboat on the SS
    Titanic is a member of this class. NOTE: A product is identified by
    an organization or a person in an organization. NOTE: A product may
    have zero or more versions. A version of a product is represented
    with an instance of the entity ProductVersion or of one of its
    specializations.

    :ivar id: a set of Identifiers for the Product
    :ivar description: a set of text based descriptions of the Product.
    :ivar classified_as: a reference to a class held externally to the
        exchange file that classifies this Product This Product is a
        member of the referenced class.
    :ivar same_as: a reference to an ExternalOwlClass or an ExternalItem
        held externally to the exchange file for which this is a proxy.
    :ivar versions: the versions of the Product.
    :ivar activity_assignment:
    :ivar work_order_assignment:
    :ivar analysis_assignment:
    :ivar activity_method_assignment:
    :ivar approval_assignment:
    :ivar assumption_assignment:
    :ivar certification_assignment:
    :ivar collection_assignment:
    :ivar document_assignment:
    :ivar effectivity_assignment:
    :ivar environment_assignment:
    :ivar justification_assignment:
    :ivar location_assignment:
    :ivar observation_assignment:
    :ivar observed_environment_assignment:
    :ivar organization_or_person_in_organization_assignment:
    :ivar position_group_assignment:
    :ivar position_assignment:
    :ivar position_type_assignment:
    :ivar project_assignment:
    :ivar requirement_assignment:
    :ivar resource_item_assignment:
    :ivar scheme_subject_assignment:
    :ivar scheme_version_assignment:
    :ivar security_classification_assignment:
    :ivar selected_item_assignment:
    :ivar state_assignment:
    :ivar state_definition_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    :ivar work_request_assignment:
    :ivar alternate_product_relationship:
    :ivar product_relationship:
    """

    id: Optional["Product.Id"] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "",
        },
    )
    description: Optional["Product.Description"] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "",
        },
    )
    classified_as: Optional["Product.ClassifiedAs"] = field(
        default=None,
        metadata={
            "name": "ClassifiedAs",
            "type": "Element",
            "namespace": "",
        },
    )
    same_as: Optional["Product.SameAs"] = field(
        default=None,
        metadata={
            "name": "SameAs",
            "type": "Element",
            "namespace": "",
        },
    )
    versions: Optional["Product.Versions"] = field(
        default=None,
        metadata={
            "name": "Versions",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_assignment: List[ActivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order_assignment: List[WorkOrderAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrderAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_assignment: List[AnalysisAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_assignment: List[ActivityMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    approval_assignment: List[ApprovalAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ApprovalAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    assumption_assignment: List[AssumptionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "AssumptionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    certification_assignment: List[CertificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CertificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_assignment: List[CollectionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "CollectionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    document_assignment: List[DocumentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DocumentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity_assignment: List[EffectivityAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EffectivityAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    environment_assignment: List[EnvironmentAssignment] = field(
        default_factory=list,
        metadata={
            "name": "EnvironmentAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    justification_assignment: List[JustificationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "JustificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    observed_environment_assignment: List[ObservedEnvironmentAssignment] = (
        field(
            default_factory=list,
            metadata={
                "name": "ObservedEnvironmentAssignment",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    organization_or_person_in_organization_assignment: List[
        OrganizationOrPersonInOrganizationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationOrPersonInOrganizationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    position_group_assignment: List[PositionGroupAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PositionGroupAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    position_assignment: List[PositionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PositionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    position_type_assignment: List[PositionTypeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "PositionTypeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    project_assignment: List[ProjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ProjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_assignment: List[RequirementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "RequirementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    resource_item_assignment: List[ResourceItemAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ResourceItemAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_subject_assignment: List[SchemeSubjectAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeSubjectAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_version_assignment: List[SchemeVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SchemeVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification_assignment: List[
        SecurityClassificationAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassificationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    selected_item_assignment: List[SelectedItemAssignment] = field(
        default_factory=list,
        metadata={
            "name": "SelectedItemAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assignment: List[StateAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition_assignment: List[StateDefinitionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinitionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request_assignment: List[WorkRequestAssignment] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequestAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    alternate_product_relationship: List[AlternateProductRelationship] = field(
        default_factory=list,
        metadata={
            "name": "AlternateProductRelationship",
            "type": "Element",
            "namespace": "",
        },
    )
    product_relationship: List[ProductRelationship] = field(
        default_factory=list,
        metadata={
            "name": "ProductRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Id:
        identifier: List[Identifier] = field(
            default_factory=list,
            metadata={
                "name": "Identifier",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Description:
        descriptor: List[Descriptor] = field(
            default_factory=list,
            metadata={
                "name": "Descriptor",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class ClassifiedAs:
        classification: List[Classification] = field(
            default_factory=list,
            metadata={
                "name": "Classification",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class SameAs:
        proxy: List[Proxy] = field(
            default_factory=list,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Versions:
        product_version: List[ProductVersion] = field(
            default_factory=list,
            metadata={
                "name": "ProductVersion",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ProductAsIndividualVersion(ProductVersion):
    """A ProductAsIndividualVersion is a specialization of ProductVersion.

    It is a revision of a ProductAsIndividual and acts as a collector of
    the definitions of this revision. The car on my drive is represented
    by a ProductAsIndividual. The current configuration status of the
    car can be represented by a ProductAsRealized related to the
    ProductAsIndividual. If a safety modification is made to the car
    resulting in a new configuration status of the car, then this may be
    represented by a new ProductAsRealized. HMS Daring is the first of a
    new class of ships known as Type 45 Destroyers. It is due to enter
    service in two years time. The version of the generic Type 45 ship
    design that applies to HMS Daring is represented by a
    ProductVersion; The ship HMS Daring is represented by a
    ProductAsIndividual. This identifies the planned ship, and when
    built, the actual ship; The planned revision of the future ship HMS
    Daring is represented by a ProductAsPlanned related back to the
    ProductAsIndividual; When built, the first revision the actual ship,
    HMS Daring will be represented by a ProductAsRealized related back
    to the ProductAsIndividual.
    """


@dataclass
class RequirementVersion(ProductVersion):
    """A RequirementVersion is a specialization of ProductVersion that identifies a
    particular version of a requirement. NOTE: This entity is used to record.

    different versions of a requirement. In this case, the word "version" implies "revision"
    - that is a particular release of a requirement. A given requirement might have versions
    1.0, 1.1, 1.2 and 2.0.
    """

    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_version_relationship: List[RequirementVersionRelationship] = (
        field(
            default_factory=list,
            metadata={
                "name": "RequirementVersionRelationship",
                "type": "Element",
                "namespace": "",
            },
        )
    )


@dataclass
class RiskConsequence(RiskViewDefinition):
    """A RiskConsequence is a specialization of RiskViewDefinition and specifies
    the outcome of an event.

    NOTE: There may be one or more consequences of an
    event. NOTE: Consequences can range from positive to negative. However, consequences are
    always negative for safety aspects. NOTE: Consequences can be expressed qualitatively or
    quantitatively.
    """

    causal_consequence: List[CausalConsequence] = field(
        default_factory=list,
        metadata={
            "name": "CausalConsequence",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class RiskPerception(RiskViewDefinition):
    """A RiskPerception is a specialization of RiskViewDefinition that defines
    values or concerns (a risk level) with which a stakeholder views a particular
    Risk.

    The
    risk level is represented by a set of property values referenced from
    RiskPerception.riskLevelRepresentations. If more than one property value is provided
    each property value shall be equivalent. One riskLevelRepresentation could be 4 (from a
    maximum of 5) and a second could be "high". NOTE: The definition attribute of each of
    the riskLevelRepresentations shall refer to a definition for RiskLevel. The definition
    attribute of the riskLevelRepresentations could refer to an ExternalPropertyDefinition
    that uses an ExternalOwlObject with individual set to
    "http://docs.oasis-open.org/plcs/ns/plcslib/v1.0/data/contexts/OASIS/refdata/plcs-rdl#Risk_Level".
    NOTE: RiskPerception depends on the stake holder's expressed needs, issues, and
    knowledge. NOTE: RiskPerception can differ from objective data. NOTE: RiskPerception may
    be used qualitatively or quantitatively to form a risk matrix. NOTE: Risk will be
    perceived differently in different contexts, such as in the context of human safety,
    mission success, project time schedule, performance or economy.

    :ivar risk_level_representations: optionally defines a collection of
        representations for an identifiable goal or objective for the
        RiskPerception.
    :ivar risk_event:
    :ivar related_consequence:
    :ivar risk_perception_relationship:
    """

    risk_level_representations: Optional[
        "RiskPerception.RiskLevelRepresentations"
    ] = field(
        default=None,
        metadata={
            "name": "RiskLevelRepresentations",
            "type": "Element",
            "namespace": "",
        },
    )
    risk_event: List[RiskEvent] = field(
        default_factory=list,
        metadata={
            "name": "RiskEvent",
            "type": "Element",
            "namespace": "",
        },
    )
    related_consequence: List[RelatedConsequence] = field(
        default_factory=list,
        metadata={
            "name": "RelatedConsequence",
            "type": "Element",
            "namespace": "",
        },
    )
    risk_perception_relationship: List[RiskPerceptionRelationship] = field(
        default_factory=list,
        metadata={
            "name": "RiskPerceptionRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class RiskLevelRepresentations:
        property_value: List[PropertyValue] = field(
            default_factory=list,
            metadata={
                "name": "PropertyValue",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class RiskVersion(ProductVersion):
    """A RiskVersion is a specialization of ProductVersion.

    It defines a form of a risk that differ in certain respects from an
    earlier form of that risk or from other forms of that risk. NOTE:
    Use of RiskVersion allows several RiskPerception instances to be
    assigned to a specific Risk.
    """


@dataclass
class Scheme(ActivityMethod):
    """A Scheme is a specialization of ActivityMethod.

    It provides the identification and description of an intended course
    of action to accomplish an objective. A Scheme enables the ordering
    of entries. Dates and times may be specified for entries and time
    intervals between entries. NOTE: A Scheme may be classified as a
    Plan or Schedule, and it may be further classified into specific
    types of Plans or Schedules. Acquisition plan, Maintenance plan,
    Resource schedule are examples of schemes.

    :ivar versions: the versions of the Scheme
    :ivar scheme_relationship:
    """

    versions: Optional["Scheme.Versions"] = field(
        default=None,
        metadata={
            "name": "Versions",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme_relationship: List[SchemeRelationship] = field(
        default_factory=list,
        metadata={
            "name": "SchemeRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Versions:
        scheme_version: List[SchemeVersion] = field(
            default_factory=list,
            metadata={
                "name": "SchemeVersion",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class SystemElementDefinition(BreakdownElementDefinition):
    """A SystemElementDefinition is a specialization of BreakdownElementDefinition
    that identifies a view of a version ( SystemElementVersion) of a SystemElement.

    The collision avoidance system element of a system breakdown is
    subject to a level of repair analysis to support implementation of
    optimized maintenance for an aircraft.
    """

    system_element_usage: List[SystemElementUsage] = field(
        default_factory=list,
        metadata={
            "name": "SystemElementUsage",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class SystemVersion(ProductVersion):
    """A SystemVersion is a specialization of ProductVersion that represents a
    particular version of a system.

    NOTE: In this case, this means "revision". So for a
    given system (e.g. a fuel injection system) we may have several versions of the system
    design (e.g. v1, v1.1 etc.)
    """

    system_version_relationship: List[SystemVersionRelationship] = field(
        default_factory=list,
        metadata={
            "name": "SystemVersionRelationship",
            "type": "Element",
            "namespace": "",
        },
    )
    system_version_sequence: List[SystemVersionSequence] = field(
        default_factory=list,
        metadata={
            "name": "SystemVersionSequence",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class TaskElementSequence(StructuredTaskElement):
    """
    A TaskElementSequence is a specialization of TaskElement that comprises a
    sequence of steps to be followed in a specified order.

    :ivar elements: the TaskElements to be followed in the order
        specified in the list.
    """

    elements: Optional["TaskElementSequence.Elements"] = field(
        default=None,
        metadata={
            "name": "Elements",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )

    @dataclass
    class Elements:
        task_element: List[TaskElement] = field(
            default_factory=list,
            metadata={
                "name": "TaskElement",
                "type": "Element",
                "namespace": "",
                "min_occurs": 2,
            },
        )


@dataclass
class TaskMethod(ActivityMethod):
    """A TaskMethod is a specialization of ActivityMethod.

    It is a specification of work. NOTE: The task method may be
    implemented using people, machines or a combination.

    :ivar objective:
    :ivar versions: the versions of the TaskMethod.
    :ivar information_usage_right_assignment:
    :ivar location_assignment:
    :ivar task_element_assignment:
    :ivar task_method_assignment:
    :ivar task_method_version_assignment:
    :ivar task_method_relationship:
    """

    objective: Optional["TaskMethod.Objective"] = field(
        default=None,
        metadata={
            "name": "Objective",
            "type": "Element",
            "namespace": "",
        },
    )
    versions: Optional["TaskMethod.Versions"] = field(
        default=None,
        metadata={
            "name": "Versions",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    location_assignment: List[LocationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "LocationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_element_assignment: List[TaskElementAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskElementAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_assignment: List[TaskMethodAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_version_assignment: List[TaskMethodVersionAssignment] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodVersionAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method_relationship: List[TaskMethodRelationship] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethodRelationship",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Objective:
        task_objective: List[Reference] = field(
            default_factory=list,
            metadata={
                "name": "TaskObjective",
                "type": "Element",
                "namespace": "",
            },
        )

    @dataclass
    class Versions:
        task_method_version: List[TaskMethodVersion] = field(
            default_factory=list,
            metadata={
                "name": "TaskMethodVersion",
                "type": "Element",
                "namespace": "",
            },
        )


@dataclass
class ZoneElementDefinition(BreakdownElementDefinition):
    """A ZoneElementDefinition is a specialization of BreakdownElementDefinition
    that identifies a view of a version ( ZoneElementVersion) of a ZoneElement.

    For an aircraft, an element 'Right vertical stabilizer tip' is in a
    zonal breakdown that an engineer uses for reliability-centred
    maintenance analysis.
    """

    zone_element_usage: List[ZoneElementUsage] = field(
        default_factory=list,
        metadata={
            "name": "ZoneElementUsage",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class AdvisoryNote(BaseRootObject):
    """
    An AdvisoryNote is the link between a task element with an advisory task step.

    :ivar advisory: the AdvisoryTaskStep used to provide the details of
        the note.
    :ivar applies_to: the TaskElement within which the note applies.
    :ivar observation_assignment:
    """

    advisory: Optional["AdvisoryNote.Advisory"] = field(
        default=None,
        metadata={
            "name": "Advisory",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    applies_to: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "AppliesTo",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )
    observation_assignment: List[ObservationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ObservationAssignment",
            "type": "Element",
            "namespace": "",
        },
    )

    @dataclass
    class Advisory:
        advisory_task_step: Optional[AdvisoryTaskStep] = field(
            default=None,
            metadata={
                "name": "AdvisoryTaskStep",
                "type": "Element",
                "namespace": "",
                "required": True,
            },
        )


@dataclass
class Analysis(Product):
    """An Analysis is a specialization of Product.

    It is produced via a reproducible process. NOTE: Analysis is the
    process of studying or examining something in an organized way to
    learn more about it, or a particular study or examination of
    something. The full range of the analysis process includes
    mathematical, physical testing, cognitive, chemical, etc.
    """


@dataclass
class AttachmentSlot(Product):
    """An AttachmentSlot is a specialization of Product that represents the
    position in which a part is or can be attached to a parent product.

    A fast jet aircraft has two engines. These engines are removable and
    interchangeable between individual aircraft. An attachment slot
    represents each installation position for an engine so as to ensure
    that an accurate record is maintained of which engines fly in which
    pairing on which aircraft for how many hours.
    """

    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class AttachmentSlotAsPlanned(AttachmentSlotVersion):
    """An AttachmentSlotAsPlanned is a specialization of AttachmentSlotVersion that
    identifies an individual that is the subject of a plan to realize an
    AttachmentSlot.

    FlyFasterWithUs Group will buy an aircraft with serial number 1234
    next year. The company wishes to plan the schedule for removal of
    engines from the aircraft for maintenance purposes. Instances of the
    AttachmentSlotAsPlanned entity data type allow the company to
    associate individual engines with the aircraft at different times
    over the planned period.
    """


@dataclass
class AttachmentSlotAsRealized(AttachmentSlotVersion):
    """An AttachmentSlotAsRealized is a specialization of AttachmentSlotVersion
    that identifies an individual that is a realized AttachmentSlot.

    FlyFasterWithUs Group operates an aircraft with serial number 1234
    next year. The company records which individual engines power the
    aircraft at different times during the lifetime of the aircraft.
    """


@dataclass
class AttachmentSlotDesign(AttachmentSlotVersion):
    """An AttachmentSlotDesign is a specialization of AttachmentSlotVersion that
    identifies the design version of an attachment slot.

    WeMakeBigPlanes Limited creates design version 1.34 of the
    attachment slot for the starboard engine of an aircraft.
    """


@dataclass
class Breakdown(Product):
    """A Breakdown is a specialization of Product that identifies a partitioning of
    a product into a set of related elements so as to form explicit, parent-child
    views that comprise the product elements.

    The parent-child view is represented by BreakdownElementUsage
    instances relating the elements in the breakdown that are
    represented by BreakdownElement instances.
    """

    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class BreakdownElement(Product):
    """A BreakdownElement is a specialization of Product that identifies the
    elements in one or more Breakdown instances.

    NOTE: BreakdownElement is non-specific and
    allows for various types of product breakdown. The more specific breakdown elements are
    FunctionalElement, PhysicalElement, SystemElement, and ZoneElement.
    """

    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Collection(Product):
    """
    An Collection is a specialization of Product that identifies a set of data.
    """

    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_relationship: List[CollectionRelationship] = field(
        default_factory=list,
        metadata={
            "name": "CollectionRelationship",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Document(Product):
    """
    A Document is a specialization of Product used to identify documentation data
    that is under configuration change management.
    """

    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class EnvironmentDefinition(Product):
    """
    An EnvironmentDefinition is a specialization of Product that is used to
    identify the definition of typical environment in which a product is to be, has
    been or is planned to be deployed in, operated in, or supported in.
    """


@dataclass
class FunctionalBreakdownVersion(BreakdownVersion):
    """
    A FunctionalBreakdownVersion is a specialization of BreakdownVersion that
    identifies a version of a FunctionalBreakdown.
    """


@dataclass
class FunctionalElementVersion(BreakdownElementVersion):
    """
    A FunctionalElementVersion is a specialization of BreakdownElementVersion that
    identifies a version of a FunctionalElement.
    """


@dataclass
class InterfaceConnector(Product):
    """An InterfaceConnector is a specialization of Product that identifies a part
    of a product with which one or more other products or the environment
    interacts.

    NOTE: This is sometimes referred to as a "port". A computer has a socket to which to
    connect a network cable. An instance of the InterfaceConnector entity data type
    identifies the role of the socket in the interface and is the subject of a specification
    that defines the necessary geometrical and electrical attributes to ensure a functioning
    interface between the computer and network hardware.
    """

    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class InterfaceConnectorAsPlanned(InterfaceConnectorVersion):
    """An InterfaceConnectorAsPlanned is a specialization of
    InterfaceConnectorVersion that identifies an individual that is the subject of
    a plan to realize an InterfaceConnector.

    Company Acme Limited is planning to produce an aircraft with serial
    number 1234 next month. This aircraft has connectors on each engine
    for fuel pipes. The company wishes to plan when each connector will
    be realized and then identify a date on which an inspector can test
    all the realized connectors.
    """


@dataclass
class InterfaceConnectorAsRealized(InterfaceConnectorVersion):
    """An InterfaceConnectorAsRealized is a specialization of
    InterfaceConnectorVersion that identifies an individual that is a realized
    InterfaceConnector.

    Company WeFlySafest Corporation owns and operates an aircraft with
    serial number 1234. When landing at Heathrow airport, the pilot
    reports a loss of fuel pressure on engine number 4 with serial
    number A9876 and recommends that an inspector tests the realized
    connector on the engine.
    """


@dataclass
class InterfaceConnectorDesign(InterfaceConnectorVersion):
    """An InterfaceConnectorDesign is a specialization of InterfaceConnectorVersion
    that identifies a design version of an InterfaceConnector.

    BuildAWidget Incorporated creates design version 2.10 for an
    electrical supply connector.
    """


@dataclass
class InterfaceSpecification(Product):
    """An InterfaceSpecification is a specialization of Product that provides a
    definition of necessary attributes for one or more items that participate in an
    interface.

    BSI develops a standard for connecting domestic electrical equipment
    to the electricity supply.
    """

    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ObservedEnvironment(Product):
    """
    An ObservedEnvironment is a specialization of Product that represents a record
    of observations about the environment in which a product is or has been
    operating.
    """


@dataclass
class Part(Product):
    """A Part is a specialization of Product that collects the definitional
    information of the versions of either a part or of a non-countable material.

    NOTE: A
    Part does not represent an actual physical object that is or was existing in the real
    world. NOTE: A complex instance of the Part entity and of the Document entity may be
    created in order to represent a document that is a component of a manufactured product,
    for example a user manual of a car.
    """

    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    alternate_part_relationship: List[AlternatePartRelationship] = field(
        default_factory=list,
        metadata={
            "name": "AlternatePartRelationship",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class PhysicalBreakdownVersion(BreakdownVersion):
    """
    A PhysicalBreakdownVersion is a specialization of BreakdownVersion that
    identifies a version of a PhysicalBreakdown An engineer modifies the current
    physical breakdown for an aircraft on the basis of a tail re-design.
    """


@dataclass
class PhysicalElementVersion(BreakdownElementVersion):
    """
    A PhysicalElementVersion is a specialization of BreakdownElementVersion that
    identifies a version of a PhysicalElement An engineer changes the details
    describing the undercarriage that is an element in a physical breakdown of an
    aircraft.
    """


@dataclass
class ProductAsIndividual(Product):
    """A ProductAsIndividual is a specialization of Product that identifies an
    individual artefact that has been made or is planned to be made.

    It is a collector of data common to all revisions of the
    ProductAsIndividual. NOTE: Revisions ( ProductAsIndividualVersion)
    of ProductAsIndividual are used to represent whether an individual
    artefact has yet to be made or has been made. The
    ProductAsIndividualVersion specialization ProductAsPlanned is used
    to represent the revision of an individual artefact that has yet to
    be made and the specialization ProductAsRealized is used to
    represent the revision of an individual artefact that has been made.
    NOTE: Where physical products are being represented, the
    ProductAsIndividual represents the physical or planned physical
    realization of a product. NOTE: It is likely, but not essential,
    that the artefact, was or will be made from a product design. The
    product design will be represented by a Product which will be
    related to the ProductAsIndividual by ProductDesignToIndividual.
    NOTE: Many physical products may be produced from a given design. A
    single Product may lead to many ProductAsIndividuals. The design of
    a personal computer is represented by a Product. The personal
    computer with a serial number on a persons desk is represented by a
    ProductAsIndividual and an associated revision represented by
    ProductAsRealized. The personal computer that has been ordered,
    allocated a serial number for manufacturing planning, but not yet
    manufactured, is represented by a ProductAsIndividual and an
    associated revision represented by ProductAsPlanned. HMS Daring is
    the first of a new class of ships known as Type 45 Destroyers. It is
    due to enter service in two years time. The Type 45 ship design that
    applies to HMS Daring is represented by a Product; The ship HMS
    Daring is represented by a ProductAsIndividual. This identifies the
    planned ship, and when built, the actual ship; The planned revision
    of the future ship HMS Daring is represented by a ProductAsPlanned
    which is related back to the ProductAsIndividual; When built, the
    first revision the actual ship, HMS Daring will be represented by a
    ProductAsRealized which is related back to the ProductAsIndividual.
    """

    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ProductAsPlanned(ProductAsIndividualVersion):
    """A ProductAsPlanned is a specialization of ProductAsIndividualVersion that
    identifies a revision of an individual artefact that has yet to be made.

    NOTE: It
    may be planned to make the artefact from of a version of a product design (
    ProductVersion). If this is the case, then the relationship between the artefact (
    ProductAsPlanned) and the design ( ProductVersion) is represented by
    ProductDesignVersionToIndividual. NOTE: If the planned artefact ( ProductAsPlanned) is
    subsequently made into an actual artefact ( ProductAsRealized) then they are related by
    the ProductPlannedToRealized relationship.
    """

    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class ProductAsRealized(ProductAsIndividualVersion):
    """A ProductAsRealized is a specialization of ProductAsIndividualVersion that
    identifies a revision of an individual artefact that has been made. A product
    whose properties can only be known by observation or by derivation from
    observations. NOTE:

    Where physical products are being represented, the ProductAsRealized represents the
    physical product - something one can touch. NOTE: The artefact may have been made from a
    version of a product design ( ProductVersion). If this is the case, then the
    relationship between the artefact ( ProductAsRealized) and the design ( ProductVersion)
    is represented by ProductDesignVersionToIndividual. NOTE: The artefact may have been
    planned and represented by ProductAsPlanned. In which case, the actual artefact (
    ProductAsRealized) is related to the planned artefact ( ProductAsPlanned) by the
    ProductPlannedToRealized relationship.
    """

    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class RepeatCount(LoopingElement):
    """A RepeatCount is a type of LoopingElement.

    It invokes a specified number of repetitions of the LoopingElement
    TaskElement inherited from the LoopingElement parent generalization.

    :ivar count: the number of times the LoopingElement is to be
        executed. NOTE: If the RepeatCount entity is combined with the
        other subtypes of LoopingElement, this becomes the maximum
        number of repetitions.
    """

    count: Optional[int] = field(
        default=None,
        metadata={
            "name": "Count",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class RepeatUntil(LoopingElement):
    """A RepeatUntil is a type of LoopingElement.

    It invokes repetitions of a further TaskElement and is repeated
    until the specified condition is satisfied. The element being
    repeated shall be executed at least once and the condition tested
    after the first execution.

    :ivar condition: the criterion to be tested in order to determine
        that the looping method shall be exited.
    """

    condition: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Condition",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class RepeatWhile(LoopingElement):
    """A RepeatWhile is a type of LoopingElement.

    It invokes repetitions of a further TaskElement and is repeated
    while the specified condition is satisfied. The test condition shall
    be evaluated prior to invoking the method and may result in the
    LoopingElement not being executed at all.

    :ivar condition: the criterion to be tested in order to determine
        that the LoopingElement shall be continued.
    """

    condition: Optional[Reference] = field(
        default=None,
        metadata={
            "name": "Condition",
            "type": "Element",
            "namespace": "",
            "required": True,
        },
    )


@dataclass
class Requirement(Product):
    """A Requirement is a specialization of Product that is used to uniquely
    identify a requirement. NOTE: The term "requirement" is used here in the sense
    that term is used in systems engineering and similar industrial domains. NOTE:
    There may be many versions of a requirement RequirementVersion ). There may
    also be more than one domain-specific view of a given RequirementVersion (using
    the RequirementViewDefinition entity). The requirement entity is simply a
    placeholder for holding a unique.

    requirement. Most associations and properties are defined at the
    RequirementViewDefinition level - that is in the context of a domain. A requirement may
    be identified as "NOx emissions requirement", and uniquely identified as "Req2". NOTE:
    Systems engineering tools and organizations may use differing identification mechanisms.
    Multiple identifiers may be assigned to a requirement using the Identifier entity.
    """

    contract_assignment: List[ContractAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ContractAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right_assignment: List[
        InformationUsageRightAssignment
    ] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRightAssignment",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class Risk(Product):
    """A Risk is a specialization of Product that is the potential for realization
    of unwanted negative consequences of an event.

    NOTE: ISO GUIDE 73 defines
    "risk" as the combination of the probability of an event and its consequence. In some
    situations, risk is a deviation from the expected. NOTE: A risk can also have a possible
    positive outcome. In such cases it is often referred to as an opportunity or reward.
    NOTE: ISO/IEC Guide 51:1999 defines risk as the combination of the probability of
    occurrence of harm and the severity of that harm. NOTE: In the safety field, risk
    management is focused on prevention and mitigation of harm. ISO/IEC Guide 51:1999 should
    be used for safety aspects. 'Line shutdown' is an example of Risk in the context of a
    manufacturing system's reliability. 'Transportation jam-up', 'customer anger',
    'collateral damage', and 'greater susceptibility to interruption of supply during
    crises' are all examples of Risk. 'Privacy' and 'security' are examples of Risk for the
    telecommunications industry. 'Fly-by-wire', the form-fit-function replacement of
    mechanical devices with a combination of electrical, hydraulic, and pneumatic units.
    Timing such as 'premature rejection' and 'premature commitment' are other examples of
    Risk.
    """

    date_time_assignment: List[DateTimeAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DateTimeAssignment",
            "type": "Element",
            "namespace": "",
        },
    )
    risk_relationship: List[RiskRelationship] = field(
        default_factory=list,
        metadata={
            "name": "RiskRelationship",
            "type": "Element",
            "namespace": "",
        },
    )


@dataclass
class SimultaneousElements(ConcurrentElements):
    """
    A SimultaneousElements is a specialization of ConcurrentElements that
    represents two or more actions to be performed together.
    """


@dataclass
class System(Product):
    """A System is a specialization of Product used to identify a conceptual.

    solution to a collection of requirements. NOTE: The concept system is any thing -
    matter, energy, organisation or information or a combination of these - for which
    reproducible measurements exist. The concept system excludes any asserted thing based on
    personal experience for which no reproducible measurements exist. NOTE: SEDRES
    Definition: "An assembly of interacting, active components or elements forming a whole".
    NOTE: Another definition would be "That which is discernible by reproducible measurement
    of its characteristics, and has a defined boundary (statically and dynamically) with
    respect to the universe".
    """


@dataclass
class SystemBreakdownVersion(BreakdownVersion):
    """
    A SystemBreakdownVersion is a specialization of BreakdownVersion that
    identifies a version of a SystemBreakdown A logistics engineer modifies the
    current systems breakdown for an aircraft and associated support equipment on
    the basis of results from a level of repair analysis.
    """


@dataclass
class SystemElementVersion(BreakdownElementVersion):
    """
    A SystemElementVersion is a specialization of BreakdownElementVersion that
    identifies a version of a SystemElement A sound engineer changes the details
    describing the public address system that is an element in a system breakdown
    of an aircraft.
    """


@dataclass
class ZoneBreakdownVersion(BreakdownVersion):
    """
    A ZoneBreakdownVersion is a specialization of BreakdownVersion that identifies
    a version of a ZoneBreakdown An architect modifies the current fire-check zone
    breakdown for an building on the basis of reports from a buildings inspector.
    """


@dataclass
class ZoneElementVersion(BreakdownElementVersion):
    """A ZoneElementVersion is a specialization of BreakdownElementVersion that
    identifies a version of a ZoneElement.

    An engineer defines an inspection task on a breakdown element 'Upper
    rudder' that is part of a zonal breakdown of an aircraft. The
    engineer identifies the corresponding view of the breakdown element.
    """


@dataclass
class FunctionalBreakdown(Breakdown):
    """A FunctionalBreakdown is a specialization of Breakdown that identifies a.

    partitioning of a product into a set of related functional elements so as to form
    explicit structural views that comprise the product elements. The composite - component
    view is represented by FunctionalElementUsage instances relating the functional elements
    in the breakdown which are represented by FunctionalElements. A functional breakdown
    provides a decomposition of an aircraft in terms of high-level functional processes such
    as flight, taxiing and at rest all the way down to low-level processes such as detect
    on-board fuel level, move tail rudder and provide standard tow attachment point.
    """


@dataclass
class FunctionalElement(BreakdownElement):
    """
    A FunctionalElement is a specialization of BreakdownElement that identifies the
    elements in one or more FunctionalBreakdown instances.
    """


@dataclass
class PhysicalBreakdown(Breakdown):
    """A PhysicalBreakdown is a specialization of Breakdown that identifies a
    partitioning of a product into a set of related physical elements so as to form
    explicit, parent-child views that comprise the product elements.

    The parent-child view is represented by PhysicalElementUsage
    instances relating the physical elements in the breakdown which are
    represented by PhysicalElements. A physical breakdown might provide
    a decomposition of an automobile in terms such as body, roof,
    bonnet, bumpers and this breakdown might be different from, and
    orthogonal to, a parts decomposition.
    """


@dataclass
class PhysicalElement(BreakdownElement):
    """
    A PhysicalElement is a specialization of BreakdownElement that identifies the
    elements in one or more PhysicalBreakdown instances.
    """


@dataclass
class SystemBreakdown(Breakdown):
    """A SystemBreakdown is a specialization of Breakdown that identifies a.

    partitioning of a system into a set of related elements so as to form explicit, assembly
    - component views that comprise the system elements. The assembly-component view is
    represented by SystemElementUsage instances relating the system elements in the
    breakdown which are represented by SystemElements. A system breakdown provides a
    decomposition of an aircraft in terms of high-level mechanisms such as fuel system or
    flight control system - which might, in the second example, further decompose into
    low-level systems such as autopilot system and instrument landing system.
    """


@dataclass
class SystemElement(BreakdownElement):
    """
    A SystemElement is a specialization of BreakdownElement that identifies the
    elements in one or more SystemBreakdown instances.
    """


@dataclass
class ZoneBreakdown(Breakdown):
    """A ZoneBreakdown is a specialization of Breakdown that identifies a
    partitioning of a product into a set of related zonal elements so as to form
    explicit, parent-child views that comprise the product elements. The parent-
    child view is represented by ZoneElementUsage instances relating the zonal
    elements in the breakdown which are represented by ZoneElements. A zonal
    breakdown provides a means of identifying.

    the decomposition of an aircraft in terms of spaces or high-level conceptual parts such
    as 'wing' - which might further decompose into lower-level zones such as 'inner-wing',
    and 'outer wing'.
    """


@dataclass
class ZoneElement(BreakdownElement):
    """A ZoneElement is a specialization of BreakdownElement that identifies the
    elements in one or more ZoneBreakdown instances.

    'Empennage', 'Right vertical stabilizer and rudder' and 'Lower
    rudder' are all elements in a zonal breakdown of an aircraft.
    """


@dataclass
class PlcsDataContainer(CommonDataContainer):
    """
    A PlcsDataContainer is a specialization of the abstract DataContainer element.
    """

    class Meta:
        namespace = "http://docs.oasis-open.org/plcs/ns/plcslib/v1.0/data/plcs/plcs-psm/xml-schema/plcs-psm"

    activity: List[Activity] = field(
        default_factory=list,
        metadata={
            "name": "Activity",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_actual: List[ActivityActual] = field(
        default_factory=list,
        metadata={
            "name": "ActivityActual",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method: List[ActivityMethod] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethod",
            "type": "Element",
            "namespace": "",
        },
    )
    activity_method_realization: List[ActivityMethodRealization] = field(
        default_factory=list,
        metadata={
            "name": "ActivityMethodRealization",
            "type": "Element",
            "namespace": "",
        },
    )
    address: List[Address] = field(
        default_factory=list,
        metadata={
            "name": "Address",
            "type": "Element",
            "namespace": "",
        },
    )
    address_based_location_representation: List[
        AddressBasedLocationRepresentation
    ] = field(
        default_factory=list,
        metadata={
            "name": "AddressBasedLocationRepresentation",
            "type": "Element",
            "namespace": "",
        },
    )
    advisory_note: List[AdvisoryNote] = field(
        default_factory=list,
        metadata={
            "name": "AdvisoryNote",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis: List[Analysis] = field(
        default_factory=list,
        metadata={
            "name": "Analysis",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_model: List[AnalysisModel] = field(
        default_factory=list,
        metadata={
            "name": "AnalysisModel",
            "type": "Element",
            "namespace": "",
        },
    )
    analysis_representation_context: List[AnalysisRepresentationContext] = (
        field(
            default_factory=list,
            metadata={
                "name": "AnalysisRepresentationContext",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    application_domain: List[ApplicationDomain] = field(
        default_factory=list,
        metadata={
            "name": "ApplicationDomain",
            "type": "Element",
            "namespace": "",
        },
    )
    approval: List[Approval] = field(
        default_factory=list,
        metadata={
            "name": "Approval",
            "type": "Element",
            "namespace": "",
        },
    )
    approving_person_organization: List[ApprovingPersonOrganization] = field(
        default_factory=list,
        metadata={
            "name": "ApprovingPersonOrganization",
            "type": "Element",
            "namespace": "",
        },
    )
    assumption: List[Assumption] = field(
        default_factory=list,
        metadata={
            "name": "Assumption",
            "type": "Element",
            "namespace": "",
        },
    )
    attachment_slot: List[AttachmentSlot] = field(
        default_factory=list,
        metadata={
            "name": "AttachmentSlot",
            "type": "Element",
            "namespace": "",
        },
    )
    attachment_slot_design_to_planned: List[AttachmentSlotDesignToPlanned] = (
        field(
            default_factory=list,
            metadata={
                "name": "AttachmentSlotDesignToPlanned",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    attachment_slot_design_to_realized: List[
        AttachmentSlotDesignToRealized
    ] = field(
        default_factory=list,
        metadata={
            "name": "AttachmentSlotDesignToRealized",
            "type": "Element",
            "namespace": "",
        },
    )
    attachment_slot_on_product: List[AttachmentSlotOnProduct] = field(
        default_factory=list,
        metadata={
            "name": "AttachmentSlotOnProduct",
            "type": "Element",
            "namespace": "",
        },
    )
    attachment_slot_planned_to_realized: List[
        AttachmentSlotPlannedToRealized
    ] = field(
        default_factory=list,
        metadata={
            "name": "AttachmentSlotPlannedToRealized",
            "type": "Element",
            "namespace": "",
        },
    )
    axis_placement_mapping: List[AxisPlacementMapping] = field(
        default_factory=list,
        metadata={
            "name": "AxisPlacementMapping",
            "type": "Element",
            "namespace": "",
        },
    )
    breakdown: List[Breakdown] = field(
        default_factory=list,
        metadata={
            "name": "Breakdown",
            "type": "Element",
            "namespace": "",
        },
    )
    breakdown_context: List[BreakdownContext] = field(
        default_factory=list,
        metadata={
            "name": "BreakdownContext",
            "type": "Element",
            "namespace": "",
        },
    )
    breakdown_element: List[BreakdownElement] = field(
        default_factory=list,
        metadata={
            "name": "BreakdownElement",
            "type": "Element",
            "namespace": "",
        },
    )
    breakdown_element_realization: List[BreakdownElementRealization] = field(
        default_factory=list,
        metadata={
            "name": "BreakdownElementRealization",
            "type": "Element",
            "namespace": "",
        },
    )
    certification: List[Certification] = field(
        default_factory=list,
        metadata={
            "name": "Certification",
            "type": "Element",
            "namespace": "",
        },
    )
    chain_based_geometric_item_specific_usage: List[
        ChainBasedGeometricItemSpecificUsage
    ] = field(
        default_factory=list,
        metadata={
            "name": "ChainBasedGeometricItemSpecificUsage",
            "type": "Element",
            "namespace": "",
        },
    )
    collection: List[Collection] = field(
        default_factory=list,
        metadata={
            "name": "Collection",
            "type": "Element",
            "namespace": "",
        },
    )
    collection_membership: List[CollectionMembership] = field(
        default_factory=list,
        metadata={
            "name": "CollectionMembership",
            "type": "Element",
            "namespace": "",
        },
    )
    condition: List[Condition] = field(
        default_factory=list,
        metadata={
            "name": "Condition",
            "type": "Element",
            "namespace": "",
        },
    )
    conditional_effectivity: List[ConditionalEffectivity] = field(
        default_factory=list,
        metadata={
            "name": "ConditionalEffectivity",
            "type": "Element",
            "namespace": "",
        },
    )
    condition_evaluation: List[ConditionEvaluation] = field(
        default_factory=list,
        metadata={
            "name": "ConditionEvaluation",
            "type": "Element",
            "namespace": "",
        },
    )
    contextual_item_shape: List[ContextualItemShape] = field(
        default_factory=list,
        metadata={
            "name": "ContextualItemShape",
            "type": "Element",
            "namespace": "",
        },
    )
    contextual_shape_representation: List[ContextualShapeRepresentation] = (
        field(
            default_factory=list,
            metadata={
                "name": "ContextualShapeRepresentation",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    contract: List[Contract] = field(
        default_factory=list,
        metadata={
            "name": "Contract",
            "type": "Element",
            "namespace": "",
        },
    )
    dated_effectivity: List[DatedEffectivity] = field(
        default_factory=list,
        metadata={
            "name": "DatedEffectivity",
            "type": "Element",
            "namespace": "",
        },
    )
    decreasing_resource_event: List[DecreasingResourceEvent] = field(
        default_factory=list,
        metadata={
            "name": "DecreasingResourceEvent",
            "type": "Element",
            "namespace": "",
        },
    )
    digital_file: List[DigitalFile] = field(
        default_factory=list,
        metadata={
            "name": "DigitalFile",
            "type": "Element",
            "namespace": "",
        },
    )
    directed_activity: List[DirectedActivity] = field(
        default_factory=list,
        metadata={
            "name": "DirectedActivity",
            "type": "Element",
            "namespace": "",
        },
    )
    document: List[Document] = field(
        default_factory=list,
        metadata={
            "name": "Document",
            "type": "Element",
            "namespace": "",
        },
    )
    effectivity: List[Effectivity] = field(
        default_factory=list,
        metadata={
            "name": "Effectivity",
            "type": "Element",
            "namespace": "",
        },
    )
    envelope: List[Envelope] = field(
        default_factory=list,
        metadata={
            "name": "Envelope",
            "type": "Element",
            "namespace": "",
        },
    )
    environment_definition: List[EnvironmentDefinition] = field(
        default_factory=list,
        metadata={
            "name": "EnvironmentDefinition",
            "type": "Element",
            "namespace": "",
        },
    )
    evidence: List[Evidence] = field(
        default_factory=list,
        metadata={
            "name": "Evidence",
            "type": "Element",
            "namespace": "",
        },
    )
    exchange_context_class_library: List[ExchangeContextClassLibrary] = field(
        default_factory=list,
        metadata={
            "name": "ExchangeContextClassLibrary",
            "type": "Element",
            "namespace": "",
        },
    )
    expanded_uncertainty: List[ExpandedUncertainty] = field(
        default_factory=list,
        metadata={
            "name": "ExpandedUncertainty",
            "type": "Element",
            "namespace": "",
        },
    )
    experience_gained: List[ExperienceGained] = field(
        default_factory=list,
        metadata={
            "name": "ExperienceGained",
            "type": "Element",
            "namespace": "",
        },
    )
    experience_instance: List[ExperienceInstance] = field(
        default_factory=list,
        metadata={
            "name": "ExperienceInstance",
            "type": "Element",
            "namespace": "",
        },
    )
    experience_type: List[ExperienceType] = field(
        default_factory=list,
        metadata={
            "name": "ExperienceType",
            "type": "Element",
            "namespace": "",
        },
    )
    external_analysis_model: List[ExternalAnalysisModel] = field(
        default_factory=list,
        metadata={
            "name": "ExternalAnalysisModel",
            "type": "Element",
            "namespace": "",
        },
    )
    external_class: List[ExternalClass] = field(
        default_factory=list,
        metadata={
            "name": "ExternalClass",
            "type": "Element",
            "namespace": "",
        },
    )
    external_geometric_model: List[ExternalGeometricModel] = field(
        default_factory=list,
        metadata={
            "name": "ExternalGeometricModel",
            "type": "Element",
            "namespace": "",
        },
    )
    external_item: List[ExternalItem] = field(
        default_factory=list,
        metadata={
            "name": "ExternalItem",
            "type": "Element",
            "namespace": "",
        },
    )
    external_owl_class: List[ExternalOwlClass] = field(
        default_factory=list,
        metadata={
            "name": "ExternalOwlClass",
            "type": "Element",
            "namespace": "",
        },
    )
    external_owl_object: List[ExternalOwlObject] = field(
        default_factory=list,
        metadata={
            "name": "ExternalOwlObject",
            "type": "Element",
            "namespace": "",
        },
    )
    external_property_definition: List[ExternalPropertyDefinition] = field(
        default_factory=list,
        metadata={
            "name": "ExternalPropertyDefinition",
            "type": "Element",
            "namespace": "",
        },
    )
    external_type_qualifier: List[ExternalTypeQualifier] = field(
        default_factory=list,
        metadata={
            "name": "ExternalTypeQualifier",
            "type": "Element",
            "namespace": "",
        },
    )
    external_unit: List[ExternalUnit] = field(
        default_factory=list,
        metadata={
            "name": "ExternalUnit",
            "type": "Element",
            "namespace": "",
        },
    )
    functional_breakdown: List[FunctionalBreakdown] = field(
        default_factory=list,
        metadata={
            "name": "FunctionalBreakdown",
            "type": "Element",
            "namespace": "",
        },
    )
    functional_breakdown_context: List[FunctionalBreakdownContext] = field(
        default_factory=list,
        metadata={
            "name": "FunctionalBreakdownContext",
            "type": "Element",
            "namespace": "",
        },
    )
    functional_element: List[FunctionalElement] = field(
        default_factory=list,
        metadata={
            "name": "FunctionalElement",
            "type": "Element",
            "namespace": "",
        },
    )
    function_value_pair: List[FunctionValuePair] = field(
        default_factory=list,
        metadata={
            "name": "FunctionValuePair",
            "type": "Element",
            "namespace": "",
        },
    )
    geometric_composition_with_operator_transformation: List[
        GeometricCompositionWithOperatorTransformation
    ] = field(
        default_factory=list,
        metadata={
            "name": "GeometricCompositionWithOperatorTransformation",
            "type": "Element",
            "namespace": "",
        },
    )
    geometric_composition_with_placement_transformation: List[
        GeometricCompositionWithPlacementTransformation
    ] = field(
        default_factory=list,
        metadata={
            "name": "GeometricCompositionWithPlacementTransformation",
            "type": "Element",
            "namespace": "",
        },
    )
    geometric_item_specific_usage: List[GeometricItemSpecificUsage] = field(
        default_factory=list,
        metadata={
            "name": "GeometricItemSpecificUsage",
            "type": "Element",
            "namespace": "",
        },
    )
    geometric_model: List[GeometricModel] = field(
        default_factory=list,
        metadata={
            "name": "GeometricModel",
            "type": "Element",
            "namespace": "",
        },
    )
    geometric_model_relationship: List[GeometricModelRelationship] = field(
        default_factory=list,
        metadata={
            "name": "GeometricModelRelationship",
            "type": "Element",
            "namespace": "",
        },
    )
    geometric_placement_model: List[GeometricPlacementModel] = field(
        default_factory=list,
        metadata={
            "name": "GeometricPlacementModel",
            "type": "Element",
            "namespace": "",
        },
    )
    geometric_relationship_with_operator_transformation: List[
        GeometricRelationshipWithOperatorTransformation
    ] = field(
        default_factory=list,
        metadata={
            "name": "GeometricRelationshipWithOperatorTransformation",
            "type": "Element",
            "namespace": "",
        },
    )
    geometric_relationship_with_placement_transformation: List[
        GeometricRelationshipWithPlacementTransformation
    ] = field(
        default_factory=list,
        metadata={
            "name": "GeometricRelationshipWithPlacementTransformation",
            "type": "Element",
            "namespace": "",
        },
    )
    global_location_representation: List[GlobalLocationRepresentation] = field(
        default_factory=list,
        metadata={
            "name": "GlobalLocationRepresentation",
            "type": "Element",
            "namespace": "",
        },
    )
    hardcopy: List[Hardcopy] = field(
        default_factory=list,
        metadata={
            "name": "Hardcopy",
            "type": "Element",
            "namespace": "",
        },
    )
    hierarchical_interface_connection: List[
        HierarchicalInterfaceConnection
    ] = field(
        default_factory=list,
        metadata={
            "name": "HierarchicalInterfaceConnection",
            "type": "Element",
            "namespace": "",
        },
    )
    increasing_resource_event: List[IncreasingResourceEvent] = field(
        default_factory=list,
        metadata={
            "name": "IncreasingResourceEvent",
            "type": "Element",
            "namespace": "",
        },
    )
    information_right: List[InformationRight] = field(
        default_factory=list,
        metadata={
            "name": "InformationRight",
            "type": "Element",
            "namespace": "",
        },
    )
    information_usage_right: List[InformationUsageRight] = field(
        default_factory=list,
        metadata={
            "name": "InformationUsageRight",
            "type": "Element",
            "namespace": "",
        },
    )
    interface_connection: List[InterfaceConnection] = field(
        default_factory=list,
        metadata={
            "name": "InterfaceConnection",
            "type": "Element",
            "namespace": "",
        },
    )
    interface_connector: List[InterfaceConnector] = field(
        default_factory=list,
        metadata={
            "name": "InterfaceConnector",
            "type": "Element",
            "namespace": "",
        },
    )
    interface_connector_design_to_planned: List[
        InterfaceConnectorDesignToPlanned
    ] = field(
        default_factory=list,
        metadata={
            "name": "InterfaceConnectorDesignToPlanned",
            "type": "Element",
            "namespace": "",
        },
    )
    interface_connector_design_to_realized: List[
        InterfaceConnectorDesignToRealized
    ] = field(
        default_factory=list,
        metadata={
            "name": "InterfaceConnectorDesignToRealized",
            "type": "Element",
            "namespace": "",
        },
    )
    interface_connector_occurrence: List[InterfaceConnectorOccurrence] = field(
        default_factory=list,
        metadata={
            "name": "InterfaceConnectorOccurrence",
            "type": "Element",
            "namespace": "",
        },
    )
    interface_connector_planned_to_realized: List[
        InterfaceConnectorPlannedToRealized
    ] = field(
        default_factory=list,
        metadata={
            "name": "InterfaceConnectorPlannedToRealized",
            "type": "Element",
            "namespace": "",
        },
    )
    interface_definition_connection: List[InterfaceDefinitionConnection] = (
        field(
            default_factory=list,
            metadata={
                "name": "InterfaceDefinitionConnection",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    interface_definition_for: List[InterfaceDefinitionFor] = field(
        default_factory=list,
        metadata={
            "name": "InterfaceDefinitionFor",
            "type": "Element",
            "namespace": "",
        },
    )
    interface_specification: List[InterfaceSpecification] = field(
        default_factory=list,
        metadata={
            "name": "InterfaceSpecification",
            "type": "Element",
            "namespace": "",
        },
    )
    in_zone: List[InZone] = field(
        default_factory=list,
        metadata={
            "name": "InZone",
            "type": "Element",
            "namespace": "",
        },
    )
    item_assumed: List[ItemAssumed] = field(
        default_factory=list,
        metadata={
            "name": "ItemAssumed",
            "type": "Element",
            "namespace": "",
        },
    )
    item_design_association: List[ItemDesignAssociation] = field(
        default_factory=list,
        metadata={
            "name": "ItemDesignAssociation",
            "type": "Element",
            "namespace": "",
        },
    )
    item_shape: List[ItemShape] = field(
        default_factory=list,
        metadata={
            "name": "ItemShape",
            "type": "Element",
            "namespace": "",
        },
    )
    item_usage_effectivity: List[ItemUsageEffectivity] = field(
        default_factory=list,
        metadata={
            "name": "ItemUsageEffectivity",
            "type": "Element",
            "namespace": "",
        },
    )
    justification: List[Justification] = field(
        default_factory=list,
        metadata={
            "name": "Justification",
            "type": "Element",
            "namespace": "",
        },
    )
    life_cycle_stage: List[LifeCycleStage] = field(
        default_factory=list,
        metadata={
            "name": "LifeCycleStage",
            "type": "Element",
            "namespace": "",
        },
    )
    location: List[Location] = field(
        default_factory=list,
        metadata={
            "name": "Location",
            "type": "Element",
            "namespace": "",
        },
    )
    lot_effectivity: List[LotEffectivity] = field(
        default_factory=list,
        metadata={
            "name": "LotEffectivity",
            "type": "Element",
            "namespace": "",
        },
    )
    managed_resource: List[ManagedResource] = field(
        default_factory=list,
        metadata={
            "name": "ManagedResource",
            "type": "Element",
            "namespace": "",
        },
    )
    market: List[Market] = field(
        default_factory=list,
        metadata={
            "name": "Market",
            "type": "Element",
            "namespace": "",
        },
    )
    message: List[Message] = field(
        default_factory=list,
        metadata={
            "name": "Message",
            "type": "Element",
            "namespace": "",
        },
    )
    numerical_context: List[NumericalContext] = field(
        default_factory=list,
        metadata={
            "name": "NumericalContext",
            "type": "Element",
            "namespace": "",
        },
    )
    observation: List[Observation] = field(
        default_factory=list,
        metadata={
            "name": "Observation",
            "type": "Element",
            "namespace": "",
        },
    )
    observation_consequence: List[ObservationConsequence] = field(
        default_factory=list,
        metadata={
            "name": "ObservationConsequence",
            "type": "Element",
            "namespace": "",
        },
    )
    observed_environment: List[ObservedEnvironment] = field(
        default_factory=list,
        metadata={
            "name": "ObservedEnvironment",
            "type": "Element",
            "namespace": "",
        },
    )
    observed_environment_to_definition: List[
        ObservedEnvironmentToDefinition
    ] = field(
        default_factory=list,
        metadata={
            "name": "ObservedEnvironmentToDefinition",
            "type": "Element",
            "namespace": "",
        },
    )
    observed_environment_to_definition_version: List[
        ObservedEnvironmentToDefinitionVersion
    ] = field(
        default_factory=list,
        metadata={
            "name": "ObservedEnvironmentToDefinitionVersion",
            "type": "Element",
            "namespace": "",
        },
    )
    observed_environment_to_definition_view: List[
        ObservedEnvironmentToDefinitionView
    ] = field(
        default_factory=list,
        metadata={
            "name": "ObservedEnvironmentToDefinitionView",
            "type": "Element",
            "namespace": "",
        },
    )
    organization: List[Organization] = field(
        default_factory=list,
        metadata={
            "name": "Organization",
            "type": "Element",
            "namespace": "",
        },
    )
    organizational_location_identification: List[
        OrganizationalLocationIdentification
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationalLocationIdentification",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_based_location_representation: List[
        OrganizationBasedLocationRepresentation
    ] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationBasedLocationRepresentation",
            "type": "Element",
            "namespace": "",
        },
    )
    organization_type: List[OrganizationType] = field(
        default_factory=list,
        metadata={
            "name": "OrganizationType",
            "type": "Element",
            "namespace": "",
        },
    )
    part: List[Part] = field(
        default_factory=list,
        metadata={
            "name": "Part",
            "type": "Element",
            "namespace": "",
        },
    )
    person: List[Person] = field(
        default_factory=list,
        metadata={
            "name": "Person",
            "type": "Element",
            "namespace": "",
        },
    )
    person_in_organization: List[PersonInOrganization] = field(
        default_factory=list,
        metadata={
            "name": "PersonInOrganization",
            "type": "Element",
            "namespace": "",
        },
    )
    person_or_organization_or_person_in_organization_in_position: List[
        PersonOrOrganizationOrPersonInOrganizationInPosition
    ] = field(
        default_factory=list,
        metadata={
            "name": "PersonOrOrganizationOrPersonInOrganizationInPosition",
            "type": "Element",
            "namespace": "",
        },
    )
    physical_breakdown: List[PhysicalBreakdown] = field(
        default_factory=list,
        metadata={
            "name": "PhysicalBreakdown",
            "type": "Element",
            "namespace": "",
        },
    )
    physical_breakdown_context: List[PhysicalBreakdownContext] = field(
        default_factory=list,
        metadata={
            "name": "PhysicalBreakdownContext",
            "type": "Element",
            "namespace": "",
        },
    )
    physical_element: List[PhysicalElement] = field(
        default_factory=list,
        metadata={
            "name": "PhysicalElement",
            "type": "Element",
            "namespace": "",
        },
    )
    position: List[Position] = field(
        default_factory=list,
        metadata={
            "name": "Position",
            "type": "Element",
            "namespace": "",
        },
    )
    position_group: List[PositionGroup] = field(
        default_factory=list,
        metadata={
            "name": "PositionGroup",
            "type": "Element",
            "namespace": "",
        },
    )
    position_type: List[PositionType] = field(
        default_factory=list,
        metadata={
            "name": "PositionType",
            "type": "Element",
            "namespace": "",
        },
    )
    precision_qualifier: List[PrecisionQualifier] = field(
        default_factory=list,
        metadata={
            "name": "PrecisionQualifier",
            "type": "Element",
            "namespace": "",
        },
    )
    pre_defined_type_qualifier: List[PreDefinedTypeQualifier] = field(
        default_factory=list,
        metadata={
            "name": "PreDefinedTypeQualifier",
            "type": "Element",
            "namespace": "",
        },
    )
    probability_named_value: List[ProbabilityNamedValue] = field(
        default_factory=list,
        metadata={
            "name": "ProbabilityNamedValue",
            "type": "Element",
            "namespace": "",
        },
    )
    product: List[Product] = field(
        default_factory=list,
        metadata={
            "name": "Product",
            "type": "Element",
            "namespace": "",
        },
    )
    product_as_individual: List[ProductAsIndividual] = field(
        default_factory=list,
        metadata={
            "name": "ProductAsIndividual",
            "type": "Element",
            "namespace": "",
        },
    )
    product_as_individual_effectivity: List[ProductAsIndividualEffectivity] = (
        field(
            default_factory=list,
            metadata={
                "name": "ProductAsIndividualEffectivity",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    product_based_location_identification: List[
        ProductBasedLocationIdentification
    ] = field(
        default_factory=list,
        metadata={
            "name": "ProductBasedLocationIdentification",
            "type": "Element",
            "namespace": "",
        },
    )
    product_concept: List[ProductConcept] = field(
        default_factory=list,
        metadata={
            "name": "ProductConcept",
            "type": "Element",
            "namespace": "",
        },
    )
    product_configuration: List[ProductConfiguration] = field(
        default_factory=list,
        metadata={
            "name": "ProductConfiguration",
            "type": "Element",
            "namespace": "",
        },
    )
    product_definition_element_relationship: List[
        ProductDefinitionElementRelationship
    ] = field(
        default_factory=list,
        metadata={
            "name": "ProductDefinitionElementRelationship",
            "type": "Element",
            "namespace": "",
        },
    )
    product_design_to_individual: List[ProductDesignToIndividual] = field(
        default_factory=list,
        metadata={
            "name": "ProductDesignToIndividual",
            "type": "Element",
            "namespace": "",
        },
    )
    product_design_version_to_individual: List[
        ProductDesignVersionToIndividual
    ] = field(
        default_factory=list,
        metadata={
            "name": "ProductDesignVersionToIndividual",
            "type": "Element",
            "namespace": "",
        },
    )
    product_design_view_to_individual: List[ProductDesignViewToIndividual] = (
        field(
            default_factory=list,
            metadata={
                "name": "ProductDesignViewToIndividual",
                "type": "Element",
                "namespace": "",
            },
        )
    )
    product_group: List[ProductGroup] = field(
        default_factory=list,
        metadata={
            "name": "ProductGroup",
            "type": "Element",
            "namespace": "",
        },
    )
    product_group_membership: List[ProductGroupMembership] = field(
        default_factory=list,
        metadata={
            "name": "ProductGroupMembership",
            "type": "Element",
            "namespace": "",
        },
    )
    product_planned_to_realized: List[ProductPlannedToRealized] = field(
        default_factory=list,
        metadata={
            "name": "ProductPlannedToRealized",
            "type": "Element",
            "namespace": "",
        },
    )
    project: List[Project] = field(
        default_factory=list,
        metadata={
            "name": "Project",
            "type": "Element",
            "namespace": "",
        },
    )
    qualification_type: List[QualificationType] = field(
        default_factory=list,
        metadata={
            "name": "QualificationType",
            "type": "Element",
            "namespace": "",
        },
    )
    qualitative_uncertainty: List[QualitativeUncertainty] = field(
        default_factory=list,
        metadata={
            "name": "QualitativeUncertainty",
            "type": "Element",
            "namespace": "",
        },
    )
    regional_coordinate: List[RegionalCoordinate] = field(
        default_factory=list,
        metadata={
            "name": "RegionalCoordinate",
            "type": "Element",
            "namespace": "",
        },
    )
    regional_grid_location_representation: List[
        RegionalGridLocationRepresentation
    ] = field(
        default_factory=list,
        metadata={
            "name": "RegionalGridLocationRepresentation",
            "type": "Element",
            "namespace": "",
        },
    )
    related_condition_parameter: List[RelatedConditionParameter] = field(
        default_factory=list,
        metadata={
            "name": "RelatedConditionParameter",
            "type": "Element",
            "namespace": "",
        },
    )
    required_resource: List[RequiredResource] = field(
        default_factory=list,
        metadata={
            "name": "RequiredResource",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement: List[Requirement] = field(
        default_factory=list,
        metadata={
            "name": "Requirement",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_satisfied_by: List[RequirementSatisfiedBy] = field(
        default_factory=list,
        metadata={
            "name": "RequirementSatisfiedBy",
            "type": "Element",
            "namespace": "",
        },
    )
    requirement_source: List[RequirementSource] = field(
        default_factory=list,
        metadata={
            "name": "RequirementSource",
            "type": "Element",
            "namespace": "",
        },
    )
    resource_as_realized: List[ResourceAsRealized] = field(
        default_factory=list,
        metadata={
            "name": "ResourceAsRealized",
            "type": "Element",
            "namespace": "",
        },
    )
    resource_item: List[ResourceItem] = field(
        default_factory=list,
        metadata={
            "name": "ResourceItem",
            "type": "Element",
            "namespace": "",
        },
    )
    resource_item_realization: List[ResourceItemRealization] = field(
        default_factory=list,
        metadata={
            "name": "ResourceItemRealization",
            "type": "Element",
            "namespace": "",
        },
    )
    risk: List[Risk] = field(
        default_factory=list,
        metadata={
            "name": "Risk",
            "type": "Element",
            "namespace": "",
        },
    )
    scheme: List[Scheme] = field(
        default_factory=list,
        metadata={
            "name": "Scheme",
            "type": "Element",
            "namespace": "",
        },
    )
    security_classification: List[SecurityClassification] = field(
        default_factory=list,
        metadata={
            "name": "SecurityClassification",
            "type": "Element",
            "namespace": "",
        },
    )
    serial_effectivity: List[SerialEffectivity] = field(
        default_factory=list,
        metadata={
            "name": "SerialEffectivity",
            "type": "Element",
            "namespace": "",
        },
    )
    set_membership: List[SetMembership] = field(
        default_factory=list,
        metadata={
            "name": "SetMembership",
            "type": "Element",
            "namespace": "",
        },
    )
    shape_dependent_property_representation: List[
        ShapeDependentPropertyRepresentation
    ] = field(
        default_factory=list,
        metadata={
            "name": "ShapeDependentPropertyRepresentation",
            "type": "Element",
            "namespace": "",
        },
    )
    shape_description_association: List[ShapeDescriptionAssociation] = field(
        default_factory=list,
        metadata={
            "name": "ShapeDescriptionAssociation",
            "type": "Element",
            "namespace": "",
        },
    )
    shape_element: List[ShapeElement] = field(
        default_factory=list,
        metadata={
            "name": "ShapeElement",
            "type": "Element",
            "namespace": "",
        },
    )
    shape_placement_association: List[ShapePlacementAssociation] = field(
        default_factory=list,
        metadata={
            "name": "ShapePlacementAssociation",
            "type": "Element",
            "namespace": "",
        },
    )
    standard_uncertainty: List[StandardUncertainty] = field(
        default_factory=list,
        metadata={
            "name": "StandardUncertainty",
            "type": "Element",
            "namespace": "",
        },
    )
    state: List[State] = field(
        default_factory=list,
        metadata={
            "name": "State",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assertion: List[StateAssertion] = field(
        default_factory=list,
        metadata={
            "name": "StateAssertion",
            "type": "Element",
            "namespace": "",
        },
    )
    state_assessment: List[StateAssessment] = field(
        default_factory=list,
        metadata={
            "name": "StateAssessment",
            "type": "Element",
            "namespace": "",
        },
    )
    state_definition: List[StateDefinition] = field(
        default_factory=list,
        metadata={
            "name": "StateDefinition",
            "type": "Element",
            "namespace": "",
        },
    )
    state_observed: List[StateObserved] = field(
        default_factory=list,
        metadata={
            "name": "StateObserved",
            "type": "Element",
            "namespace": "",
        },
    )
    state_predicted: List[StatePredicted] = field(
        default_factory=list,
        metadata={
            "name": "StatePredicted",
            "type": "Element",
            "namespace": "",
        },
    )
    subset_member: List[SubsetMember] = field(
        default_factory=list,
        metadata={
            "name": "SubsetMember",
            "type": "Element",
            "namespace": "",
        },
    )
    system: List[System] = field(
        default_factory=list,
        metadata={
            "name": "System",
            "type": "Element",
            "namespace": "",
        },
    )
    system_breakdown: List[SystemBreakdown] = field(
        default_factory=list,
        metadata={
            "name": "SystemBreakdown",
            "type": "Element",
            "namespace": "",
        },
    )
    system_breakdown_context: List[SystemBreakdownContext] = field(
        default_factory=list,
        metadata={
            "name": "SystemBreakdownContext",
            "type": "Element",
            "namespace": "",
        },
    )
    system_element: List[SystemElement] = field(
        default_factory=list,
        metadata={
            "name": "SystemElement",
            "type": "Element",
            "namespace": "",
        },
    )
    task_method: List[TaskMethod] = field(
        default_factory=list,
        metadata={
            "name": "TaskMethod",
            "type": "Element",
            "namespace": "",
        },
    )
    task_objective: List[TaskObjective] = field(
        default_factory=list,
        metadata={
            "name": "TaskObjective",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval: List[TimeInterval] = field(
        default_factory=list,
        metadata={
            "name": "TimeInterval",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_effectivity: List[TimeIntervalEffectivity] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalEffectivity",
            "type": "Element",
            "namespace": "",
        },
    )
    time_interval_with_bounds: List[TimeIntervalWithBounds] = field(
        default_factory=list,
        metadata={
            "name": "TimeIntervalWithBounds",
            "type": "Element",
            "namespace": "",
        },
    )
    type_of_person: List[TypeOfPerson] = field(
        default_factory=list,
        metadata={
            "name": "TypeOfPerson",
            "type": "Element",
            "namespace": "",
        },
    )
    type_of_person_definition: List[TypeOfPersonDefinition] = field(
        default_factory=list,
        metadata={
            "name": "TypeOfPersonDefinition",
            "type": "Element",
            "namespace": "",
        },
    )
    uncertainty_qualifier: List[UncertaintyQualifier] = field(
        default_factory=list,
        metadata={
            "name": "UncertaintyQualifier",
            "type": "Element",
            "namespace": "",
        },
    )
    validation: List[Validation] = field(
        default_factory=list,
        metadata={
            "name": "Validation",
            "type": "Element",
            "namespace": "",
        },
    )
    value_function: List[ValueFunction] = field(
        default_factory=list,
        metadata={
            "name": "ValueFunction",
            "type": "Element",
            "namespace": "",
        },
    )
    verification: List[Verification] = field(
        default_factory=list,
        metadata={
            "name": "Verification",
            "type": "Element",
            "namespace": "",
        },
    )
    view_definition_context: List[ViewDefinitionContext] = field(
        default_factory=list,
        metadata={
            "name": "ViewDefinitionContext",
            "type": "Element",
            "namespace": "",
        },
    )
    work_order: List[WorkOrder] = field(
        default_factory=list,
        metadata={
            "name": "WorkOrder",
            "type": "Element",
            "namespace": "",
        },
    )
    work_output: List[WorkOutput] = field(
        default_factory=list,
        metadata={
            "name": "WorkOutput",
            "type": "Element",
            "namespace": "",
        },
    )
    work_request: List[WorkRequest] = field(
        default_factory=list,
        metadata={
            "name": "WorkRequest",
            "type": "Element",
            "namespace": "",
        },
    )
    zone_breakdown: List[ZoneBreakdown] = field(
        default_factory=list,
        metadata={
            "name": "ZoneBreakdown",
            "type": "Element",
            "namespace": "",
        },
    )
    zone_breakdown_context: List[ZoneBreakdownContext] = field(
        default_factory=list,
        metadata={
            "name": "ZoneBreakdownContext",
            "type": "Element",
            "namespace": "",
        },
    )
    zone_element: List[ZoneElement] = field(
        default_factory=list,
        metadata={
            "name": "ZoneElement",
            "type": "Element",
            "namespace": "",
        },
    )
